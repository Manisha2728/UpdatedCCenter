# -*- coding: utf-8 -*-
# Auto generated using CCenter command smart_migrate
from __future__ import unicode_literals

import datetime
from django.db import migrations, connection
from dbmconfigapp.utils import modelsfactory
from dbmconfigapp.utils.modelsfactory import get_components_by_name
from dbmconfigapp.models import add_to_model_descriptor2
from configcenter.settings import get_param
import dbmconfigapp.models.ehragent

VERSION = '21.2'

# Clinical Domain pages
cv_allergies=None             #1
cv_problems=None              #2
cv_diagnoses=None             #3
cv_immunizations=None         #4
cv_pathologies=None           #5
cv_medications=None           #6
cv_encounters=None            #7
cv_encounters_details=None    #8
cv_plv=None                   #9
cv_summary=None               #10
cv_procedures=None            #11
cv_demographics=None          #12
cv_vitals=None                #13
cv_patient_search=None        #14
cv_lab_results_history=None   #15
cv_laboratory=None            #16
cv_imaging=None               #17
cv_documents=None             #18
cv_lab_results=None           #19

pv_clinical_domain_page=None
pv_patient_search_page=None

cv_patient_display_page=None
pl_patient_display_page=None
pv_patient_display_page=None

cv_reporting_page=None
pl_reporting_page=None
pv_reporting_page=None

cv_general_page=None
pl_general_page=None

pv_measurement_page=None

def forward(apps, schema_editor):
    load_services_and_components(apps, schema_editor)

    load_ClinicalDomains_data(apps, schema_editor)
    load_PatientDisplayPages_data(apps, schema_editor)
    load_DataElement_data(apps, schema_editor)
    load_ClinicalDomainProperties_data(apps, schema_editor)
    load_PVClinicalDomains_data(apps, schema_editor)
    load_AgentHubGeneralPage_data(apps, schema_editor)
    load_AgentppHostedAppPage_data(apps, schema_editor)
    load_CapsulePage_data(apps, schema_editor)
    load_CarequalityIntegrationSettingsPage_data(apps, schema_editor)
    load_ClinicalCodeDisplayPages_data(apps, schema_editor)
    load_ClinicalViewerGeneralPage_data(apps, schema_editor)
    load_PlGeneralPage_data(apps, schema_editor)
    load_CCDADisplayPages_data(apps, schema_editor)
    load_DataAccessAuditingPages_data(apps, schema_editor)
    load_ReportingPages_data(apps, schema_editor)
    load_DirectMessagingAcdmPage_data(apps, schema_editor)
    load_DocumentSearchBootstrap_page_data(apps, schema_editor)
    load_DocumentSearchGeneral_page_data(apps, schema_editor)
    load_DocumentSearchLiveFeeds_page_data(apps, schema_editor)
    load_MyHRConnectivityPage_data(apps, schema_editor)
    load_OperationalManagerPage_data(apps, schema_editor)
    load_PatientViewPage_data(apps, schema_editor)
    load_PVMeasurementPage_data(apps, schema_editor)
    load_PatientSearch_data(apps, schema_editor)
    load_Vpo_data(apps, schema_editor)

    load_SystemParameters_data(apps, schema_editor)

    load_obsolete_models_data(apps, schema_editor)

    pass

def backward(apps, schema_editor):
    pass

def load_services_and_components(apps, schema_editor):

    db_alias = schema_editor.connection.alias

    Service = apps.get_model("dbmconfigapp", "Service")

    Service.objects.using(db_alias).bulk_create([
        Service(name='dbMotion Security Service', verbose_name='dbMotion Security Service', code_name='Security', need_restart = True),
        Service(name='W3SVC', verbose_name='IIS(Clinical Viewer)', code_name='ClinicalViewer', need_restart = True),
        Service(name='dbmPPOLService', verbose_name='dbMotion PPOL Service', code_name='PPOL', need_restart = True),
        Service(name='dbMotionBusinessAccessService_VPO - 4 Services', verbose_name='dbMotion Business Access Services (VPO, VPO1, VPO2, VPO3)', code_name='VPO', need_restart = True),
        Service(name='dbMotion Transformation Document Conversion', verbose_name='dbMotion Transformation Document Conversion', code_name='DocumentConversion', need_restart = False),
        Service(name='dbMotion XDS IHE Services', verbose_name='dbMotion XDS IHE Services', code_name='ACDM', need_restart = True),
        Service(name='Communication', verbose_name='Communication', code_name='Communication', need_restart = True),
        Service(name='Via', verbose_name='VIA', code_name='Via', need_restart = True),
        Service(name='Federation', verbose_name='Federation', code_name='Federation', need_restart = False),
        Service(name='dbMotion Analysis Data Repository', verbose_name='dbMotion Analysis Data Repository', code_name='ADR', need_restart = True),
        Service(name='dbMotion Patient Services', verbose_name='dbMotion Patient Services', code_name='PatientService', need_restart = True),
        Service(name='W3SVC', verbose_name='IIS(Security Management)', code_name='SecurityManagement', need_restart = True),
        Service(name='dbMotion Patient list', verbose_name='dbMotion Patient List Service & IIS(PL.API)', code_name='PatientList', need_restart = True),
        Service(name='Capsule', verbose_name='Capsule', code_name='Capsule', need_restart = True),
        Service(name='CVA', verbose_name='IIS(CVA)', code_name='CVA', need_restart = True),
        Service(name='dbMotion Patient View', verbose_name='dbMotion Patient View Service', code_name='PatientView', need_restart = True),
        Service(name='dbMotion Communication BOT', verbose_name='dbMotion Communication BOT Service', code_name='BOT', need_restart = True),
    ])

    Component = apps.get_model("dbmconfigapp", "Component")

    Component.objects.using(db_alias).bulk_create([
        Component(name='Clinical Viewer', verbose_name='Clinical Viewer'),
        Component(name='Population Health', verbose_name='Population Health'),
        Component(name='EHR Agent', verbose_name='EHR Agent'),
        Component(name='CAG', verbose_name='CAG'),
        Component(name='ACDM', verbose_name='ACDM'),
        Component(name='Operational Manager', verbose_name='Operational Manager'),
        Component(name='Agent Hub', verbose_name='Agent Hub'),
        Component(name='Patient List', verbose_name='Patient List'),
        Component(name='Patient View', verbose_name='Patient View'),
    ])


#def get_components_by_name(apps, names_list):
#    components = []
#    Components = apps.get_model("dbmconfigapp", "Component").objects

#    for comp_name in names_list:
#        components.append(Components.filter(name=comp_name)[0])

#    return components

def load_PatientDisplayPages_data(apps, schema_editor):

    global cv_patient_display_page
    global pl_patient_display_page
    global pv_patient_display_page

    components = get_components_by_name(apps, ['Clinical Viewer', 'EHR Agent', 'Patient List', 'Patient View'])

    cv_patient_display_page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'CvPatientDisplayPage')(),
                                            "",
                                            "",
                                            "cv_patient_display",
                                            [], components)

    pl_patient_display_page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'PlPatientDisplayPage')(),
                                            "",
                                            "",
                                            "pl_patient_display",
                                            [], components)

    pv_patient_display_page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'PVPatientDisplayPage')(),
                                            "",
                                            "",
                                            "pv_patient_display",
                                            [], components)

    model = apps.get_model('dbmconfigapp', 'AppsPatientDisplay')()
    model.save()
    add_to_model_descriptor2(model_name='dbmconfigapp_appspatientdisplay', services_codes=['ClinicalViewer','CVA'])

    model = apps.get_model('dbmconfigapp', 'AppsPatientDisplayWithAgent')()
    model.save()
    add_to_model_descriptor2(model_name='dbmconfigapp_appspatientdisplaywithagent', services_codes=['ClinicalViewer','PatientList','CVA'])

    model = apps.get_model('dbmconfigapp', 'AppsAdvanceDirectiveNodes')()
    model.save()
    add_to_model_descriptor2(model_name='dbmconfigapp_appsadvancedirectivenodes', services_codes=['ClinicalViewer','CVA'])

    model = apps.get_model('dbmconfigapp', 'AppsPatientDisplayCommon')()
    model.save()
    add_to_model_descriptor2(model_name='dbmconfigapp_appspatientdisplaycommon', services_codes=['ClinicalViewer','CVA'])

    AgeCalculation = apps.get_model("dbmconfigapp", "AppsPatientDisplayAgeCalculation")
    db_alias = schema_editor.connection.alias

    AgeCalculation.objects.using(db_alias).bulk_create([
        AgeCalculation(age_calc_time_span='24|4', date_format='THM', priority_order=1),
        AgeCalculation(age_calc_time_span='4|1', date_format='PD', priority_order=2),
        AgeCalculation(age_calc_time_span='30|1', date_format='PM', priority_order=3),
        AgeCalculation(age_calc_time_span='6|0', date_format='PYM', priority_order=4),
    ])
    add_to_model_descriptor2(model_name='dbmconfigapp_appspatientdisplayagecalculation', services_codes=['VPO','PatientList','CVA'])

    model = apps.get_model('dbmconfigapp', 'AppsPatientDisplayValueBaseProgram')()
    model.save()
    add_to_model_descriptor2(model_name='dbmconfigapp_appspatientdisplayvaluebaseprogram', services_codes=['ClinicalViewer','CVA','VPO'])

    model = apps.get_model('dbmconfigapp', 'AppsPatientDisplayVBP')()
    model.save()
    add_to_model_descriptor2(model_name='dbmconfigapp_appspatientdisplayvbp', services_codes=['ClinicalViewer','CVA','VPO'])

    add_to_model_descriptor2(model_name='dbmconfigapp_appspatientdisplaymetriccodebasedindicator', services_codes=['VPO','CVA'])

    model = apps.get_model('dbmconfigapp', 'PvPatientNameDisplay')()
    model.save()
    add_to_model_descriptor2(model_name='dbmconfigapp_pvpatientnamedisplay', services_codes=['CVA'])

    Ordering = apps.get_model("dbmconfigapp", "PatientDetailsSectionOrdering")

    Ordering.objects.using(db_alias).bulk_create([
        Ordering(display_name='PATIENT INDICATORS', code='INDICATOR', priority_order=1),
        Ordering(display_name='IDENTIFIERS', code='IDENTIFIER', priority_order=2),
        Ordering(display_name='CONTACT INFORMATION', code='CONTACT', priority_order=3),
        Ordering(display_name='DEMOGRAPHICS', code='DEMOGRAPHIC', priority_order=4),
        Ordering(display_name='PROVIDERS', code='PROVIDER', priority_order=5),
        Ordering(display_name='INSURANCE', code='INSURANCE', priority_order=6),
   ])
    add_to_model_descriptor2(model_name='dbmconfigapp_patientdetailssectionordering', services_codes=['ClinicalViewer', 'CVA'])

def load_ClinicalDomains_data(apps, schema_editor):
    # Clinical Domain pages
    global cv_allergies             #1
    global cv_problems              #2
    global cv_diagnoses             #3
    global cv_immunizations         #4
    global cv_pathologies           #5
    global cv_medications           #6
    global cv_encounters            #7
    global cv_encounters_details    #8
    global cv_plv                   #9
    global cv_summary               #10
    global cv_procedures            #11
    global cv_demographics          #12
    global cv_vitals                #13
    global cv_patient_search        #14
    global cv_lab_results_history   #15
    global cv_laboratory            #16
    global cv_imaging               #17
    global cv_documents             #18
    global cv_lab_results           #19

    global pv_clinical_domain_page
    global pv_patient_search_page

    components = get_components_by_name(apps, ['Clinical Viewer'])

    cv_allergies = modelsfactory.createClinicalDomain(apps.get_model('dbmconfigapp', 'ClinicalDomainAllergies')(), 
                            primary_key = 1,
                            page_help_text ='', 
                            page_name='Allergies', 
                            tree_id='cv_allergies',
                            help_text_1='You can configure the way that the Clinical Viewer grid columns are displayed for each Clinical Viewer domain. <br>In case the SUM exceeds 100, a scrollbar will be added.', 
                            help_text_2='', 
                            help_text_3='', 
                            clinical_view_name='Allergies', 
                            services=[], 
                            components=components)

    cv_problems = modelsfactory.createClinicalDomain(apps.get_model('dbmconfigapp', 'ClinicalDomainProblems')(), 
                            primary_key = 2,
                            page_help_text ='', 
                            page_name='Problems', 
                            tree_id='cv_problems',
                            help_text_1='You can configure the way that the Clinical Viewer grid columns are displayed for each Clinical Viewer domain. <br>In case the SUM exceeds 100, a scrollbar will be added.', 
                            help_text_2='', 
                            help_text_3='', 
                            clinical_view_name='Problems', 
                            services=[], 
                            components=components)

    cv_diagnoses = modelsfactory.createClinicalDomain(apps.get_model('dbmconfigapp', 'ClinicalDomainDiagnoses')(), 
                            primary_key = 3,
                            page_help_text ='', 
                            page_name='Diagnoses', 
                            tree_id='cv_diagnoses',
                            help_text_1='You can configure the way that the Clinical Viewer grid columns are displayed for each Clinical Viewer domain. <br>In case the SUM exceeds 100, a scrollbar will be added.', 
                            help_text_2='', 
                            help_text_3='', 
                            clinical_view_name='Diagnoses', 
                            services=[], 
                            components=components, 
                            report_name = 'Diagnoses')

    cv_immunizations = modelsfactory.createClinicalDomain(apps.get_model('dbmconfigapp', 'ClinicalDomainImmunizations')(), 
                            primary_key = 4,
                            page_help_text ='', 
                            page_name='Immunizations', 
                            tree_id='cv_immunizations',
                            help_text_1='You can configure the way that the Clinical Viewer grid columns are displayed for each Clinical Viewer domain. <br>In case the SUM exceeds 100, a scrollbar will be added.', 
                            help_text_2='', 
                            help_text_3='', 
                            clinical_view_name='ImmunizationsList', 
                            services=[], 
                            components=components, 
                            report_name = 'Immunizations')

    cv_pathologies = modelsfactory.createClinicalDomain(apps.get_model('dbmconfigapp', 'ClinicalDomainPathologies')(), 
                            primary_key = 5,
                            page_help_text ='', 
                            page_name='Pathology', 
                            tree_id='cv_pathologies',
                            help_text_1='You can configure the way that the Clinical Viewer grid columns are displayed for each Clinical Viewer domain. <br>In case the SUM exceeds 100, a scrollbar will be added.', 
                            help_text_2='', 
                            help_text_3='', 
                            clinical_view_name='Pathology', 
                            services=[], 
                            components=components)

    cv_medications = modelsfactory.createClinicalDomain(apps.get_model('dbmconfigapp', 'ClinicalDomainMedications')(), 
                            primary_key = 6,
                            page_help_text ='', 
                            page_name='Medications', 
                            tree_id='cv_medications',
                            help_text_1='You can configure the way that the Clinical Viewer grid columns are displayed for each Clinical Viewer domain. <br>In case the SUM exceeds 100, a scrollbar will be added.', 
                            help_text_2='', 
                            help_text_3='', 
                            clinical_view_name='Medications', 
                            services=[], 
                            components=components, 
                            report_name = 'MedicationsList')

    cv_encounters = modelsfactory.createClinicalDomain(apps.get_model('dbmconfigapp', 'ClinicalDomainEncounters')(), 
                            primary_key = 7,
                            page_help_text ='', 
                            page_name='Encounters', 
                            tree_id='cv_encounters',
                            help_text_1='You can configure the way that the Clinical Viewer grid columns are displayed for each Clinical Viewer domain. <br>In case the SUM exceeds 100, a scrollbar will be added.', 
                            help_text_2='', 
                            help_text_3='', 
                            clinical_view_name='Encounters', 
                            services=[], 
                            components=components)

    cv_encounters_details = modelsfactory.createClinicalDomain(apps.get_model('dbmconfigapp', 'ClinicalDomainEncounterDetails')(), 
                            primary_key = 8,
                            page_help_text ='', 
                            page_name='Encounters Details', 
                            tree_id='cv_encounters_details',
                            help_text_1='', 
                            help_text_2='You can configure the way that the Clinical Viewer grid columns are displayed for each Clinical Viewer domain. <br>In case the SUM exceeds 100, a scrollbar will be added.', 
                            help_text_3='', 
                            clinical_view_name='EncounterDetails', 
                            services=[], 
                            components=components)

    cv_plv = modelsfactory.createClinicalDomain(apps.get_model('dbmconfigapp', 'ClinicalDomainPlv')(), 
                            primary_key = 9,
                            page_help_text ='', 
                            page_name='PLV', 
                            tree_id='cv_plv',
                            help_text_1='', 
                            help_text_2='', 
                            help_text_3='', 
                            clinical_view_name='PLVList', 
                            services=[], 
                            components=components)

    cv_summary = modelsfactory.createClinicalDomain(apps.get_model('dbmconfigapp', 'ClinicalDomainSummary')(), 
                            primary_key = 10,
                            page_help_text ='', 
                            page_name='Summary', 
                            tree_id='cv_summary',
                            help_text_1='You can configure the way that the Clinical Viewer grid columns are displayed for each Clinical Viewer domain. <br>In case the SUM exceeds 100, a scrollbar will be added.', 
                            help_text_2='', 
                            help_text_3='', 
                            clinical_view_name='Summary', 
                            services=[], 
                            components=components, 
                            report_name = 'Summary')

    cv_procedures = modelsfactory.createClinicalDomain(apps.get_model('dbmconfigapp', 'ClinicalDomainProcedures')(), 
                            primary_key = 11,
                            page_help_text ='', 
                            page_name='Procedures', 
                            tree_id='cv_procedures',
                            help_text_1='You can configure the way that the Clinical Viewer grid columns are displayed for each Clinical Viewer domain. <br>In case the SUM exceeds 100, a scrollbar will be added.', 
                            help_text_2='', 
                            help_text_3='', 
                            clinical_view_name='Procedures', 
                            services=[], 
                            components=components)

    cv_demographics = modelsfactory.createClinicalDomain(apps.get_model('dbmconfigapp', 'ClinicalDomainDemographics')(), 
                            primary_key = 12,
                            page_help_text ='', 
                            page_name='Demographics', 
                            tree_id='cv_demographics',
                            help_text_1='You can configure the way that the Clinical Viewer grid elements are displayed for each Clinical Viewer domain.', 
                            help_text_2='', 
                            help_text_3='You can configure the way that the Clinical Viewer grid columns are displayed for each Clinical Viewer domain. <br>In case the SUM exceeds 100, a scrollbar will be added.', 
                            clinical_view_name='Demography', 
                            services=[], 
                            components=components, 
                            report_name = 'Demography')

    cv_vitals = modelsfactory.createClinicalDomain(apps.get_model('dbmconfigapp', 'ClinicalDomainVitals')(), 
                            primary_key = 13,
                            page_help_text ='', 
                            page_name='Vitals', 
                            tree_id='cv_vitals',
                            help_text_1='In this section you can configure how the Vitals grid is displayed in the Clinical Viewer application.<br/><br/>In addition, you can create a new subdomain or replace an existing subdomain, as follows:<ol><li>Create a new subdomain in the dbMotion Vocabulary within the Vitals subdomin.<li>Associate all relevant codes to this subdomain.<li>Do one of the following in the Elements column:<ol><li>Add the new subdomain code at the end of the list of existing codes.<li>Replace an existing subdomain code with the new code.</ol><li>Check the Enable checkbox to make the column visible in Clinical Viewer.<br/></ol><ul><li>The number of columns is limited to 11 for optimal presentation.<li>If the total column width exceeds 100%, a horizontal scrollbar will appear in the Clinical Viewer application.</ul>', 
                            help_text_2='', 
                            help_text_3='', 
                            clinical_view_name='Vitals', 
                            services=[], 
                            components=components, 
                            report_name = 'MeasurementsEvent')

    cv_patient_search = modelsfactory.createClinicalDomain(apps.get_model('dbmconfigapp', 'CVPatientSearch')(), 
                            primary_key = 14,
                            page_help_text ='', 
                            page_name='Patient Search', 
                            tree_id='hard_code_id',
                            help_text_1='', 
                            help_text_2='You can configure the way that the Clinical Viewer grid columns are displayed for each Clinical Viewer domain. <br>In case the SUM exceeds 100, a scrollbar will be added.<br>Note: Affects only Clinical Viewer', 
                            help_text_3='You can configure the way that the Clinical Viewer grid columns are displayed for each Clinical Viewer domain. <br>In case the SUM exceeds 100, a scrollbar will be added.<br>Note: Affects only Clinical Viewer', 
                            clinical_view_name='PatientSearch', 
                            services=[], 
                            components=components)

    cv_lab_results_history = modelsfactory.createClinicalDomain(apps.get_model('dbmconfigapp', 'ClinicalDomainLabResultsHistory')(), 
                            primary_key = 15,
                            page_help_text ='', 
                            page_name='Lab Results History', 
                            tree_id='cv_lab_results_history',
                            help_text_1='', 
                            help_text_2='', 
                            help_text_3='', 
                            clinical_view_name='LaboratoryResultsHistory', 
                            services=[], 
                            components=components)

    cv_laboratory = modelsfactory.createClinicalDomain(apps.get_model('dbmconfigapp', 'ClinicalDomainLaboratory')(), 
                            primary_key = 16,
                            page_help_text ='', 
                            page_name='Labs', 
                            tree_id='cv_laboratory',
                            help_text_1='You can configure the way that the Clinical Viewer grid columns are displayed for each Clinical Viewer domain.<br>In case the SUM exceeds 100, a scrollbar will be added.', 
                            help_text_2='', 
                            help_text_3='', 
                            clinical_view_name='LaboratoryEvents', 
                            services=[], 
                            components=components)

    cv_imaging = modelsfactory.createClinicalDomain(apps.get_model('dbmconfigapp', 'ClinicalDomainImaging')(), 
                            primary_key = 17,
                            page_help_text ='', 
                            page_name='Imaging', 
                            tree_id='cv_imaging',
                            help_text_1='', 
                            help_text_2='', 
                            help_text_3='', 
                            clinical_view_name='Imaging', 
                            services=[], 
                            components=components, 
                            report_name = 'Imaging')

    cv_documents = modelsfactory.createClinicalDomain(apps.get_model('dbmconfigapp', 'ClinicalDomainDocuments')(), 
                            primary_key = 18,
                            page_help_text ='', 
                            page_name='Clinical Documents', 
                            tree_id='cv_documents',
                            help_text_1='', 
                            help_text_2='', 
                            help_text_3='', 
                            clinical_view_name='ClinicalDocuments', 
                            services=[], 
                            components=components)

    cv_lab_results = modelsfactory.createClinicalDomain(apps.get_model('dbmconfigapp', 'ClinicalDomainLabResults')(), 
                            primary_key = 19,
                            page_help_text ='', 
                            page_name='Lab Results', 
                            tree_id='cv_lab_results',
                            help_text_1="You can configure the way that the Clinical Viewer grid columns are displayed for each Clinical Viewer domain.<br>In case the SUM exceeds 100, a scrollbar will be added.<br><br><ul class='messagelist'><li class='warning'>Attention! The columns 'Checkbox' and 'Graph' are only available on the Clinical View Page, not in the Report.</li></ul>", 
                            help_text_2='', 
                            help_text_3='', 
                            clinical_view_name='LaboratoryResults', 
                            services=[], 
                            components=components, 
                            report_name = 'LabResults')

    add_to_model_descriptor2(model_name='dbmconfigapp_clinicaldomain', services_codes=['ClinicalViewer'])

    pv_clinical_domain_page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'PVClinicalDomainPage')(),
                                            "",
                                            "",
                                            "pv_clinical_domains_page",
                                            [], [])

    pv_patient_search_page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'PVPatientSearchPage')(),
                                            "",
                                            "",
                                            "pv_search_page",
                                            [], [])

def load_DataElement_data(apps, schema_editor):

    db_alias = schema_editor.connection.alias

    DataElement = apps.get_model("dbmconfigapp", "DataElement")

    add_to_model_descriptor2("dbmconfigapp_dataelement", services_codes=['ClinicalViewer', 'CVA'])
    add_to_model_descriptor2("dbmconfigapp_dataelement_with_vpo", services_codes=['ClinicalViewer','VPO'])

    DataElement.objects.using(db_alias).bulk_create([
DataElement(clinical_domain=cv_allergies,pk=17,name="Type",page_width=8,default_width=8,report_width=None,default_report_width=None,order=3,clinical_view_name="Calc_CodeDesignation",report_field_name="",grid_name="ugMainAllergies",report_name=""),
DataElement(clinical_domain=cv_allergies,pk=18,name="Date",page_width=13,default_width=13,report_width=None,default_report_width=None,order=1,clinical_view_name="Calc_EffectiveTime_Start",report_field_name="",grid_name="ugMainAllergies",report_name=""),
DataElement(clinical_domain=cv_allergies,pk=19,name="Reaction",page_width=11,default_width=11,report_width=None,default_report_width=None,order=4,clinical_view_name="Calc_RelatedReactions",report_field_name="",grid_name="ugMainAllergies",report_name=""),
DataElement(clinical_domain=cv_allergies,pk=20,name="Documented By",page_width=13,default_width=13,report_width=None,default_report_width=None,order=5,clinical_view_name="Calc_MedicalStaffName",report_field_name="",grid_name="ugMainAllergies",report_name=""),
DataElement(clinical_domain=cv_allergies,pk=21,name="Facility",page_width=9,default_width=9,report_width=None,default_report_width=None,order=6,clinical_view_name="Calc_OrganizationName",report_field_name="",grid_name="ugMainAllergies",report_name=""),
DataElement(clinical_domain=cv_allergies,pk=22,name="Resolved",page_width=12,default_width=12,report_width=None,default_report_width=None,order=8,clinical_view_name="Calc_EffectiveTime_End",report_field_name="",grid_name="ugMainAllergies",report_name=""),
DataElement(clinical_domain=cv_allergies,pk=23,name="Source",page_width=9,default_width=9,report_width=None,default_report_width=None,order=9,clinical_view_name="DataSourceSystemName",report_field_name="",grid_name="ugMainAllergies",report_name=""),
DataElement(clinical_domain=cv_allergies,pk=24,name="Allergy To",page_width=16,default_width=16,report_width=None,default_report_width=None,order=2,clinical_view_name="Calc_IntoleranceValueCodeDesignation",report_field_name="",grid_name="ugMainAllergies",report_name=""),
DataElement(clinical_domain=cv_allergies,pk=25,name="Severity",page_width=9,default_width=9,report_width=None,default_report_width=None,order=7,clinical_view_name="SeverityValueCodeDesignation",report_field_name="",grid_name="ugMainAllergies",report_name=""),
DataElement(clinical_domain=cv_problems,pk=26,name="Date",page_width=11,default_width=11,report_width=0,default_report_width=0,order=1,clinical_view_name="Calc_EffectiveTime_Start",report_field_name="",grid_name="ugProblemList",report_name=""),
DataElement(clinical_domain=cv_problems,pk=27,name="Category",page_width=9,default_width=9,report_width=0,default_report_width=0,order=2,clinical_view_name="Calc_TypeCodeDesignation",report_field_name="",grid_name="ugProblemList",report_name=""),
DataElement(clinical_domain=cv_problems,pk=28,name="Problem",page_width=20,default_width=20,report_width=0,default_report_width=0,order=3,clinical_view_name="Calc_CodeDesignation",report_field_name="",grid_name="ugProblemList",report_name=""),
DataElement(clinical_domain=cv_problems,pk=29,name="Code",page_width=6,default_width=6,report_width=0,default_report_width=0,order=4,clinical_view_name="Calc_Code",report_field_name="",grid_name="ugProblemList",report_name=""),
DataElement(clinical_domain=cv_problems,pk=30,name="Status",page_width=8,default_width=8,report_width=0,default_report_width=0,order=5,clinical_view_name="StatusCodeDesignation",report_field_name="",grid_name="ugProblemList",report_name=""),
DataElement(clinical_domain=cv_problems,pk=31,name="Severity",page_width=9,default_width=9,report_width=0,default_report_width=0,order=6,clinical_view_name="SeverityCodeDesignation",report_field_name="",grid_name="ugProblemList",report_name=""),
DataElement(clinical_domain=cv_problems,pk=32,name="Documented By",page_width=13,default_width=13,report_width=0,default_report_width=0,order=7,clinical_view_name="Calc_MedicalStaffName",report_field_name="",grid_name="ugProblemList",report_name=""),
DataElement(clinical_domain=cv_problems,pk=33,name="Class",page_width=8,default_width=8,report_width=0,default_report_width=0,order=8,clinical_view_name="ClassCodeDesignation",report_field_name="",grid_name="ugProblemList",report_name=""),
DataElement(clinical_domain=cv_problems,pk=34,name="Source",page_width=8,default_width=8,report_width=0,default_report_width=0,order=9,clinical_view_name="DataSourceSystemName",report_field_name="",grid_name="ugProblemList",report_name=""),
DataElement(clinical_domain=cv_problems,pk=35,name="Facility",page_width=8,default_width=8,report_width=0,default_report_width=0,order=10,clinical_view_name="Calc_OrganizationName",report_field_name="",grid_name="ugProblemList",report_name=""),
DataElement(clinical_domain=cv_diagnoses,pk=36,name="Date",page_width=13,default_width=13,report_width=13,default_report_width=13,order=1,clinical_view_name="Calc_EffectiveTime",report_field_name="colDate",grid_name="ugDiagnoses",report_name=""),
DataElement(clinical_domain=cv_diagnoses,pk=37,name="Type",page_width=13,default_width=13,report_width=13,default_report_width=13,order=2,clinical_view_name="Calc_CodeDesignation",report_field_name="colType",grid_name="ugDiagnoses",report_name=""),
DataElement(clinical_domain=cv_diagnoses,pk=38,name="Diagnosis",page_width=15,default_width=15,report_width=15,default_report_width=15,order=3,clinical_view_name="Calc_ValueCodeDesignation",report_field_name="colDiagnosis",grid_name="ugDiagnoses",report_name=""),
DataElement(clinical_domain=cv_diagnoses,pk=39,name="Code",page_width=14,default_width=14,report_width=14,default_report_width=14,order=4,clinical_view_name="Calc_ValueCode",report_field_name="colCode",grid_name="ugDiagnoses",report_name=""),
DataElement(clinical_domain=cv_diagnoses,pk=40,name="Priority",page_width=10,default_width=10,report_width=10,default_report_width=10,order=5,clinical_view_name="Calc_PriorityDesignation",report_field_name="colPriority",grid_name="ugDiagnoses",report_name=""),
DataElement(clinical_domain=cv_diagnoses,pk=41,name="Facility",page_width=12,default_width=12,report_width=12,default_report_width=12,order=6,clinical_view_name="Calc_OrganizationName",report_field_name="colOrganization",grid_name="ugDiagnoses",report_name=""),
DataElement(clinical_domain=cv_diagnoses,pk=42,name="Unit",page_width=11,default_width=11,report_width=11,default_report_width=11,order=7,clinical_view_name="Calc_OrganizationUnitName",report_field_name="colUnit",grid_name="ugDiagnoses",report_name=""),
DataElement(clinical_domain=cv_diagnoses,pk=43,name="Source",page_width=12,default_width=12,report_width=12,default_report_width=12,order=8,clinical_view_name="DataSourceSystemName",report_field_name="colSource",grid_name="ugDiagnoses",report_name=""),
DataElement(clinical_domain=cv_immunizations,pk=44,name="Date",page_width=13,default_width=13,report_width=13,default_report_width=13,order=1,clinical_view_name="Calc_EffectiveTime",report_field_name="fldCalc_EffectiveTime",grid_name="ugImmunizations",report_name=""),
DataElement(clinical_domain=cv_immunizations,pk=45,name="Name",page_width=17,default_width=17,report_width=17,default_report_width=17,order=2,clinical_view_name="MaterialName",report_field_name="fldMaterialName",grid_name="ugImmunizations",report_name=""),
DataElement(clinical_domain=cv_immunizations,pk=46,name="Not Given",page_width=14,default_width=14,report_width=14,default_report_width=14,order=3,clinical_view_name="Calc_NotGivenReason",report_field_name="fldNotGiven",grid_name="ugImmunizations",report_name=""),
DataElement(clinical_domain=cv_immunizations,pk=47,name="Reaction",page_width=15,default_width=15,report_width=15,default_report_width=15,order=4,clinical_view_name="Calc_RelatedReactions",report_field_name="fldCalc_RelatedReactions",grid_name="ugImmunizations",report_name=""),
DataElement(clinical_domain=cv_immunizations,pk=48,name="Route",page_width=14,default_width=14,report_width=14,default_report_width=14,order=5,clinical_view_name="RouteCodeDesignation",report_field_name="fldRouteCodeDesignation",grid_name="ugImmunizations",report_name=""),
DataElement(clinical_domain=cv_immunizations,pk=49,name="Age",page_width=13,default_width=13,report_width=13,default_report_width=13,order=6,clinical_view_name="Calc_Age",report_field_name="fldCalc_Age",grid_name="ugImmunizations",report_name=""),
DataElement(clinical_domain=cv_immunizations,pk=50,name="Source",page_width=14,default_width=14,report_width=14,default_report_width=14,order=7,clinical_view_name="DataSourceSystemName",report_field_name="fldDataSourceSystemName",grid_name="ugImmunizations",report_name=""),
DataElement(clinical_domain=cv_medications,pk=70,name="Date",page_width=12,default_width=12,report_width=7,default_report_width=7,order=1,clinical_view_name="Calc_EffectiveTime_Start",report_field_name="colPrescriptionDate",grid_name="ugMainMediactions",report_name=""),
DataElement(clinical_domain=cv_medications,pk=71,name="Form",page_width=4,default_width=4,report_width=7,default_report_width=7,order=2,clinical_view_name="AdministrationUnitCodeDesignation",report_field_name="colForm",grid_name="ugMainMediactions",report_name=""),
DataElement(clinical_domain=cv_medications,pk=72,name="Medication",page_width=19,default_width=19,report_width=13.5,default_report_width=13.5,order=3,clinical_view_name="Calc_MedicineName",report_field_name="colMedicineName",grid_name="ugMainMediactions",report_name=""),
DataElement(clinical_domain=cv_medications,pk=73,name="SIG",page_width=18,default_width=18,report_width=13,default_report_width=13,order=4,clinical_view_name="SIG",report_field_name="colDose",grid_name="ugMainMediactions",report_name=""),
DataElement(clinical_domain=cv_medications,pk=74,name="Duration",page_width=6,default_width=6,report_width=6.5,default_report_width=6.5,order=5,clinical_view_name="Calc_DurationConversion",report_field_name="colFrequency",grid_name="ugMainMediactions",report_name=""),
DataElement(clinical_domain=cv_medications,pk=75,name="Prescriber",page_width=10,default_width=10,report_width=8,default_report_width=8,order=6,clinical_view_name="Calc_MedicalStaffName",report_field_name="colPrescriptedBy",grid_name="ugMainMediactions",report_name=""),
DataElement(clinical_domain=cv_medications,pk=76,name="End Date",page_width=12,default_width=12,report_width=7,default_report_width=7,order=7,clinical_view_name="Calc_EffectiveTime_End",report_field_name="colEndDate",grid_name="ugMainMediactions",report_name=""),
DataElement(clinical_domain=cv_medications,pk=77,name="Status",page_width=8,default_width=8,report_width=6,default_report_width=6,order=8,clinical_view_name="Calc_Status",report_field_name="colStatus",grid_name="ugMainMediactions",report_name=""),
DataElement(clinical_domain=cv_medications,pk=78,name="Type",page_width=7,default_width=7,report_width=7,default_report_width=7,order=9,clinical_view_name="Calc_DistributionType",report_field_name="colType",grid_name="ugMainMediactions",report_name=""),
DataElement(clinical_domain=cv_medications,pk=79,name="Facility",page_width=8,default_width=8,report_width=8,default_report_width=8,order=10,clinical_view_name="Calc_OrganizationName",report_field_name="colFacility",grid_name="ugMainMediactions",report_name=""),
DataElement(clinical_domain=cv_medications,pk=80,name="Dispense",page_width=7,default_width=7,report_width=7,default_report_width=7,order=11,clinical_view_name="Dispense",report_field_name="colDispense",grid_name="ugMainMediactions",report_name=""),
DataElement(clinical_domain=cv_medications,pk=81,name="Refill",page_width=4,default_width=4,report_width=4,default_report_width=4,order=12,clinical_view_name="RepeatNumber",report_field_name="colRefill",grid_name="ugMainMediactions",report_name=""),
DataElement(clinical_domain=cv_medications,pk=82,name="Source",page_width=8,default_width=8,report_width=6,default_report_width=6,order=13,clinical_view_name="DataSourceSystemName",report_field_name="colSource",grid_name="ugMainMediactions",report_name=""),
DataElement(clinical_domain=cv_encounters,pk=83,name="Admission Date",page_width=12,default_width=12,report_width=None,default_report_width=None,order=1,clinical_view_name="Calc_EffectiveTime_Start",report_field_name="",grid_name="ugMainEncounters",report_name=""),
DataElement(clinical_domain=cv_encounters,pk=84,name="Type",page_width=8,default_width=8,report_width=None,default_report_width=None,order=2,clinical_view_name="CodeDesignation",report_field_name="",grid_name="ugMainEncounters",report_name=""),
DataElement(clinical_domain=cv_encounters,pk=85,name="Facility",page_width=8.5,default_width=8.5,report_width=None,default_report_width=None,order=3,clinical_view_name="Calc_OrganizationName",report_field_name="",grid_name="ugMainEncounters",report_name=""),
DataElement(clinical_domain=cv_encounters,pk=86,name="Location",page_width=9,default_width=9,report_width=None,default_report_width=None,order=4,clinical_view_name="Calc_OrganizationUnitName",report_field_name="",grid_name="ugMainEncounters",report_name=""),
DataElement(clinical_domain=cv_encounters,pk=87,name="Attending",page_width=9.5,default_width=9.5,report_width=None,default_report_width=None,order=5,clinical_view_name="Calc_MedicalStaffName",report_field_name="",grid_name="ugMainEncounters",report_name=""),
DataElement(clinical_domain=cv_encounters,pk=88,name="Service",page_width=8,default_width=8,report_width=None,default_report_width=None,order=6,clinical_view_name="Calc_Service",report_field_name="",grid_name="ugMainEncounters",report_name=""),
DataElement(clinical_domain=cv_encounters,pk=89,name="Discharge Date",page_width=13,default_width=13,report_width=None,default_report_width=None,order=7,clinical_view_name="Calc_EffectiveTime_End",report_field_name="",grid_name="ugMainEncounters",report_name=""),
DataElement(clinical_domain=cv_encounters,pk=90,name="Report Icon",page_width=2.5,default_width=2.5,report_width=None,default_report_width=None,order=8,clinical_view_name="DCSummary",report_field_name="",grid_name="ugMainEncounters",report_name=""),
DataElement(clinical_domain=cv_encounters,pk=91,name="Discharged To",page_width=12,default_width=12,report_width=None,default_report_width=None,order=9,clinical_view_name="DischargeDispositionCodeDesignation",report_field_name="",grid_name="ugMainEncounters",report_name=""),
DataElement(clinical_domain=cv_encounters,pk=92,name="Encounter ID",page_width=9.5,default_width=9.5,report_width=None,default_report_width=None,order=10,clinical_view_name="Id_Extension",report_field_name="",grid_name="ugMainEncounters",report_name=""),
DataElement(clinical_domain=cv_encounters,pk=93,name="Source",page_width=8,default_width=8,report_width=None,default_report_width=None,order=11,clinical_view_name="DataSourceSystemName",report_field_name="",grid_name="ugMainEncounters",report_name=""),
DataElement(clinical_domain=cv_procedures,pk=124,name="Date",page_width=13,default_width=13,report_width=None,default_report_width=None,order=1,clinical_view_name="Calc_EffectiveTime_Start",report_field_name="",grid_name="ugProcedures",report_name=""),
DataElement(clinical_domain=cv_procedures,pk=125,name="Procedure",page_width=12,default_width=12,report_width=None,default_report_width=None,order=2,clinical_view_name="Calc_CodeDesignation",report_field_name="",grid_name="ugProcedures",report_name=""),
DataElement(clinical_domain=cv_procedures,pk=126,name="Type",page_width=12,default_width=12,report_width=None,default_report_width=None,order=3,clinical_view_name="ProcedureTypeCodeDesignation",report_field_name="",grid_name="ugProcedures",report_name=""),
DataElement(clinical_domain=cv_procedures,pk=127,name="Code",page_width=12,default_width=12,report_width=None,default_report_width=None,order=4,clinical_view_name="Calc_Code",report_field_name="",grid_name="ugProcedures",report_name=""),
DataElement(clinical_domain=cv_procedures,pk=128,name="PerformedBy",page_width=12,default_width=12,report_width=None,default_report_width=None,order=5,clinical_view_name="Calc_MedicalStaffName",report_field_name="",grid_name="ugProcedures",report_name=""),
DataElement(clinical_domain=cv_procedures,pk=129,name="Facility",page_width=12,default_width=12,report_width=None,default_report_width=None,order=6,clinical_view_name="Calc_OrganizationName",report_field_name="",grid_name="ugProcedures",report_name=""),
DataElement(clinical_domain=cv_procedures,pk=130,name="Service",page_width=11,default_width=11,report_width=None,default_report_width=None,order=7,clinical_view_name="ServiceDeliveryLocationRoleTypeCodeDesignation",report_field_name="",grid_name="ugProcedures",report_name=""),
DataElement(clinical_domain=cv_procedures,pk=131,name="Source",page_width=11,default_width=11,report_width=None,default_report_width=None,order=8,clinical_view_name="DataSourceSystemName",report_field_name="",grid_name="ugProcedures",report_name=""),
DataElement(clinical_domain=cv_procedures,pk=132,name="Report Icon",page_width=5,default_width=5,report_width=None,default_report_width=None,order=9,clinical_view_name="Report",report_field_name="",grid_name="ugProcedures",report_name=""),
DataElement(clinical_domain=cv_vitals,pk=141,name="Date",page_width=8,default_width=8,report_width=8,default_report_width=8,order=1,clinical_view_name="Calc_EffectiveTime",report_field_name="Date_Field",grid_name="ugVitals",report_name="VitalsTable"),
DataElement(clinical_domain=cv_vitals,pk=142,name="Time",page_width=5,default_width=5,report_width=5,default_report_width=5,order=2,clinical_view_name="Time",report_field_name="Time_Field",grid_name="ugVitals",report_name="VitalsTable"),
DataElement(clinical_domain=cv_vitals,pk=143,name="Documented By",page_width=13,default_width=13,report_width=13,default_report_width=13,order=9,clinical_view_name="Calc_MedicalStaffName",report_field_name="DocumentedBy_Field",grid_name="ugVitals",report_name="VitalsTable"),
DataElement(clinical_domain=cv_vitals,pk=144,name="Facility",page_width=11,default_width=11,report_width=11,default_report_width=11,order=10,clinical_view_name="Calc_OrganizationName",report_field_name="Facility_Field",grid_name="ugVitals",report_name="VitalsTable"),
DataElement(clinical_domain=cv_vitals,pk=145,name="Source",page_width=11,default_width=11,report_width=12,default_report_width=12,order=11,clinical_view_name="DataSourceSystemName",report_field_name="Source_Field",grid_name="ugVitals",report_name="VitalsTable"),
DataElement(clinical_domain=cv_vitals,pk=146,name="BloodPressure",page_width=11,default_width=11,report_width=10,default_report_width=10,order=4,clinical_view_name="m1",report_field_name="M1_Subreport",grid_name="ugVitals",report_name="VitalsTable",hide_uom=1,concatenate_values=1),
DataElement(clinical_domain=cv_vitals,pk=147,name="BodyWeight",page_width=8,default_width=8,report_width=8,default_report_width=8,order=7,clinical_view_name="m2",report_field_name="M2_Subreport",grid_name="ugVitals",report_name="VitalsTable",concatenate_values=1),
DataElement(clinical_domain=cv_vitals,pk=148,name="BodyHeight",page_width=8,default_width=8,report_width=8,default_report_width=8,order=6,clinical_view_name="m3",report_field_name="M3_Subreport",grid_name="ugVitals",report_name="VitalsTable",concatenate_values=1),
DataElement(clinical_domain=cv_vitals,pk=149,name="BMI",page_width=7,default_width=7,report_width=7,default_report_width=7,order=8,clinical_view_name="m4",report_field_name="M4_Subreport",grid_name="ugVitals",report_name="VitalsTable"),
DataElement(clinical_domain=cv_vitals,pk=150,name="HeartRate",page_width=10,default_width=10,report_width=10,default_report_width=10,order=3,clinical_view_name="m5",report_field_name="M5_Subreport",grid_name="ugVitals",report_name="VitalsTable",hide_uom=1),
DataElement(clinical_domain=cv_vitals,pk=151,name="OxygenSaturation",page_width=8,default_width=8,report_width=8,default_report_width=8,order=5,clinical_view_name="m6",report_field_name="M6_Subreport",grid_name="ugVitals",report_name="VitalsTable"),
DataElement(clinical_domain=cv_vitals,pk=152,name="SystolicBloodPressure",enable=0,page_width=5,default_width=5,report_width=5,default_report_width=5,order=12,clinical_view_name="m7",report_field_name="M7_Subreport",grid_name="ugVitals",report_name="VitalsTable"),
DataElement(clinical_domain=cv_vitals,pk=153,name="RespiratoryRate",enable=0,page_width=5,default_width=5,report_width=5,default_report_width=5,order=13,clinical_view_name="m8",report_field_name="M8_Subreport",grid_name="ugVitals",report_name="VitalsTable"),
DataElement(clinical_domain=cv_vitals,pk=154,name="DaistolicBloodPressure",enable=0,page_width=5,default_width=5,report_width=5,default_report_width=5,order=14,clinical_view_name="m9",report_field_name="M9_Subreport",grid_name="ugVitals",report_name="VitalsTable"),
DataElement(clinical_domain=cv_vitals,pk=155,name="-",enable=0,page_width=5,default_width=5,report_width=5,default_report_width=5,order=15,clinical_view_name="m10",report_field_name="M10_Subreport",grid_name="ugVitals",report_name="VitalsTable"),
DataElement(clinical_domain=cv_laboratory,pk=168,name="Collected",page_width=12,default_width=12,report_width=0,default_report_width=0,order=1,clinical_view_name="Calc_EffectiveTime",report_field_name="",grid_name="ugMainLaboratory",report_name=""),
DataElement(clinical_domain=cv_laboratory,pk=169,name="Resulted",page_width=12,default_width=12,report_width=0,default_report_width=0,order=2,clinical_view_name="LastResultEffectiveTime",report_field_name="",grid_name="ugMainLaboratory",report_name=""),
DataElement(clinical_domain=cv_laboratory,pk=170,name="Comments",page_width=5,default_width=5,report_width=0,default_report_width=0,order=3,clinical_view_name="Comment",report_field_name="",grid_name="ugMainLaboratory",report_name=""),
DataElement(clinical_domain=cv_laboratory,pk=171,name="Report",page_width=5,default_width=5,report_width=0,default_report_width=0,order=4,clinical_view_name="ReportLink",report_field_name="",grid_name="ugMainLaboratory",report_name=""),
DataElement(clinical_domain=cv_laboratory,pk=172,name="Status",page_width=8,default_width=8,report_width=0,default_report_width=0,order=5,clinical_view_name="StatusCodeDesignation",report_field_name="",grid_name="ugMainLaboratory",report_name=""),
DataElement(clinical_domain=cv_laboratory,pk=173,name="LabType",page_width=11,default_width=11,report_width=0,default_report_width=0,order=6,clinical_view_name="ClusterCodeDesignation",report_field_name="",grid_name="ugMainLaboratory",report_name=""),
DataElement(clinical_domain=cv_laboratory,pk=174,name="Test",page_width=13,default_width=13,report_width=0,default_report_width=0,order=7,clinical_view_name="Calc_Test",report_field_name="",grid_name="ugMainLaboratory",report_name=""),
DataElement(clinical_domain=cv_laboratory,pk=175,name="Specimen",page_width=9,default_width=9,report_width=0,default_report_width=0,order=8,clinical_view_name="Calc_SpecimenMaterialTypeCodeDesignation",report_field_name="",grid_name="ugMainLaboratory",report_name=""),
DataElement(clinical_domain=cv_laboratory,pk=176,name="OrderedBy",page_width=9,default_width=9,report_width=0,default_report_width=0,order=9,clinical_view_name="Calc_ReffererPersonName",report_field_name="",grid_name="ugMainLaboratory",report_name=""),
DataElement(clinical_domain=cv_laboratory,pk=177,name="Facility",page_width=8,default_width=8,report_width=0,default_report_width=0,order=10,clinical_view_name="Calc_OrganizationName",report_field_name="",grid_name="ugMainLaboratory",report_name=""),
DataElement(clinical_domain=cv_laboratory,pk=178,name="Source",page_width=8,default_width=8,report_width=0,default_report_width=0,order=11,clinical_view_name="DataSourceSystemName",report_field_name="",grid_name="ugMainLaboratory",report_name=""),
DataElement(clinical_domain=cv_lab_results,pk=179,name="Checkbox",page_width=3.5,default_width=3.5,report_width=0,default_report_width=0,order=1,clinical_view_name="Association",report_field_name="",grid_name="ugLaboratoryResults",report_name=""),
DataElement(clinical_domain=cv_lab_results,pk=180,name="Graph",page_width=3.5,default_width=3.5,report_width=0,default_report_width=0,order=2,clinical_view_name="GraphBtn",report_field_name="",grid_name="ugLaboratoryResults",report_name=""),
DataElement(clinical_domain=cv_lab_results,pk=181,name="Test",page_width=20,default_width=20,report_width=20,default_report_width=20,order=3,clinical_view_name="Calc_CodeDesignation",report_field_name="TestField",grid_name="ugLaboratoryResults",report_name="LabResultsTable"),
DataElement(clinical_domain=cv_lab_results,pk=182,name="Result",page_width=16,default_width=16,report_width=17,default_report_width=17,order=4,clinical_view_name="ResultCell",report_field_name="ResultField",grid_name="ugLaboratoryResults",report_name="LabResultsTable"),
DataElement(clinical_domain=cv_lab_results,pk=183,name="Range",page_width=9,default_width=9,report_width=10,default_report_width=10,order=5,clinical_view_name="Calc_ReferenceRange",report_field_name="RangeField",grid_name="ugLaboratoryResults",report_name="LabResultsTable"),
DataElement(clinical_domain=cv_lab_results,pk=184,name="HL",page_width=8,default_width=8,report_width=10,default_report_width=10,order=6,clinical_view_name="Calc_ResultInterpretationDesignations",report_field_name="InterpretationField",grid_name="ugLaboratoryResults",report_name="LabResultsTable"),
DataElement(clinical_domain=cv_lab_results,pk=185,name="Status",page_width=7,default_width=7,report_width=10,default_report_width=10,order=7,clinical_view_name="StatusCodeDesignation",report_field_name="StatusField",grid_name="ugLaboratoryResults",report_name="LabResultsTable"),
DataElement(clinical_domain=cv_lab_results,pk=186,name="Facility",page_width=14,default_width=14,report_width=16,default_report_width=16,order=8,clinical_view_name="Calc_OrganizationName",report_field_name="FacilityField",grid_name="ugLaboratoryResults",report_name="LabResultsTable"),
DataElement(clinical_domain=cv_lab_results,pk=187,name="Remarks",page_width=19,default_width=19,report_width=17,default_report_width=17,order=9,clinical_view_name="Remarks",report_field_name="RemarksField",grid_name="ugLaboratoryResults",report_name="LabResultsTable"),
])

    GridDataElement = apps.get_model("dbmconfigapp", "GridDataElement")

    modelsfactory.createDataElement(GridDataElement(), clinical_domain=cv_pathologies,pk=51,name="Collected",page_width=13,default_width=13,report_width=None,default_report_width=None,order=1,clinical_view_name="Calc_EffectiveTime",report_field_name="",grid_name="ugPathology",report_name=""),
    modelsfactory.createDataElement(GridDataElement(), clinical_domain=cv_pathologies,pk=52,name="Last Report Date",page_width=13,default_width=13,report_width=None,default_report_width=None,order=2,clinical_view_name="ReportEffectiveTime",report_field_name="",grid_name="ugPathology",report_name=""),
    modelsfactory.createDataElement(GridDataElement(), clinical_domain=cv_pathologies,pk=53,name="Report",page_width=3,default_width=3,report_width=None,default_report_width=None,order=3,clinical_view_name="Report",report_field_name="",grid_name="ugPathology",report_name=""),
    modelsfactory.createDataElement(GridDataElement(), clinical_domain=cv_pathologies,pk=54,name="Test",page_width=13,default_width=13,report_width=None,default_report_width=None,order=4,clinical_view_name="Calc_Test",report_field_name="",grid_name="ugPathology",report_name=""),
    modelsfactory.createDataElement(GridDataElement(), clinical_domain=cv_pathologies,pk=55,name="Site",page_width=12,default_width=12,report_width=None,default_report_width=None,order=5,clinical_view_name="ProcedureActSiteCodeDesignation",report_field_name="",grid_name="ugPathology",report_name=""),
    modelsfactory.createDataElement(GridDataElement(), clinical_domain=cv_pathologies,pk=56,name="Specimen Type",page_width=13,default_width=13,report_width=None,default_report_width=None,order=6,clinical_view_name="Calc_SpecimenMaterialTypeCodeDesignation",report_field_name="",grid_name="ugPathology",report_name=""),
    modelsfactory.createDataElement(GridDataElement(), clinical_domain=cv_pathologies,pk=57,name="Report Status",page_width=12,default_width=12,report_width=None,default_report_width=None,order=7,clinical_view_name="ReportCompletionCodeDesignation",report_field_name="",grid_name="ugPathology",report_name=""),
    modelsfactory.createDataElement(GridDataElement(), clinical_domain=cv_pathologies,pk=58,name="Ordered By",page_width=11,default_width=11,report_width=None,default_report_width=None,order=8,clinical_view_name="Calc_RequestMedicalStaffName",report_field_name="",grid_name="ugPathology",report_name=""),
    modelsfactory.createDataElement(GridDataElement(), clinical_domain=cv_pathologies,pk=59,name="Facility",page_width=10,default_width=10,report_width=None,default_report_width=None,order=9,clinical_view_name="Calc_OrganizationName",report_field_name="",grid_name="ugPathology",report_name=""),

    FindingDataElement = apps.get_model("dbmconfigapp", "FindingDataElement")

    modelsfactory.createDataElement(FindingDataElement(), clinical_domain=cv_pathologies,pk=60,name="Observation",page_width=33,default_width=33,report_width=None,default_report_width=None,order=1,clinical_view_name="Code",report_field_name="",grid_name="ugPathology_RelatedFinding",report_name=""),
    modelsfactory.createDataElement(FindingDataElement(), clinical_domain=cv_pathologies,pk=61,name="Value",page_width=33,default_width=33,report_width=None,default_report_width=None,order=2,clinical_view_name="Calc_CodeDesignation",report_field_name="",grid_name="ugPathology_RelatedFinding",report_name=""),
    modelsfactory.createDataElement(FindingDataElement(), clinical_domain=cv_pathologies,pk=62,name="Interpretation",page_width=34,default_width=34,report_width=None,default_report_width=None,order=3,clinical_view_name="InterpretationCodeDesignation",report_field_name="",grid_name="ugPathology_RelatedFinding",report_name=""),

    DocumentDataElement = apps.get_model("dbmconfigapp", "DocumentDataElement")

    modelsfactory.createDataElement(DocumentDataElement(), clinical_domain=cv_pathologies,pk=63,name="Date",page_width=13,default_width=13,report_width=None,default_report_width=None,order=1,clinical_view_name="Calc_EffectiveTime",report_field_name="",grid_name="ugPathology_RelatedDocument",report_name=""),
    modelsfactory.createDataElement(DocumentDataElement(), clinical_domain=cv_pathologies,pk=64,name="Type",page_width=16,default_width=16,report_width=None,default_report_width=None,order=3,clinical_view_name="DocumentTypeCodeDesignation",report_field_name="",grid_name="ugPathology_RelatedDocument",report_name=""),
    modelsfactory.createDataElement(DocumentDataElement(), clinical_domain=cv_pathologies,pk=65,name="Description",page_width=23,default_width=23,report_width=None,default_report_width=None,order=4,clinical_view_name="Calc_Text",report_field_name="",grid_name="ugPathology_RelatedDocument",report_name=""),
    modelsfactory.createDataElement(DocumentDataElement(), clinical_domain=cv_pathologies,pk=66,name="Status",page_width=15,default_width=15,report_width=None,default_report_width=None,order=5,clinical_view_name="DocStatus",report_field_name="",grid_name="ugPathology_RelatedDocument",report_name=""),
    modelsfactory.createDataElement(DocumentDataElement(), clinical_domain=cv_pathologies,pk=67,name="Author",page_width=15,default_width=15,report_width=None,default_report_width=None,order=6,clinical_view_name="DocAuthor",report_field_name="",grid_name="ugPathology_RelatedDocument",report_name=""),
    modelsfactory.createDataElement(DocumentDataElement(), clinical_domain=cv_pathologies,pk=68,name="Facility",page_width=15,default_width=15,report_width=None,default_report_width=None,order=7,clinical_view_name="DocFacility",report_field_name="",grid_name="ugPathology_RelatedDocument",report_name=""),
    modelsfactory.createDataElement(DocumentDataElement(), clinical_domain=cv_pathologies,pk=69,name="Report",page_width=3,default_width=3,report_width=None,default_report_width=None,order=2,clinical_view_name="Report",report_field_name="",grid_name="ugPathology_RelatedDocument",report_name=""),

    LocationHistoryDataElement = apps.get_model("dbmconfigapp", "LocationHistoryDataElement")

    modelsfactory.createDataElement(LocationHistoryDataElement(), clinical_domain=cv_encounters_details,pk=94,name="Date",page_width=33,default_width=25,report_width=None,default_report_width=None,order=1,clinical_view_name="TimeStart",report_field_name="",grid_name="ugEncounterDetails_LocationHistory",report_name=""),
    modelsfactory.createDataElement(LocationHistoryDataElement(), clinical_domain=cv_encounters_details,pk=95,name="Type",page_width=33,default_width=25,report_width=None,default_report_width=None,order=2,clinical_view_name="OrganizationUnitTypeCodeDesignation",report_field_name="",grid_name="ugEncounterDetails_LocationHistory",report_name=""),
    modelsfactory.createDataElement(LocationHistoryDataElement(), clinical_domain=cv_encounters_details,pk=96,name="Facility",enable=0,page_width=25,default_width=25,report_width=None,default_report_width=None,order=3,clinical_view_name="OrganizationName",report_field_name="",grid_name="ugEncounterDetails_LocationHistory",report_name=""),
    modelsfactory.createDataElement(LocationHistoryDataElement(), clinical_domain=cv_encounters_details,pk=97,name="Location",page_width=34,default_width=25,report_width=None,default_report_width=None,order=4,clinical_view_name="OrganizationUnitName",report_field_name="",grid_name="ugEncounterDetails_LocationHistory",report_name=""),

    ProviderRelationshipDataElement = apps.get_model("dbmconfigapp", "ProviderRelationshipDataElement")

    modelsfactory.createDataElement(ProviderRelationshipDataElement(), clinical_domain=cv_encounters_details,pk=98,name="Date",page_width=33,default_width=33,report_width=None,default_report_width=None,order=1,clinical_view_name="TimeStart",report_field_name="",grid_name="ugEncounterDetails_ProviderRelationship",report_name=""),
    modelsfactory.createDataElement(ProviderRelationshipDataElement(), clinical_domain=cv_encounters_details,pk=99,name="Type",page_width=33,default_width=33,report_width=None,default_report_width=None,order=2,clinical_view_name="TypeCodeDesignation",report_field_name="",grid_name="ugEncounterDetails_ProviderRelationship",report_name=""),
    modelsfactory.createDataElement(ProviderRelationshipDataElement(), clinical_domain=cv_encounters_details,pk=100,name="Provider",page_width=34,default_width=34,report_width=None,default_report_width=None,order=3,clinical_view_name="ParticipantPersonName",report_field_name="",grid_name="ugEncounterDetails_ProviderRelationship",report_name=""),

    DiagnosesDataElement = apps.get_model("dbmconfigapp", "DiagnosesDataElement")

    modelsfactory.createDataElement(DiagnosesDataElement(), clinical_domain=cv_encounters_details,pk=101,name="Date",page_width=14,default_width=14,report_width=None,default_report_width=None,order=1,clinical_view_name="Calc_EffectiveTime",report_field_name="",grid_name="ugEncounterDetails_Diagnoses",report_name=""),
    modelsfactory.createDataElement(DiagnosesDataElement(), clinical_domain=cv_encounters_details,pk=102,name="Type",page_width=13,default_width=13,report_width=None,default_report_width=None,order=2,clinical_view_name="Calc_CodeDesignation",report_field_name="",grid_name="ugEncounterDetails_Diagnoses",report_name=""),
    modelsfactory.createDataElement(DiagnosesDataElement(), clinical_domain=cv_encounters_details,pk=103,name="Diagnosis",page_width=15,default_width=15,report_width=None,default_report_width=None,order=3,clinical_view_name="Calc_ValueCodeDesignation",report_field_name="",grid_name="ugEncounterDetails_Diagnoses",report_name=""),
    modelsfactory.createDataElement(DiagnosesDataElement(), clinical_domain=cv_encounters_details,pk=104,name="Code",page_width=13,default_width=13,report_width=None,default_report_width=None,order=4,clinical_view_name="Calc_ValueCode",report_field_name="",grid_name="ugEncounterDetails_Diagnoses",report_name=""),
    modelsfactory.createDataElement(DiagnosesDataElement(), clinical_domain=cv_encounters_details,pk=105,name="Priority",page_width=10,default_width=10,report_width=None,default_report_width=None,order=5,clinical_view_name="Calc_Priority",report_field_name="",grid_name="ugEncounterDetails_Diagnoses",report_name=""),
    modelsfactory.createDataElement(DiagnosesDataElement(), clinical_domain=cv_encounters_details,pk=106,name="Facility",page_width=12,default_width=12,report_width=None,default_report_width=None,order=6,clinical_view_name="Calc_OrganizationName",report_field_name="",grid_name="ugEncounterDetails_Diagnoses",report_name=""),
    modelsfactory.createDataElement(DiagnosesDataElement(), clinical_domain=cv_encounters_details,pk=107,name="Unit",page_width=11,default_width=11,report_width=None,default_report_width=None,order=7,clinical_view_name="Calc_OrganizationUnitDesignation",report_field_name="",grid_name="ugEncounterDetails_Diagnoses",report_name=""),
    modelsfactory.createDataElement(DiagnosesDataElement(), clinical_domain=cv_encounters_details,pk=108,name="Source",page_width=12,default_width=12,report_width=None,default_report_width=None,order=8,clinical_view_name="DataSourceSystemName",report_field_name="",grid_name="ugEncounterDetails_Diagnoses",report_name=""),

    AllergiesDataElement = apps.get_model("dbmconfigapp", "AllergiesDataElement")

    modelsfactory.createDataElement(AllergiesDataElement(), clinical_domain=cv_summary,pk=109,name="Date",page_width=27,default_width=27,report_width=27,default_report_width=27,order=1,clinical_view_name="Calc_EffectiveTime_Start",report_field_name="txtDate",grid_name="ugSummaryAllergies",report_name="table1"),
    modelsfactory.createDataElement(AllergiesDataElement(), clinical_domain=cv_summary,pk=110,name="AllergyTo",page_width=19,default_width=19,report_width=19,default_report_width=19,order=2,clinical_view_name="Calc_IntoleranceValueCodeDesignation",report_field_name="txtAllergyTo",grid_name="ugSummaryAllergies",report_name="table1"),
    modelsfactory.createDataElement(AllergiesDataElement(), clinical_domain=cv_summary,pk=111,name="Reaction",page_width=18,default_width=18,report_width=18,default_report_width=18,order=3,clinical_view_name="Calc_RelatedReactions",report_field_name="txtReaction",grid_name="ugSummaryAllergies",report_name="table1"),
    modelsfactory.createDataElement(AllergiesDataElement(), clinical_domain=cv_summary,pk=112,name="Facility",page_width=18,default_width=18,report_width=18,default_report_width=18,order=4,clinical_view_name="Calc_OrganizationName",report_field_name="txtFacilityAllergies",grid_name="ugSummaryAllergies",report_name="table1"),
    modelsfactory.createDataElement(AllergiesDataElement(), clinical_domain=cv_summary,pk=113,name="Severity",page_width=18,default_width=18,report_width=18,default_report_width=18,order=5,clinical_view_name="SeverityValueCodeDesignation",report_field_name="txtSeverity",grid_name="ugSummaryAllergies",report_name="table1"),

    MedicationsDataElement = apps.get_model("dbmconfigapp", "MedicationsDataElement")

    modelsfactory.createDataElement(MedicationsDataElement(), clinical_domain=cv_summary,pk=114,name="Date",page_width=27,default_width=27,report_width=27,default_report_width=27,order=1,clinical_view_name="Calc_EffectiveTime_Start",report_field_name="Calc_EffectiveTime_Start",grid_name="ugSummaryMedications",report_name="tbkMedications"),
    modelsfactory.createDataElement(MedicationsDataElement(), clinical_domain=cv_summary,pk=115,name="Medication",page_width=30,default_width=30,report_width=30,default_report_width=30,order=2,clinical_view_name="Calc_MedicineName",report_field_name="txtMedication",grid_name="ugSummaryMedications",report_name="tbkMedications"),
    modelsfactory.createDataElement(MedicationsDataElement(), clinical_domain=cv_summary,pk=116,name="SIG",page_width=43,default_width=43,report_width=43,default_report_width=43,order=3,clinical_view_name="SIG",report_field_name="txtSIG",grid_name="ugSummaryMedications",report_name="tbkMedications"),

    ProblemsDataElement = apps.get_model("dbmconfigapp", "ProblemsDataElement")

    modelsfactory.createDataElement(ProblemsDataElement(), clinical_domain=cv_summary,pk=117,name="Date",page_width=27,default_width=27,report_width=27,default_report_width=27,order=1,clinical_view_name="Calc_EffectiveTime",report_field_name="txtDateProblems",grid_name="ugSummaryProblems",report_name="table3"),
    modelsfactory.createDataElement(ProblemsDataElement(), clinical_domain=cv_summary,pk=118,name="Category",page_width=36,default_width=36,report_width=36,default_report_width=36,order=2,clinical_view_name="Calc_TypeCodeDesignation",report_field_name="txtProblemsCategory",grid_name="ugSummaryProblems",report_name="table3"),
    modelsfactory.createDataElement(ProblemsDataElement(), clinical_domain=cv_summary,pk=119,name="Problem",page_width=37,default_width=37,report_width=37,default_report_width=37,order=3,clinical_view_name="Calc_CodeDesignation",report_field_name="txtProblem",grid_name="ugSummaryProblems",report_name="table3"),

    DiagnosisDataElement = apps.get_model("dbmconfigapp", "DiagnosisDataElement")

    modelsfactory.createDataElement(DiagnosisDataElement(), clinical_domain=cv_summary,pk=188,name="Date",page_width=27,default_width=27,report_width=27,default_report_width=27,order=1,clinical_view_name="Calc_EffectiveTime",report_field_name="txtDiagnosis_Date",grid_name="ugSummaryDiagnoses",report_name="tblDiagnosis"),
    modelsfactory.createDataElement(DiagnosisDataElement(), clinical_domain=cv_summary,pk=189,name="Category",page_width=36,default_width=36,report_width=36,default_report_width=36,order=2,clinical_view_name="Calc_TypeCodeDesignation",report_field_name="txtDiagnosis_Type",grid_name="ugSummaryDiagnoses",report_name="tblDiagnosis"),
    modelsfactory.createDataElement(DiagnosisDataElement(), clinical_domain=cv_summary,pk=190,name="Diagnosis",page_width=37,default_width=37,report_width=37,default_report_width=37,order=3,clinical_view_name="Calc_CodeDesignation",report_field_name="txtDiagnosis_Diagnosis",grid_name="ugSummaryDiagnoses",report_name="tblDiagnosis"),

    LabsDataElement = apps.get_model("dbmconfigapp", "LabsDataElement")

    modelsfactory.createDataElement(LabsDataElement(), clinical_domain=cv_summary,pk=120,name="Collected",page_width=27,default_width=27,report_width=27,default_report_width=27,order=1,clinical_view_name="Calc_EffectiveTime",report_field_name="txtCollected",grid_name="ugSummaryLaboratoryEvents",report_name="tblLabEvents"),
    modelsfactory.createDataElement(LabsDataElement(), clinical_domain=cv_summary,pk=121,name="Test",page_width=24,default_width=24,report_width=24,default_report_width=24,order=2,clinical_view_name="Calc_Test",report_field_name="txtTest",grid_name="ugSummaryLaboratoryEvents",report_name="tblLabEvents"),
    modelsfactory.createDataElement(LabsDataElement(), clinical_domain=cv_summary,pk=122,name="Specimen",page_width=24,default_width=24,report_width=24,default_report_width=24,order=3,clinical_view_name="Calc_SpecimenMaterialTypeCodeDesignation",report_field_name="txtSpecimen",grid_name="ugSummaryLaboratoryEvents",report_name="tblLabEvents"),
    modelsfactory.createDataElement(LabsDataElement(), clinical_domain=cv_summary,pk=123,name="Facility",page_width=25,default_width=25,report_width=25,default_report_width=25,order=4,clinical_view_name="Calc_OrganizationName",report_field_name="txtFacilityLabs",grid_name="ugSummaryLaboratoryEvents",report_name="tblLabEvents"),

    DemographicsDetailsDEGrid = apps.get_model("dbmconfigapp", "DemographicsDetailsDEGrid")

    modelsfactory.createDataElement(DemographicsDetailsDEGrid(), clinical_domain=cv_demographics,pk=156,name="Date of Birth",page_width=0,default_width=0,report_width=0,default_report_width=0,order=1,clinical_view_name="BirthTime",report_field_name="",grid_name="dvDemography",report_name=""),
    modelsfactory.createDataElement(DemographicsDetailsDEGrid(), clinical_domain=cv_demographics,pk=157,name="Gender",page_width=0,default_width=0,report_width=0,default_report_width=0,order=1,clinical_view_name="AdministrativeGender",report_field_name="",grid_name="dvDemography",report_name=""),
    modelsfactory.createDataElement(DemographicsDetailsDEGrid(), clinical_domain=cv_demographics,pk=158,name="Marital Status",page_width=0,default_width=0,report_width=0,default_report_width=0,order=1,clinical_view_name="MaritalStatus",report_field_name="",grid_name="dvDemography",report_name=""),
    modelsfactory.createDataElement(DemographicsDetailsDEGrid(), clinical_domain=cv_demographics,pk=159,name="Time of Death",page_width=0,default_width=0,report_width=0,default_report_width=0,order=1,clinical_view_name="DeceasedTime",report_field_name="",grid_name="dvDemography",report_name=""),
    modelsfactory.createDataElement(DemographicsDetailsDEGrid(), clinical_domain=cv_demographics,pk=160,name="Indication of Death",page_width=0,default_width=0,report_width=0,default_report_width=0,order=1,clinical_view_name="DeceasedInd",report_field_name="",grid_name="dvDemography",report_name=""),
    modelsfactory.createDataElement(DemographicsDetailsDEGrid(), clinical_domain=cv_demographics,pk=161,name="VIP",page_width=0,default_width=0,report_width=0,default_report_width=0,order=1,clinical_view_name="VeryImportantPerson",report_field_name="",grid_name="dvDemography",report_name=""),
    modelsfactory.createDataElement(DemographicsDetailsDEGrid(), clinical_domain=cv_demographics,pk=162,name="Preferred Language",page_width=0,default_width=0,report_width=0,default_report_width=0,order=1,clinical_view_name="PreferredLanguage",report_field_name="",grid_name="dvDemography",report_name=""),
    modelsfactory.createDataElement(DemographicsDetailsDEGrid(), clinical_domain=cv_demographics,pk=163,name="Birth Country",page_width=0,default_width=0,report_width=0,default_report_width=0,order=1,clinical_view_name="BirthCountry",report_field_name="",grid_name="dvDemography",report_name=""),
    modelsfactory.createDataElement(DemographicsDetailsDEGrid(), clinical_domain=cv_demographics,pk=164,name="Ethnic Group",page_width=0,default_width=0,report_width=0,default_report_width=0,order=1,clinical_view_name="EthnicGroup",report_field_name="",grid_name="dvDemography",report_name="",pl_parent=pl_patient_display_page,pv_parent_patient_display=pv_patient_display_page),
    modelsfactory.createDataElement(DemographicsDetailsDEGrid(), clinical_domain=cv_demographics,pk=165,name="Religious Affiliation",page_width=0,default_width=0,report_width=0,default_report_width=0,order=1,clinical_view_name="ReligiousAffiliation",report_field_name="",grid_name="dvDemography",report_name=""),
    modelsfactory.createDataElement(DemographicsDetailsDEGrid(), clinical_domain=cv_demographics,pk=166,name="Race",page_width=0,default_width=0,report_width=0,default_report_width=0,order=1,clinical_view_name="Race",report_field_name="",grid_name="dvDemography",report_name=""),
    modelsfactory.createDataElement(DemographicsDetailsDEGrid(), clinical_domain=cv_demographics,pk=167,name="Nationality",page_width=0,default_width=0,report_width=0,default_report_width=0,order=1,clinical_view_name="Nationality",report_field_name="",grid_name="dvDemography",report_name="",pl_parent=pl_patient_display_page,pv_parent_patient_display=pv_patient_display_page),

    InsuranceDataElement = apps.get_model("dbmconfigapp", "InsuranceDataElement")

    modelsfactory.createDataElement(InsuranceDataElement(), clinical_domain=cv_demographics,pk=133,name="Start Date",page_width=20,default_width=20,report_width=20,default_report_width=20,order=1,clinical_view_name="TimeStart",report_field_name="txtStartDate",grid_name="ugInsurance",report_name="tblInsurances"),
    modelsfactory.createDataElement(InsuranceDataElement(), clinical_domain=cv_demographics,pk=134,name="Policy Number",page_width=25,default_width=25,report_width=25,default_report_width=25,order=2,clinical_view_name="InsuranceIdNumber",report_field_name="txtPolicyNumber",grid_name="ugInsurance",report_name="tblInsurances"),
    modelsfactory.createDataElement(InsuranceDataElement(), clinical_domain=cv_demographics,pk=135,name="InsuranceName",page_width=35,default_width=35,report_width=35,default_report_width=35,order=3,clinical_view_name="InsuranceName",report_field_name="txtInsuranceName",grid_name="ugInsurance",report_name="tblInsurances",pl_parent=pl_patient_display_page,pv_parent_patient_display=pv_patient_display_page),
    modelsfactory.createDataElement(InsuranceDataElement(), clinical_domain=cv_demographics,pk=136,name="Source",page_width=20,default_width=20,report_width=20,default_report_width=20,order=4,clinical_view_name="Source",report_field_name="txtInsuranceSource",grid_name="ugInsurance",report_name="tblInsurances"),
    modelsfactory.createDataElement(InsuranceDataElement(), clinical_domain=cv_demographics,pk=137,name="End Date",enable=0,page_width=10,default_width=10,report_width=1,default_report_width=1,order=5,clinical_view_name="TimeEnd",report_field_name="txtEndDate",grid_name="ugInsurance",report_name="tblInsurances"),
    modelsfactory.createDataElement(InsuranceDataElement(), clinical_domain=cv_demographics,pk=138,name="Status",enable=0,page_width=10,default_width=10,report_width=1,default_report_width=1,order=6,clinical_view_name="StatusCode",report_field_name="txtStatus",grid_name="ugInsurance",report_name="tblInsurances"),
    modelsfactory.createDataElement(InsuranceDataElement(), clinical_domain=cv_demographics,pk=139,name="InsurerOrganizationName",enable=0,page_width=10,default_width=10,report_width=1,default_report_width=1,order=7,clinical_view_name="InsurerOrganizationName",report_field_name="txtInsurerOrganization",grid_name="ugInsurance",report_name="tblInsurances"),
    modelsfactory.createDataElement(InsuranceDataElement(), clinical_domain=cv_demographics,pk=140,name="SequenceNumber",enable=0,page_width=10,default_width=10,report_width=1,default_report_width=1,order=8,clinical_view_name="SequenceNumber",report_field_name="txtSequenceNumber",grid_name="ugInsurance",report_name="tblInsurances",pl_parent=pl_patient_display_page,pv_parent_patient_display=pv_patient_display_page),

    PatientSearchDataElement = apps.get_model("dbmconfigapp", "PatientSearchDataElement")

    modelsfactory.createDataElement(PatientSearchDataElement(), clinical_domain=cv_patient_search,pk=1,name="Leading",page_width=6,default_width=6,report_width=0,default_report_width=0,order=1,clinical_view_name="Leading",report_field_name="",grid_name="ugSearchResults",report_name=""),
    modelsfactory.createDataElement(PatientSearchDataElement(), clinical_domain=cv_patient_search,pk=2,name="Checkbox",page_width=6,default_width=6,report_width=0,default_report_width=0,order=2,clinical_view_name="Association",report_field_name="",grid_name="ugSearchResults",report_name=""),
    modelsfactory.createDataElement(PatientSearchDataElement(), clinical_domain=cv_patient_search,pk=3,name="Name",page_width=16,default_width=16,report_width=0,default_report_width=0,order=3,clinical_view_name="Name",report_field_name="",grid_name="ugSearchResults",report_name=""),
    modelsfactory.createDataElement(PatientSearchDataElement(), clinical_domain=cv_patient_search,pk=4,name="SSN",page_width=9,default_width=9,report_width=0,default_report_width=0,order=4,clinical_view_name="SSN",report_field_name="",grid_name="ugSearchResults",report_name=""),
    modelsfactory.createDataElement(PatientSearchDataElement(), clinical_domain=cv_patient_search,pk=5,name="Date of Birth",page_width=9,default_width=9,report_width=0,default_report_width=0,order=5,clinical_view_name="BirthDate",report_field_name="",grid_name="ugSearchResults",report_name=""),
    modelsfactory.createDataElement(PatientSearchDataElement(), clinical_domain=cv_patient_search,pk=6,name="Gender",page_width=5,default_width=5,report_width=0,default_report_width=0,order=6,clinical_view_name="Gender",report_field_name="",grid_name="ugSearchResults",report_name=""),
    modelsfactory.createDataElement(PatientSearchDataElement(), clinical_domain=cv_patient_search,pk=7,name="Address",page_width=26,default_width=26,report_width=0,default_report_width=0,order=7,clinical_view_name="Address",report_field_name="",grid_name="ugSearchResults",report_name=""),
    modelsfactory.createDataElement(PatientSearchDataElement(), clinical_domain=cv_patient_search,pk=8,name="Death Indicator",page_width=10,default_width=10,report_width=0,default_report_width=0,order=8,clinical_view_name="DeathIndicator",report_field_name="",grid_name="ugSearchResults",report_name=""),
    modelsfactory.createDataElement(PatientSearchDataElement(), clinical_domain=cv_patient_search,pk=9,name="Source",page_width=13,default_width=13,report_width=0,default_report_width=0,order=9,clinical_view_name="Calc_Source",report_field_name="",grid_name="ugSearchResults",report_name=""),
    modelsfactory.createDataElement(PatientSearchDataElement(), clinical_domain=cv_patient_search,pk=10,name="PHIN",enable=0,page_width=6,default_width=6,report_width=0,default_report_width=0,order=10,clinical_view_name="PHIN",report_field_name="",grid_name="ugSearchResults",report_name=""),
    modelsfactory.createDataElement(PatientSearchDataElement(), clinical_domain=cv_patient_search,pk=11,name="Phin Eff. Date",enable=0,page_width=6,default_width=6,report_width=0,default_report_width=0,order=11,clinical_view_name="PhinEffDate",report_field_name="",grid_name="ugSearchResults",report_name=""),
    modelsfactory.createDataElement(PatientSearchDataElement(), clinical_domain=cv_patient_search,pk=12,name="Phin Exp. Date",enable=0,page_width=6,default_width=6,report_width=0,default_report_width=0,order=12,clinical_view_name="PhinExpDate",report_field_name="",grid_name="ugSearchResults",report_name=""),

    PatientSearchHistoryDataElement = apps.get_model("dbmconfigapp", "PatientSearchHistoryDataElement")

    modelsfactory.createDataElement(PatientSearchHistoryDataElement(), clinical_domain=cv_patient_search,pk=13,name="Checkbox",page_width=6,default_width=6,report_width=0,default_report_width=0,order=1,clinical_view_name="Leading",report_field_name="",grid_name="ugHistory",report_name=""),
    modelsfactory.createDataElement(PatientSearchHistoryDataElement(), clinical_domain=cv_patient_search,pk=14,name="Last Viewed",page_width=16,default_width=16,report_width=0,default_report_width=0,order=2,clinical_view_name="LastViewed",report_field_name="",grid_name="ugHistory",report_name=""),
    modelsfactory.createDataElement(PatientSearchHistoryDataElement(), clinical_domain=cv_patient_search,pk=15,name="Patient Details",page_width=51,default_width=51,report_width=0,default_report_width=0,order=3,clinical_view_name="PatientDetails",report_field_name="",grid_name="ugHistory",report_name=""),
    modelsfactory.createDataElement(PatientSearchHistoryDataElement(), clinical_domain=cv_patient_search,pk=16,name="Emergency Mode",page_width=27,default_width=27,report_width=0,default_report_width=0,order=4,clinical_view_name="IsEmergency",report_field_name="",grid_name="ugHistory",report_name=""),

def load_ClinicalDomainProperties_data(apps, schema_editor):

    db_alias = schema_editor.connection.alias

    ClinicalDomainProperties = apps.get_model("dbmconfigapp", "ClinicalDomainProperties")
    
    ClinicalDomainProperties.objects.using(db_alias).bulk_create([
ClinicalDomainProperties(clinical_domain=cv_allergies,help_1="Determines the time unit & range used to filter the patient's Allergies list. Default values: 0, None",
        help_2="Determines whether the Show Cancelled checkbox is displayed. If False, all items are displayed, including Cancelled items. In this case the DefaultShowCanceledValue configuration point is not relevant. Default values: True, True",
        help_3="Determines whether to enable grouping of the Allergies list.  If True, the Grouping option is displayed. If False, no Grouping option is displayed.  Default values: True, True",LabEvents_DefaultGrouping=1,ClinicalDocument_ShowExternalDocumentsLabel=None),
ClinicalDomainProperties(clinical_domain=cv_problems,show_cancelled_selected=0,LabEvents_DefaultGrouping=1,ClinicalDocument_ShowExternalDocumentsLabel=None),
ClinicalDomainProperties(clinical_domain=cv_diagnoses,LabEvents_DefaultGrouping=1,ClinicalDocument_ShowExternalDocumentsLabel=None),
ClinicalDomainProperties(clinical_domain=cv_immunizations,show_cancelled_selected=0,LabEvents_DefaultGrouping=1,ClinicalDocument_ShowExternalDocumentsLabel=None),
ClinicalDomainProperties(clinical_domain=cv_pathologies,LabEvents_DefaultGrouping=1,ClinicalDocument_ShowExternalDocumentsLabel=None),
ClinicalDomainProperties(clinical_domain=cv_medications,show_cancelled_selected=0,LabEvents_DefaultGrouping=1,ClinicalDocument_ShowExternalDocumentsLabel=None),
ClinicalDomainProperties(clinical_domain=cv_encounters,show_cancelled_selected=0,show_record_count=0,LabEvents_DefaultGrouping=1,ClinicalDocument_ShowExternalDocumentsLabel=None),
ClinicalDomainProperties(clinical_domain=cv_encounters_details,show_cancelled_display=0,show_cancelled_selected=0,grouped_by_display=0,grouped_by_selected=0,show_record_count=0,LabEvents_DefaultGrouping=1,ClinicalDocument_ShowExternalDocumentsLabel=None),
ClinicalDomainProperties(clinical_domain=cv_plv,help_1="The lefthand textbox determines the time unit used to filter the patient's Allergies list when using the Show option.<br/>For example, the list can display the patient's Allergies over a period of days, weeks, months, or years.<br/>The righthand dropdown menu defines the time range used to filter the patient's Allergies list.<br/>For example, if the Unit is 'month' and the Range is 10, the patient's allergies over the past 10 months are displayed.<br/><br/>Default: 1 Month",help_2="Determines whether the Show Cancelled checkbox is displayed. If False, all items are displayed, including Cancelled items. In this case the DefaultShowCanceledValue configuration point is not relevant. Default values: True, True ",help_3="Determines whether to enable grouping of the Allergies list.  If True, the Grouping option is displayed. If False, no Grouping option is displayed.  Default values: True, True",LabEvents_DefaultGrouping=1,ClinicalDocument_ShowExternalDocumentsLabel=None),
ClinicalDomainProperties(clinical_domain=cv_summary,show_cancelled_display=0,show_cancelled_selected=0,grouped_by_display=0,grouped_by_selected=0,LabEvents_DefaultGrouping=1,ClinicalDocument_ShowExternalDocumentsLabel=None),
ClinicalDomainProperties(clinical_domain=cv_procedures,LabEvents_DefaultGrouping=1,ClinicalDocument_ShowExternalDocumentsLabel=None),
ClinicalDomainProperties(clinical_domain=cv_lab_results_history,help_1="The lefthand textbox determines the time unit used to filter the patient's Labratory Results History list when using the Show option.<br/>For example, the list can display the patient's Allergies over a period of days, weeks, months, or years.<br/>The righthand dropdown menu defines the time range used to filter the patient's Allergies list.<br/>For example, if the Unit is 'month' and the Range is 10, the patient's allergies over the past 10 months are displayed.<br/><br/>Default: 1 Month",help_2="",help_3="",LabEvents_DefaultGrouping=0,ClinicalDocument_ShowExternalDocumentsLabel=None),
ClinicalDomainProperties(clinical_domain=cv_vitals,show_cancelled_selected=0,LabEvents_DefaultGrouping=1,ClinicalDocument_ShowExternalDocumentsLabel=None),
ClinicalDomainProperties(clinical_domain=cv_imaging,show_cancelled_display=0,show_cancelled_selected=0,grouped_by_display=0,grouped_by_selected=0,show_record_count=0,Imaging_DisplayImagingMetaData=1,Imaging_ShowEmptyFolders=1,LabEvents_DefaultGrouping=1,ClinicalDocument_ShowExternalDocumentsLabel=None),
ClinicalDomainProperties(clinical_domain=cv_documents,grouped_by_display=0,grouped_by_selected=0,show_record_count=0,LabEvents_DefaultGrouping=1,ClinicalDocument_ShowExternalDocumentsLabel="Show External Documents",ExteranlDocument_Default_Grouping="Date",pv_ClinicalDocument_ShowExternalDocumentsLabel=pv_clinical_domain_page),
ClinicalDomainProperties(clinical_domain=cv_laboratory,LabEvents_DefaultGrouping=1,ClinicalDocument_ShowExternalDocumentsLabel=None),
ClinicalDomainProperties(clinical_domain=cv_lab_results,LabEvents_DefaultGrouping=0,ClinicalDocument_ShowExternalDocumentsLabel=None),
ClinicalDomainProperties(clinical_domain=cv_demographics,LabEvents_DefaultGrouping=0,ClinicalDocument_ShowExternalDocumentsLabel=None,pl_parent=pl_patient_display_page,pv_parent_patient_display=pv_patient_display_page),
])

    add_to_model_descriptor2("dbmconfigapp_clinicaldomainproperties", services_codes=['ClinicalViewer','CVA'])
    add_to_model_descriptor2("dbmconfigapp_imagingpacs", services_codes=['ClinicalViewer', 'CVA'])
    add_to_model_descriptor2("dbmconfigapp_imagingpacsparameter", services_codes=['ClinicalViewer', 'CVA'])

    model = apps.get_model('dbmconfigapp', 'LabChartDisplayOptions')()
    model.save()
    add_to_model_descriptor2("dbmconfigapp_labchartdisplayoptions", services_codes=['ClinicalViewer'])

    CommonClinicalDomainProperties = apps.get_model("dbmconfigapp", "EHRAgentCVCommonClinicalDomainsProperties")
    
    CommonClinicalDomainProperties.objects.using(db_alias).bulk_create([
CommonClinicalDomainProperties(cv_parent=cv_allergies,name="AllergyIntolerance",display_name="Allergies",default_searching_time=0,default_searching_option=4,default_time_range="All"),
CommonClinicalDomainProperties(cv_parent=cv_diagnoses,name="Diagnosis",display_name="Diagnoses",default_searching_time=6,default_searching_option=1,default_time_range="6 Months"),
CommonClinicalDomainProperties(cv_parent=cv_documents,name="ClinicalDocument",display_name="Documents",default_searching_time=1,default_searching_option=0,default_time_range="1 Year"),
CommonClinicalDomainProperties(cv_parent=cv_encounters,name="Encounter",display_name="Encounters",default_searching_time=1,default_searching_option=0,default_time_range="1 Year"),
CommonClinicalDomainProperties(cv_parent=None,name="ExternalDocuments",display_name="External Documents",default_searching_time=1,default_searching_option=0,default_time_range="1 Year"),
CommonClinicalDomainProperties(cv_parent=cv_imaging,name="ClinicalImageStudy",display_name="Imaging",default_searching_time=1,default_searching_option=0,default_time_range="1 Year"),
CommonClinicalDomainProperties(cv_parent=cv_immunizations,name="Immunization",display_name="Immunizations",default_searching_time=5,default_searching_option=0,default_time_range="5 Years"),
CommonClinicalDomainProperties(cv_parent=cv_laboratory,name="LabEvent",display_name="Labs",default_searching_time=9,default_searching_option=1,default_time_range="9 Months"),
CommonClinicalDomainProperties(cv_parent=cv_vitals,name="MeasurementEvent",display_name="Measurements",default_searching_time=3,default_searching_option=0,default_time_range="3 Years"),
CommonClinicalDomainProperties(cv_parent=cv_medications,name="Medication",display_name="Medications",default_searching_time=1,default_searching_option=0,default_time_range="1 Year"),
CommonClinicalDomainProperties(cv_parent=None,name="PastMedicalHistory",display_name="Medical History",default_searching_time=0,default_searching_option=4,default_time_range="All"),
CommonClinicalDomainProperties(cv_parent=cv_pathologies,name="PathologyEvent",display_name="Pathology",default_searching_time=5,default_searching_option=0,default_time_range="5 Years"),
CommonClinicalDomainProperties(cv_parent=cv_procedures,name="Procedure",display_name="Procedures",default_searching_time=5,default_searching_option=0,default_time_range="5 Years"),
CommonClinicalDomainProperties(cv_parent=cv_problems,name="Problem",display_name="Problems",default_searching_time=5,default_searching_option=0,default_time_range="5 Years"),
CommonClinicalDomainProperties(cv_parent=cv_plv,name="PLV",display_name="PLV",default_searching_time=1,default_searching_option=1,default_time_range="1 Month"),
CommonClinicalDomainProperties(cv_parent=cv_lab_results_history,name="LabResultsHistory",display_name="LabResultsHistory",default_searching_time=2,default_searching_option=1,default_time_range="2 Month"),
])

    add_to_model_descriptor2("dbmconfigapp_ehragentcvcommonclinicaldomainsproperties", services_codes=['ClinicalViewer', 'CVA'])

def load_PVClinicalDomains_data(apps, schema_editor):
    
    model = apps.get_model('dbmconfigapp', 'EHRAgentClinicalDomainsProperties')()
    model.save()
    add_to_model_descriptor2("dbmconfigapp_ehragentclinicaldomainsproperties", services_codes=['CVA'])

    model = apps.get_model('dbmconfigapp', 'EHRAgentBlinks')()
    model.save()
    add_to_model_descriptor2("dbmconfigapp_ehragentblinks", services_codes=['CVA'])

    db_alias = schema_editor.connection.alias

    SemanticDelta = apps.get_model("dbmconfigapp", "EHRAgentSemanticDelta")

    SemanticDelta.objects.using(db_alias).bulk_create([
SemanticDelta(name="AllergyIntolerance",display_name="Allergies"),
SemanticDelta(name="Immunization",display_name="Immunizations"),
SemanticDelta(name="Medication",display_name="Medications"),
SemanticDelta(name="Condition",display_name="Problems, Diagnosis and Medical History"),
])

    add_to_model_descriptor2("dbmconfigapp_ehragentsemanticdelta", services_codes=['CVA'])

    model = apps.get_model('dbmconfigapp', 'EhrAgentGeneral')()
    model.save()
    add_to_model_descriptor2("dbmconfigapp_ehragentgeneral", services_codes=['CVA'])
    add_to_model_descriptor2("dbmconfigapp_ehragentgeneral_view", services_codes=['CVA'])

    model = apps.get_model('dbmconfigapp', 'ImagingPacsDisclaimer')()
    model.save()
    add_to_model_descriptor2("dbmconfigapp_imagingpacsdisclaimer", services_codes=['CVA'])

    CategoriesProperties = apps.get_model("dbmconfigapp", "PVCategoriesProperties")

    CategoriesProperties.objects.using(db_alias).bulk_create([
CategoriesProperties(category_name="Encounters",display_name="Encounters",category_order=1,time_frame=None),
CategoriesProperties(category_name="Problems",display_name="Problems",category_order=2,time_frame=None),
CategoriesProperties(category_name="Medical History",display_name="Medical History",category_order=3,time_frame=None),
CategoriesProperties(category_name="Diagnoses",display_name="Diagnoses",category_order=4,time_frame=None),
CategoriesProperties(category_name="Allergies",display_name="Allergies",category_order=5,time_frame=None),
CategoriesProperties(category_name="Medications",display_name="Medications",category_order=6,time_frame=None),
CategoriesProperties(category_name="Measurements",display_name="Measurements",category_order=7,time_frame=None),
CategoriesProperties(category_name="Labs",display_name="Labs",category_order=8,time_frame=None),
CategoriesProperties(category_name="Pathology",display_name="Pathology",category_order=9,time_frame=None),
CategoriesProperties(category_name="Immunizations",display_name="Immunizations",category_order=10,time_frame=None),
CategoriesProperties(category_name="Imaging",display_name="Imaging",category_order=11,time_frame=None),
CategoriesProperties(category_name="Procedures",display_name="Procedures",category_order=12,time_frame=None),
CategoriesProperties(category_name="Documents",display_name="Documents",category_order=13,time_frame=None),
])

    add_to_model_descriptor2("dbmconfigapp_pvcategoriesproperties", services_codes=['CVA', 'VPO'])


def load_AgentHubGeneralPage_data(apps, schema_editor):

    services = ['CVA']

    page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'AgentHubGeneralPage')(),
                                            "",
                                            "",
                                            "agenthub_general",
                                            [], [])
    # Culture, CurrentCulture
    readonly_langs = [ 'en-US','en-GB','en-CA','en-AU','he-IL']

    culture_model = apps.get_model("dbmconfigapp", "Culture")
    for language in readonly_langs:
        culture_model.objects.get_or_create(name=language,readonly=1)

    model = apps.get_model("dbmconfigapp", "CurrentCulture")()
    default_culture =culture_model.objects.filter(name=get_param('default_language'))
    if default_culture == None or default_culture.count() == 0:
        default_culture =culture_model.objects.filter(name='en-US')

    model.name = default_culture[0]
    model.save()

    add_to_model_descriptor2(model_name='dbmconfigapp_CurrentCulture', services_codes=services)
    add_to_model_descriptor2(model_name='dbmconfigapp_Culture', services_codes=services)

    #EhrAgentBaseUrl
    newEhrAgentBaseUrl = apps.get_model("dbmconfigapp", "EhrAgentBaseUrl")()
    
    newEhrAgentBaseUrl.base_url = dbmconfigapp.models.ehragent.fill_agent_hub_base_url()
    newEhrAgentBaseUrl.save()

    add_to_model_descriptor2(model_name='dbmconfigapp_ehragentbaseurl', services_codes=services)

def load_AgentppHostedAppPage_data(apps, schema_editor):

    base_url = "https://{server}.{domain}/cva/server".format(server=get_param("application_server_statefull"), domain=get_param("default_domain_name"))
    state_url = base_url + "/api/patient/notifications"
    components = get_components_by_name(apps, ['Agent Hub'])

    page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'AgentppHostedAppPage')(),
                                            "",
                                            "",
                                            "agent_plus_plus_hosted_aplications",
                                            [], components)

    AgentppHostedApp = apps.get_model("dbmconfigapp", "AgentppHostedApp")
    DbFiles = apps.get_model("dbmconfigapp","DbFiles")

    cdp = AgentppHostedApp()
    cdp.app_key = None
    cdp.app_name = 'Care Director Plan'
    cdp.window_maximal_width_size = 1400
    cdp.window_maximal_height_size = 1050
    cdp.LogoFile = 'AgentHostedApps/Logo/CareDirectorPlanLogo.png'
    cdp.save()
    
    cdp_logo = DbFiles()
    cdp_logo.filename = cdp.LogoFile
    cdp_logo.size = 661
    cdp_logo.data = 'iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAAGXcA1uAAAAAXNSR0IArs4c6QAAAk9JREFUSA1jZFLX+88ABUwwBoiGc75fOsPAiFtZdWYqXBtY2b/8GrgA08QWMBtFP1wWyIDbgiwIYuPUwQKSJd0Ofl5ekEYUADbq4+fPDJmRYQzCAgIMslKSDOm1jbgtx+kqFHOROGArQHxkFyPJM8BCCCZGsg3wEHx5/ACDkbYm2KD+qjKGFRO6GbRVVRhenzjE0FlayMDCAnUMKC5BeNnmbf9BQMrGCUwfPnMWLP7q7VswDVNHspNI1gD3AywUCNEYiQBZA3qQguRItoH2foA7iZGREdn5ONlgDV1lRQwettYMYZ7uDI8P7mbwdbJn+HrxFENKaBCDprISAyi3wgBYQ4i7K8P2Q0cYVm3fCRbfvO8gw8s3b8Hs5oIcBtuoeJh6SLrn5uJk+HDmGMPZq9cYpMXEGPh5eRh8M3IZVOXlGOasXgdXDGLQPpRItgHFfURw4NFAhFqylMCLAJBuXMUALpOxpWV0tUM/iGgeBygWcLCzM0xrqGH4cuEkw98bFxmOrVzMwMvNzXB9+0Zwwgdlq+1zpjPYmRqDgzouwBcsDsoUt3dvZUiPCEWPAgaUSL6ydR3Dog2bGXgMzFEU8nBxMVT2TmCYvnwVWPz+vh0Ms1auZnj97j0DqBCo7p/E4Glvw9Ccn8Mwc8VqFL0oPth64DBDWlgIg6WhPriIr0hLhhfvctJSDA7mpgyzWuoZxISFGDYB8zsIfP/5g2HKkuUM3qnZDGKW9iiGgzhYUxEoqECufvP+PYYGUgVQggim+cfPnwwgTA2AEkTUMBDdDABomsO8s8UP9gAAAABJRU5ErkJggg=='
    cdp_logo.save()

    pv = AgentppHostedApp()
    pv.app_key = 'pv'
    pv.app_name = 'Patient View'
    pv.enabled = True
    pv.launch_url = "(auto generated)"
    pv.get_application_state_url = state_url + "?pv"
    pv.window_default_width_size = 322
    pv.window_minimal_width_size = 322
    pv.window_default_height_size = 640
    pv.window_minimal_height_size = 640
    pv.LogoFile = 'AgentHostedApps/Logo/PatientViewLogo.png'
    pv.save()
    
    pv_logo = DbFiles()
    pv_logo.filename = pv.LogoFile
    pv_logo.size = 542
    pv_logo.data = 'iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAdhJREFUSA1j5FGw/c9AZfAl1hduIhOcRSPGqAUEA3Y0iAgGEQtMBSsrC0NJVgyY++/ff4abdx4wHD19ieH1m/cMBemRDO8/fGZYuHILTDmYDvJxYpCTFmeYMHM5ijgyB24BOxsrQ1VBEsOzF68Z3r3/xKAoL8XAzcXJkFfVzaCrqcIQ5O3IsHX3YYY37z6C9bMB1U9oKWbYue84snkYbIxInjZ/DYOlVyKDilkA2LLMxFCG+cs3M7CwsDAE+TjDDfB2sWYQ5OdlmLt0A1wMGwPDApiiX7//AIPlE8O/v38Zjpy8wHDn/mOGiAA3mDRDVLAHw7Wb9xhOnL0CF8PGwLAgJzmU4fTuRQyPzm9h0NZQZpi5aB1Y36JVWxlMDbUYlBVkGMREhBhc7c0Z5i3fhM1MFDF4HMBEr1y/C3TxRYaPnz4zHD5xgeHm3YdgqSVrtjPUFacwhAN98fnLV4afv34zLF+3E6YNJ41hwYFj5xgmzsJMFaDUtG3vMYaIQDeGb9++M6zdso/h0+evOA2GSWAEEUwCG71wxRYGRTkpcNDNXboRmxIMMQwfYKhAEth98CTDk2cvGd4BI//sxetIMriZjKMVDu7AgciQFMmEDMMmP2oBtlBBEQMAMLGXj+2UgPwAAAAASUVORK5CYII='
    pv_logo.save()

    launcher_props = apps.get_model("dbmconfigapp", "LauncherGeneralProperties")()
    launcher_props.default_app = pv
    launcher_props.save()

    hostedAppsBehavior = apps.get_model("dbmconfigapp", 'AgentHostedAppsBehavior')()
    hostedAppsBehavior.save()

    ehrAgentHelp = apps.get_model("dbmconfigapp", 'EhrAgentHelp')()
    ehrAgentHelp.link_name='dbMotion System Info'
    ehrAgentHelp.link_url='/dbMotionInformationServices/dbMotionInformationPage.aspx'
    ehrAgentHelp.save()

    # Services to Restart
    add_to_model_descriptor2("dbmconfigapp_launchergeneralproperties", services_codes=['CVA'])
    add_to_model_descriptor2("dbmconfigapp_agentpphostedapp_view", services_codes=['CVA'])
    add_to_model_descriptor2("dbmconfigapp_agentpphostedapp", services_codes=['CVA'], export_in_api=False)
    add_to_model_descriptor2("dbmconfigapp_agenthostedappsbehavior", services_codes=['CVA'])
    add_to_model_descriptor2('dbmconfigapp_agentusercentricapp', services_codes=['CVA'])
    add_to_model_descriptor2('dbmconfigapp_agentusercentricapp_view', services_codes=['CVA'])
    add_to_model_descriptor2('dbmconfigapp_agentsmartonfhirapp', services_codes=['CVA'])
    add_to_model_descriptor2('dbmconfigapp_agentsmartonfhirapp_view', services_codes=['CVA'])
    add_to_model_descriptor2("dbmconfigapp_ehragenthelp", services_codes=['CVA'])

def load_DataAccessAuditingPages_data(apps, schema_editor):

    page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'CAGDataAccessAuditingPage')(),
                                            "",
                                            "",
                                            "cag_data_access_auditing",
                                            [], [])
    
    model = apps.get_model('dbmconfigapp', 'CAGDataAccessAuditing')()
    model.save()

    page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'DataAccessAuditingPage')(),
                                            "",
                                            "",
                                            "data_access_auditing",
                                            [], [])
    
    model = apps.get_model('dbmconfigapp', 'DataAccessAuditing')()
    model.save()

def load_CapsulePage_data(apps, schema_editor):

    page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'CapsulePage')(),
                                            "",
                                            "",
                                            "capsule",
                                            [], [])

    capsule = apps.get_model("dbmconfigapp", "CapsuleService")()
    capsule.capsule_page = page
    capsule.scheduled_time = datetime.time(00, 00)
    capsule.save()

    add_to_model_descriptor2('dbmconfigapp_capsuleservice', ['dataloading', 'Capsule'])

def load_CarequalityIntegrationSettingsPage_data(apps, schema_editor):

    components = get_components_by_name(apps, ['Patient View'])
    page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'CarequalityIntegrationSettingsPage')(),
                                            "",
                                            "",
                                            "pv_carequality_integration_settings",
                                            [], components)

    settingsModel = apps.get_model("dbmconfigapp", "CarequalityIntegrationSettingsModel")()
    settingsModel.save()

    settingsModel = apps.get_model("dbmconfigapp", "PrefetchSettingsModel")()
    settingsModel.save()

    ParticipantBaselineListModel = apps.get_model("dbmconfigapp", 'ParticipantBaselineListModel')

    participant = ParticipantBaselineListModel()
    participant.paticipant_name = "dbMotion 17.1 Azure Dev 190"
    participant.paticipant_identifier = "2.16.840.1.113883.3.190"
    participant.save()

    participant = ParticipantBaselineListModel()
    participant.paticipant_name = "dbMotion 19.2 Azure Dev 202"
    participant.paticipant_identifier = "2.16.840.1.113883.3.202"
    participant.save()

    add_to_model_descriptor2('dbmconfigapp_carequalityintegrationsettingsmodel', ['ACDM'])
    add_to_model_descriptor2('dbmconfigapp_participantlistbasedpaamodel', ['ACDM'])
    add_to_model_descriptor2('dbmconfigapp_participantlistmodel', ['ACDM'])
    add_to_model_descriptor2('dbmconfigapp_participantbaselinelistmodel', ['ACDM'])
    add_to_model_descriptor2('dbmconfigapp_prefetchsettingsmodel', ['ACDM','DataLoading'])

def load_ClinicalCodeDisplayPages_data(apps, schema_editor):

    components = get_components_by_name(apps, ['Clinical Viewer', 'EHR Agent', 'Patient View'])

    cv_page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'ClinicalCodeDisplayPage')(),
                                            "",
                                            "",
                                            "clinical_code_display",
                                            [], components)

    pl_page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'PlClinicalCodeDisplayPage')(),
                                            "",
                                            "Set Clinical Code Display Settings",
                                            "pl_clinical_code_display",
                                            [], components)

    pv_page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'PVClinicalCodeDisplayPage')(),
                                            "",
                                            "",
                                            "pv_clinical_code_display",
                                            [], components)

    codeDisplay = apps.get_model("dbmconfigapp", "ClinicalCodeDisplay")

    db_alias = schema_editor.connection.alias

    codeDisplay.objects.using(db_alias).bulk_create([
codeDisplay(business_aspect="AllergyIntolerance",business_table="AllergyIntolerance",code_name="StatusCode",vocabulary_domain="ActStatus",display_as="Preferred|Baseline|Local|Text",pv_parent=pv_page),
codeDisplay(business_aspect="AllergyIntolerance",business_table="AllergyIntolerance",code_name="UncertaintyCode",vocabulary_domain="ActUncertainty",display_as="Preferred|Baseline|Local|Text",pv_parent=pv_page),
codeDisplay(business_aspect="AllergyIntolerance",business_table="AllergyIntolerance",code_name="SeverityValueCode",vocabulary_domain="SeverityObservation",display_as="Preferred|Baseline|Local|Text",pv_parent=pv_page),
codeDisplay(business_aspect="AllergyIntolerance",business_table="AllergyIntolerance",code_name="Code",vocabulary_domain="ObservationIntoleranceType",display_as="Preferred|Baseline|Local|Text",pv_parent=pv_page),
codeDisplay(business_aspect="AllergyIntolerance",business_table="AllergyIntolerance",code_name="IntoleranceValueCode",vocabulary_domain="IntoleranceValue",display_as="Preferred|Baseline|Local|Text",pv_parent=pv_page),
codeDisplay(business_aspect="AllergyIntolerance",business_table="AllergyIntolerance",code_name="ReactionCode",vocabulary_domain="ObservationValue",display_as="Preferred|Baseline|Local|Text",pv_parent=pv_page),
codeDisplay(business_aspect="ClinicalDocuments",business_table="ClinicalDocuments",code_name="StatusCode",vocabulary_domain="ActStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="ClinicalDocuments",business_table="ClinicalDocuments",code_name="PriorityCode",vocabulary_domain="ActPriority",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="ClinicalDocuments",business_table="ClinicalDocuments",code_name="UncertaintyCode",vocabulary_domain="ActUncertainty",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="ClinicalDocuments",business_table="ClinicalDocuments",code_name="MoodCode",vocabulary_domain="ActMood",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="ClinicalDocuments",business_table="ClinicalDocuments",code_name="DocumentTypeCode",vocabulary_domain="DocumentType",display_as="Preferred|Baseline|Local|Text",pv_parent=pv_page),
codeDisplay(business_aspect="ClinicalDocuments",business_table="ClinicalDocuments",code_name="DocumentCompletionCode",vocabulary_domain="DocumentCompletion",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="ClinicalDocuments",business_table="ParticipantOrganization",code_name="TypeCode",vocabulary_domain="ParticipationType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="ClinicalDocuments",business_table="ParticipantOrganization",code_name="Code",vocabulary_domain="OrganizationEntityType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="ClinicalDocuments",business_table="ParticipantOrganization",code_name="OrganizationCode",vocabulary_domain="OrganizationEntityType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="ClinicalDocuments",business_table="ParticipantOrganization",code_name="StatusCode",vocabulary_domain="EntityStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Diagnosis",business_table="Diagnosis",code_name="ObservationStatusValueCode",vocabulary_domain="dbmObservationStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Diagnosis",business_table="Diagnosis",code_name="SeverityCode",vocabulary_domain="SeverityObservation",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Diagnosis",business_table="Diagnosis",code_name="Code",vocabulary_domain="ObservationDiagnosisTypes ",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Diagnosis",business_table="Diagnosis",code_name="ValueCode",vocabulary_domain="ObservationValue",display_as="Preferred|Baseline|Local|Text",pv_parent=pv_page),
codeDisplay(business_aspect="Problems",business_table="Problems",code_name="StatusCode",vocabulary_domain="ActStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Problems",business_table="Problems",code_name="UncertaintyCode",vocabulary_domain="ActUncertainty",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Problems",business_table="Problems",code_name="Code",vocabulary_domain="ObservationValue",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Problems",business_table="Problems",code_name="Calc_TypeCode",vocabulary_domain="ObservationConditionTypes",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Problems",business_table="Problems",code_name="SeverityCode",vocabulary_domain="SeverityObservation",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Problems",business_table="Problems",code_name="ClassCode",vocabulary_domain="dbmObservationStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Problems",business_table="Problems",code_name="MethodCode",vocabulary_domain="ObservationMethod",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Imaging",business_table="Imaging",code_name="StatusCode",vocabulary_domain="ActStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Imaging",business_table="Imaging",code_name="PriorityCode",vocabulary_domain="ActPriority",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Imaging",business_table="Imaging",code_name="MoodCode",vocabulary_domain="ActMood",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Imaging",business_table="Imaging",code_name="UncertaintyCode",vocabulary_domain="ActUncertainty",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Imaging",business_table="Imaging",code_name="Code",vocabulary_domain="DiagnosticImageCode",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Imaging",business_table="Imaging",code_name="TargetSiteCode",vocabulary_domain="ActSite",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Imaging",business_table="Imaging",code_name="ImagingTypeCode",vocabulary_domain="dbmImagingType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Imaging",business_table="Imaging",code_name="MethodCode",vocabulary_domain="ObservationMethod",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Imaging",business_table="Imaging",code_name="InterpretationCode",vocabulary_domain="ObservationInterpretation",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Imaging",business_table="Imaging",code_name="MediaTypeCode",vocabulary_domain="MediaType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Immunization",business_table="Immunization",code_name="StatusCode",vocabulary_domain="ActStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Immunization",business_table="Immunization",code_name="PriorityCode",vocabulary_domain="ActPriority",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Immunization",business_table="Immunization",code_name="MoodCode",vocabulary_domain="ActMood",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Immunization",business_table="Immunization",code_name="RouteCode",vocabulary_domain="RouteOfAdministration",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Immunization",business_table="Immunization",code_name="DoseQuantityUnitCode",vocabulary_domain="UnitsOfMeasureCaseInsensitive",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Immunization",business_table="Immunization",code_name="ApproachSiteCode",vocabulary_domain="ActSite",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Immunization",business_table="Immunization",code_name="Code",vocabulary_domain="*",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Immunization",business_table="Immunization",code_name="ReasonCode",vocabulary_domain="ActReason",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Immunization",business_table="RelatedReactions",code_name="ReactionCode",vocabulary_domain="ObservationValue",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Laboratory",business_table="LaboratoryEvent",code_name="StatusCode",vocabulary_domain="ActStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Laboratory",business_table="LaboratoryEvent",code_name="PriorityCode",vocabulary_domain="ActPriority",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Laboratory",business_table="LaboratoryEvent",code_name="StructureTypeCode",vocabulary_domain="dbmLabStructureType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Laboratory",business_table="LaboratoryEvent",code_name="ClusterCode",vocabulary_domain="ClusterType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Laboratory",business_table="LaboratoryEvent",code_name="ConfidentialityCode",vocabulary_domain="Confidentiality",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Laboratory",business_table="LaboratoryEvent",code_name="SpecimenMaterialTypeCode",vocabulary_domain="SpecimenEntityType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Laboratory",business_table="LaboratoryEvent",code_name="Code",vocabulary_domain="BatteryType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Laboratory",business_table="LaboratoryEvent",code_name="ResultCode",vocabulary_domain="TestType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Laboratory",business_table="LaboratoryResult",code_name="StatusCode",vocabulary_domain="ActStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Laboratory",business_table="LaboratoryResult",code_name="PriorityCode",vocabulary_domain="ActPriority",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Laboratory",business_table="LaboratoryResult",code_name="Code",vocabulary_domain="TestType",display_as="Preferred|Baseline|Local|Text",pv_parent=pv_page),
codeDisplay(business_aspect="Laboratory",business_table="AdditiveMaterial",code_name="Code",vocabulary_domain="MaterialEntityClassType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Laboratory",business_table="LabTreeItem",code_name="Code",vocabulary_domain="TestType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Laboratory",business_table="TestCode",code_name="Code",vocabulary_domain="TestType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Pathology",business_table="Pathology",code_name="StatusCode",vocabulary_domain="ActStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Pathology",business_table="Pathology",code_name="PriorityCode",vocabulary_domain="ActPriority",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Pathology",business_table="Pathology",code_name="StructureTypeCode",vocabulary_domain="dbmLabStructureType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Pathology",business_table="Pathology",code_name="ClusterCode",vocabulary_domain="ClusterType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Pathology",business_table="Pathology",code_name="SpecimenMaterialTypeCode",vocabulary_domain="SpecimenEntityType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Pathology",business_table="Pathology",code_name="ProcedureActSiteCode",vocabulary_domain="ActSite",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Pathology",business_table="Pathology",code_name="ReportMediaTypeCode",vocabulary_domain="MediaType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Pathology",business_table="Pathology",code_name="ReportCompletionCode",vocabulary_domain="DocumentCompletion",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Pathology",business_table="PathologyFinding",code_name="ValueCode",vocabulary_domain="PathologyValue",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Medication",business_table="MedicationRequest",code_name="PriorityCode",vocabulary_domain="ActPriority",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Medication",business_table="MedicationRequest",code_name="MoodCode",vocabulary_domain="ActMood",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Medication",business_table="MedicationRequest",code_name="FrequencyCode",vocabulary_domain="GTSAbbreviation",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Medication",business_table="MedicationRequest",code_name="DurationUnitCode",vocabulary_domain="UnitsOfMeasureCaseInsensitive",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Medication",business_table="MedicationRequest",code_name="AdministrationUnitCode",vocabulary_domain="OrderableDrugForm",display_as="Preferred|Baseline|Local|Text",pv_parent=pv_page),
codeDisplay(business_aspect="Medication",business_table="MedicationRequest",code_name="DoseQuantityUnitCode",vocabulary_domain="UnitsOfMeasureCaseInsensitive",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Medication",business_table="MedicationRequest",code_name="RouteCode",vocabulary_domain="RouteOfAdministration",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Medication",business_table="MedicationRequest",code_name="Code",vocabulary_domain="ActSubstanceAdministrationCode",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Medication",business_table="MedicationRequest",code_name="DispenseQuantityUnitCode",vocabulary_domain="UnitsOfMeasureCaseInsensitive",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Medication",business_table="MedicationSupply",code_name="StatusCode",vocabulary_domain="ActStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Medication",business_table="MedicationSupply",code_name="TypeCode",vocabulary_domain="ActPharmacySupplyType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Medication",business_table="MedicationSupply",code_name="QuantityUnitCode",vocabulary_domain="UnitsOfMeasureCaseInsensitive",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Demography",business_table="ParticipantOrganization",code_name="TypeCode",vocabulary_domain="RoleClass",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Demography",business_table="ParticipantOrganization",code_name="COVPTYCode",vocabulary_domain="ActInsurancePolicyCode",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Demography",business_table="ParticipantOrganization",code_name="CAREGIVERCode",vocabulary_domain="HealthcareProviderRoleType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Demography",business_table="ParticipantOrganization",code_name="StatusCode",vocabulary_domain="RoleStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Demography",business_table="PatientRecord",code_name="AdministrativeGender",vocabulary_domain="AdministrativeGender",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Demography",business_table="PatientRecord",code_name="MaritalStatus",vocabulary_domain="MaritalStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Demography",business_table="PatientRecord",code_name="EthnicGroup",vocabulary_domain="Ethnicity",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Demography",business_table="PatientRecord",code_name="ReligiousAffiliation",vocabulary_domain="ReligiousAffiliation",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Demography",business_table="PatientRecord",code_name="Race",vocabulary_domain="Race",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Demography",business_table="PatientRecord",code_name="VeryImportantPerson",vocabulary_domain="PatientImportance",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Demography",business_table="PatientRecord",code_name="BirthCountry",vocabulary_domain="CountryEntityType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Demography",business_table="PatientRecord",code_name="PreferredLanguage",vocabulary_domain="HumanLanguage",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Demography",business_table="PatientContacts",code_name="UseCode",vocabulary_domain="*",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Demography",business_table="PatientContacts",code_name="PartTypeCode",vocabulary_domain="AddressPartType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Demography",business_table="PatientContacts",code_name="SchemeCode",vocabulary_domain="URLScheme",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Demography",business_table="PatientContacts",code_name="ValueCode",vocabulary_domain="AddressValue",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="Encounter",code_name="StatusCode",vocabulary_domain="ActStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="Encounter",code_name="Code",vocabulary_domain="ActEncounterCode",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="Conditions",code_name="StatusCode",vocabulary_domain="ActStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="Conditions",code_name="UncertaintyCode",vocabulary_domain="ActUncertainty",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="Conditions",code_name="SeverityCode",vocabulary_domain="SeverityObservation",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="Conditions",code_name="Code",vocabulary_domain="ObservationValue",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="Conditions",code_name="ProblemList.TypeCode",vocabulary_domain="ObservationConditionTypes",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="Conditions",code_name="Diagnosis.TypeCode",vocabulary_domain="ObservationDiagnosisTypes",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="Conditions",code_name="Diagnosis.Code",vocabulary_domain="ObservationValue",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="Conditions",code_name="ProblemList.Code",vocabulary_domain="ObservationValue",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="LaboratoryEvent",code_name="StatusCode",vocabulary_domain="ActStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="LaboratoryEvent",code_name="ClusterCode",vocabulary_domain="ClusterType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="LaboratoryEvent",code_name="Code",vocabulary_domain="BatteryType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="LaboratoryEvent",code_name="Calc_SpecimenMaterialTypeCode",vocabulary_domain="SpecimenEntityType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="AllergyIntolerance",code_name="StatusCode",vocabulary_domain="ActStatus",display_as="Preferred|Baseline|Local|Text",pv_parent=pv_page),
codeDisplay(business_aspect="Summary",business_table="AllergyIntolerance",code_name="UncertaintyCode",vocabulary_domain="ActUncertainty",display_as="Preferred|Baseline|Local|Text",pv_parent=pv_page),
codeDisplay(business_aspect="Summary",business_table="AllergyIntolerance",code_name="SeverityValueCode",vocabulary_domain="SeverityObservation",display_as="Preferred|Baseline|Local|Text",pv_parent=pv_page),
codeDisplay(business_aspect="Summary",business_table="AllergyIntolerance",code_name="Code",vocabulary_domain="IntoleranceValue",display_as="Preferred|Baseline|Local|Text",pv_parent=pv_page),
codeDisplay(business_aspect="Summary",business_table="AllergyIntolerance",code_name="IntoleranceValueCode",vocabulary_domain="IntoleranceValue",display_as="Preferred|Baseline|Local|Text",pv_parent=pv_page),
codeDisplay(business_aspect="Summary",business_table="AllergyIntolerance",code_name="ReactionCode",vocabulary_domain="ObservationValue",display_as="Preferred|Baseline|Local|Text",pv_parent=pv_page),
codeDisplay(business_aspect="Summary",business_table="ClinicalDocuments",code_name="StatusCode",vocabulary_domain="ActStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="ClinicalDocuments",code_name="DocumentTypeCode",vocabulary_domain="DocumentType",display_as="Preferred|Baseline|Local|Text",pv_parent=pv_page),
codeDisplay(business_aspect="Summary",business_table="ClinicalDocuments",code_name="DocumentCompletionCode",vocabulary_domain="DocumentCompletion",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="ClinicalDocuments",code_name="MediaTypeCode",vocabulary_domain="MediaType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="Immunizations",code_name="StatusCode",vocabulary_domain="ActStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="Immunizations",code_name="DoseQuantityUnitCode",vocabulary_domain="UnitsOfMeasureCaseInsensitive",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="SubstanceAdministration",code_name="StatusCode",vocabulary_domain="ActStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="SubstanceAdministration",code_name="FrequencyCode",vocabulary_domain="GTSAbbreviation",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="SubstanceAdministration",code_name="RouteCode",vocabulary_domain="RouteOfAdministration",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="SubstanceAdministration",code_name="DurationUnitCode",vocabulary_domain="UnitsOfMeasureCaseInsensitive",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="SubstanceAdministration",code_name="DoseQuantityUnitCode",vocabulary_domain="UnitsOfMeasureCaseInsensitive",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="Procedures",code_name="StatusCode",vocabulary_domain="ActStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="Procedures",code_name="ServiceCode",vocabulary_domain="ServiceDeliveryLocationRoleType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="Procedures",code_name="Code",vocabulary_domain="ActProcedureCode",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="Imaging",code_name="StatusCode",vocabulary_domain="ActStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="Imaging",code_name="PriorityCode",vocabulary_domain="ActPriority",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="Imaging",code_name="MoodCode",vocabulary_domain="ActMood",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="Imaging",code_name="ImagingTypeCode",vocabulary_domain="dbmImagingType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="Imaging",code_name="Code",vocabulary_domain="DiagnosticImageCode",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="MeasurementsEvent",business_table="MeasurementsEvent",code_name="StatusCode",vocabulary_domain="ActStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="MeasurementsEvent",business_table="MeasurementsEvent",code_name="Code",vocabulary_domain="CommonClinicalObservationType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="MeasurementsEvent",business_table="MeasurementsEvent",code_name="TargetSiteCode",vocabulary_domain="ActSite",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="MeasurementsEvent",business_table="MeasurementsEvent",code_name="ClusterCode",vocabulary_domain="ClusterType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="MeasurementsEvent",business_table="Measurement",code_name="Code",vocabulary_domain="CommonClinicalObservationType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="MeasurementsEvent",business_table="Measurement",code_name="MethodCode",vocabulary_domain="ObservationMethod",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="MeasurementsEvent",business_table="Measurement",code_name="Value_UnitCode",vocabulary_domain="UnitsOfMeasureCaseInsensitive",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Procedure",business_table="Procedure",code_name="Code",vocabulary_domain="ActProcedureCode",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Procedure",business_table="Procedure",code_name="StatusCode",vocabulary_domain="ActStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Procedure",business_table="Procedure",code_name="UncertaintyCode",vocabulary_domain="ActUncertainty",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Procedure",business_table="Procedure",code_name="PriorityCode",vocabulary_domain="ActPriority",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Procedure",business_table="Procedure",code_name="MoodCode",vocabulary_domain="ActMood",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Procedure",business_table="Procedure",code_name="ProcedureTypeCode",vocabulary_domain="dbmProcedureType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Procedure",business_table="Procedure",code_name="dbmServiceDeliveryLocationCode",vocabulary_domain="ServiceDeliveryLocationRoleType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Procedure",business_table="Procedure",code_name="MethodCode",vocabulary_domain="ProcedureMethod",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Procedure",business_table="Procedure",code_name="ApproachSiteCode",vocabulary_domain="ActSite",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Procedure",business_table="Procedure",code_name="TargetSiteCode",vocabulary_domain="ActSite",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Encounter",business_table="Encounter",code_name="Code",vocabulary_domain="ActEncounterCode",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Encounter",business_table="Encounter",code_name="StatusCode",vocabulary_domain="ActStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Encounter",business_table="Encounter",code_name="PriorityCode",vocabulary_domain="ActPriority",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Encounter",business_table="Encounter",code_name="MoodCode",vocabulary_domain="ActMood",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Encounter",business_table="Encounter",code_name="UncertaintyCode",vocabulary_domain="*",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Encounter",business_table="Encounter",code_name="LengthOfStayQuantity_UnitCode",vocabulary_domain="UnitsOfMeasureCaseInsensitive",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Encounter",business_table="Encounter",code_name="DischargeDispositionCode",vocabulary_domain="EncounterDischargeDisposition",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Encounter",business_table="Encounter",code_name="AdmissionReferralSourceCode",vocabulary_domain="EncounterAdmissionSource",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Diagnosis",business_table="Diagnosis",code_name="StatusCode",vocabulary_domain="ActStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Medication",business_table="MedicationRequest",code_name="StatusCode",vocabulary_domain="ActStatus",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Summary",business_table="SubstanceAdministration",code_name="Code",vocabulary_domain="ActSubstanceAdministrationCode",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Pathology",business_table="Pathology",code_name="Code",vocabulary_domain="BatteryType",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Pathology",business_table="PathologyFinding",code_name="Code",vocabulary_domain="*",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Encounter",business_table="Encounter",code_name="ReasonCode",vocabulary_domain="ActReason",display_as="Preferred|Baseline|Local|Text"),
codeDisplay(business_aspect="Diagnosis",business_table="Diagnosis",code_name="UncertaintyCode",vocabulary_domain="ActUncertainty",display_as="Preferred|Baseline|Local|Text", pl_parent=None),
])

    add_to_model_descriptor2(model_name='dbmconfigapp_clinicalcodedisplay', services_codes=['CVA','VPO','PatientList'])

def load_ClinicalViewerGeneralPage_data(apps, schema_editor):

    global cv_general_page

    components = get_components_by_name(apps, ['Clinical Viewer', 'EHR Agent'])
    services = ['ClinicalViewer']

    cv_general_page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'ClinicalViewerGeneralPage')(),
                                            "",
                                            "",
                                            "cv_general",
                                            [], components)

    model = apps.get_model('dbmconfigapp', 'ClinicalViewerGeneral')()
    model.save()

    model = apps.get_model('dbmconfigapp', 'DisclaimerText')()
    model.clinical_domain = None
    model.message = 'Not all clinical data is in the HIE.'
    model.culture = 'en-US'
    model.message_link_text = 'For details click here.'
    model.save()

    model = apps.get_model('dbmconfigapp', 'WebCulture')()
    model.culture = 'default'
    model.short_date_pattern = 'default'
    model.short_time_pattern = 'HH:mm'
    model.long_time_pattern = 'HH:mm:ss'
    model.date_separator = 'default'
    model.time_separator = 'default'
    model.save()

    model = apps.get_model('dbmconfigapp', 'ExternalApplication')()
    model.name = 'dbMotionSystemInfo'
    model.culture = 'en-US'
    model.uri = '/dbMotionInformationServices/dbMotionInformationPage.aspx'
    model.save()

    add_to_model_descriptor2(model_name='dbmconfigapp_clinicalviewergeneral', services_codes=services)
    add_to_model_descriptor2(model_name='dbmconfigapp_clinicalviewer_general_view', services_codes=services)
    add_to_model_descriptor2(model_name='dbmconfigapp_disclaimertext', services_codes=services)
    add_to_model_descriptor2(model_name='dbmconfigapp_webculture', services_codes=services)
    add_to_model_descriptor2(model_name='dbmconfigapp_externalapplication', services_codes=services)
    add_to_model_descriptor2(model_name='dbmconfigapp_externalapplicationparameter', services_codes=services)

def load_PlGeneralPage_data(apps, schema_editor):

    global pl_general_page

    components = get_components_by_name(apps, ['Patient List'])
    pl_general_page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'PlGeneralPage')(),
                                            "",
                                            "",
                                            "pl_general_definitions",
                                            [], components)

    model = apps.get_model('dbmconfigapp', 'EncounterDiagnosisRelationship')()
    model.save()

    add_to_model_descriptor2(model_name='dbmconfigapp_encounterdiagnosisrelationship', services_codes=['CVA','VPO','PatientList'])

def load_CCDADisplayPages_data(apps, schema_editor):

    page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'CVCCDADisplayPage')(),
                                            "",
                                            "",
                                            "cv_ccdadisplay",
                                            [], [])

    page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'PVCCDADisplayPage')(),
                                            "",
                                            "",
                                            "pv_ccdadisplay",
                                            [], [])

    page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'DataExportCCDADisplayPage')(),
                                            "",
                                            "",
                                            "dataexport_ccdadisplay",
                                            [], [])

    model = apps.get_model('dbmconfigapp', 'CCDADisplay')()
    model.retrieval_key_cloud_service = 'https://ihe.acdm.allscriptscloud.com/automation/api/key/'
    model.vaas_document_conversion='https://vaas-a.ms.allscriptscloud.com/v1/validation/'
    model.save()

    add_to_model_descriptor2(model_name='dbmconfigapp_ccdadisplay', services_codes=['ClinicalViewer','CVA','VPO','DocumentConversion'])

def load_ReportingPages_data(apps, schema_editor):

    global cv_reporting_page
    global pl_reporting_page
    global pv_reporting_page

    components = get_components_by_name(apps, ['Clinical Viewer', 'Patient List', 'Patient View'])

    cv_reporting_page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'CVReportingPage')(),
                                            "",
                                            "",
                                            "cv_reporting",
                                            [], components)
    
    pl_reporting_page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'PlReportingPage')(),
                                            "",
                                            "",
                                            "pl_reporting",
                                            [], components)

    pv_reporting_page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'PVReportingPage')(),
                                            "",
                                            "",
                                            "pv_reporting",
                                            [], components)

    model = apps.get_model('dbmconfigapp', 'AppsReporting')()
    model.customer_logo = ''
    model.dbmotion_logo = 'Logos/dbMotion/dbMotion.gif'
    model.save()

    DbFiles = apps.get_model("dbmconfigapp","DbFiles")()
    DbFiles.filename = model.dbmotion_logo
    DbFiles.size = 1331
    DbFiles.data = 'R0lGODlhdQApAHAAACH5BAEAACIALAAAAAB1ACkAhf///9DX4q25y6e5yeLo7WyKpSBBZRNDbj9miXuWrvji45ChsvTT1CJPdzBPcMDJ1Ak4Y0JfiE5yklpzl1BqhgAmT5WlvEBce9tqbdA9QeaXmcUQFckfJBA0WswuMtRMUHCFnN55fAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAb/QIBwSCwaj8hiQMAkJJ/QqHRKrUILhyzCkJgqBBaBwkoum6vbRsdhOEAK0QBkXqkIzvg8PmHY+h1bd0kMFRBZbhAPeouMUARtBmwNkW0RTxNuBhCaEAiNn6BCDwd9pX59DEmQbpNuoa+LAZSkpK0QTkiTm5ukEGOwwGUMf6d+l6xthg7BzA8FEwgRBYpPFKSSlBUTTwGFmgZ1gsyv0AcIgB0I20kEFcWlcYV04uOg0BQXEQgUCP3rSAJWtemAy5GFAhYK1vtkgRighwgWPCEADRCcVwk6BVg4xU+/C9EQgNQnRSEoB4XCcXQEseU5BLdWFhFQh84BmUkeNNDHj2dI/370ZFrYNScmTiMBXCrdeBQATQgVDlRo0NTIsJEiQ450QK1pzUIWqhrpp/TlMrEKCvQJKtZpup77QnZg27YukQXpXBqQaLfvkQUg0+nr0MWv4SIEFkxwMGGBycOQI0uebPcBBgweMGh4TKXAHEUKEKRra4HwJwUYNqjmoHqDBjMIVLaDOjGqnSIDpnbAM7sCZ2Gtg7fmUEZCHdBQbybpVufsEKnHqSgYwERUnQpd8ShgzX2Dhw2sv3sgI6HDbQDenhRICYGIgq9hp7SrM2SBgfh6WAvf79rKBJUKQFXBJfANYUFKFVBABQMCwuLdg+JBCN54UTzwQCoU1MFUegAQ8P+ASeDsYsAQdEDlSREMeGhSb0P8gqKKLronhIpCaBDcd6rh+OAGqSQBwnUVLLAedgAEWIEDNF1nyRDerOeLEHVsUQgRowBpQI8JmJfSHaQMOMR/QPJVJATpvHfdTalFqKaE2RWxAILsnecNVAJWIIEQDLpj5h1PBRBbe0IwB2ciAAwp4EYpDdEBnez9EyejCGTA36SvIcEeExdcd4eRUTGBElSKJKlgHTdlulumvkFJ5wQT1AnAAyAI6JiZXmZYBwVqaVokkGL8WUGaEq7JWoxU1uQidE7Ml6oQ0IX1ZgVwxFaBkXD8eNuzBri4ZYeJCrHogGZCwBQAorkDpYZ41mT/I3g7Drdjj0YkqZwQQyJnroFRFlpHWElKq8iBFYBA7r5ESCswp0IgnORuQzC3G61EaDJgsBR/l8QCJt4FlSCFOOdUIZ7AJCejQiR5p8T0eAYtt/RxS9sDUHkcrqpeCkEnADpOqlqbRDzFsBAo3WYkoEKAs7KW1HyqTbpRAZBAx0QIeEeeXiL8QLf0pjfzc7RtV/GDGEBR0wEEMDBkBRua+GGshSAKFS4aHMrkHAAQUggFFvo6I9bXFb3lA09DFR/WAEgFqAI5s6ta2FCAqSWC9tZ53cN9z2h01HWMYS2QdRSG8Jgt08r5WVt723LdqeXYWqVRQBezAxurak6cTnSzUEnBdhIB3RDlMoqfsnvTFuhXJmorvM1TuqeBBh+EwPoUAiQwwR0EKFD9jCk6BQJCLVavkAIBxOi9iwpYsL0AK2ZfZPjjlrz9Au0DwL571QcBADs='
    DbFiles.save()


    add_to_model_descriptor2(model_name='dbmconfigapp_appsreporting', services_codes=['ClinicalViewer','CVA','VPO','DocumentConversion','PatientList','PatientView'])
    add_to_model_descriptor2(model_name='dbmconfigapp_reporting_view', services_codes=['ClinicalViewer','CVA','VPO','DocumentConversion'])

def load_DirectMessagingAcdmPage_data(apps, schema_editor):

    components = get_components_by_name(apps, ['ACDM'])
    page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'DirectMessagingAcdmPage')(),
                                            "",
                                            "",
                                            "directMessaging_acdm",
                                            [], components)

    model = apps.get_model('dbmconfigapp', 'DirectMessagingAcdm')()
    model.save()

    add_to_model_descriptor2('dbmconfigapp_directmessagingacdm', ['ACDM'])

def load_DocumentSearchBootstrap_page_data(apps, schema_editor):

    page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'DocumentSearchBootstrap')(),
                                            "",
                                            "",
                                            "document_search_bootstrap",
                                            [], [])

    model = apps.get_model('dbmconfigapp', 'DocumentSearchBootstrapProperties')()
    model.save()

    add_to_model_descriptor2('dbmconfigapp_documentsearchbootstrapproperties', ['BOT'])

def load_DocumentSearchGeneral_page_data(apps, schema_editor):

    page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'DocumentSearchGeneral')(),
                                            "",
                                            "",
                                            "document_search_general",
                                            [], [])

    model = apps.get_model('dbmconfigapp', 'DocumentSearchGeneralProperties')()
    model.save()

    add_to_model_descriptor2('dbmconfigapp_documentsearchgeneralproperties', ['VPO','CVA','BOT'])

def load_DocumentSearchLiveFeeds_page_data(apps, schema_editor):

    page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'DocumentSearchLiveFeeds')(),
                                            "",
                                            "",
                                            "document_search_live_feeds",
                                            [], [])

    model = apps.get_model('dbmconfigapp', 'DocumentSearchLiveFeedsProperties')()
    model.save()

    add_to_model_descriptor2('dbmconfigapp_documentsearchlivefeedsproperties', ['BOT'])

def load_MyHRConnectivityPage_data(apps, schema_editor):

    page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'MyHRConnectivityPage')(),
                                            "",
                                            "",
                                            "external_documents_my_hr",
                                            [], [])

    model = apps.get_model('dbmconfigapp', 'MyHRConnectivityEntity')()
    model.stylesheet = 'MyHR/Stylesheet/DH_Generic_CDA_Stylesheet-1.3.0.xsl'
    model.save()

    DbFiles = apps.get_model("dbmconfigapp","DbFiles")()
    DbFiles.filename = model.stylesheet
    DbFiles.size = 385760
    DbFiles.data = 'PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjwhLS0NCiAgICBDb3B5cmlnaHQgMjAxNiBUaGUgQXVzdHJhbGlhbiBEaWdpdGFsIEhlYWx0aCBBZ2VuY3kgKFRoZSBBZ2VuY3kpDQogICANCiAgICBQcm9kdWN0aW9uIERpc2NsYWltZXIgLSANCg0KICAgIFRoZSBBZ2VuY3kgKGFzIExpY2Vuc29yKSBncmFudHMgWW91IGEgbGljZW5jZSB0byB0aGlzIFByb2R1Y3Qgc3ViamVjdCB0byANCiAgICB0aGUgdGVybXMgb2YgdGhlIEFwYWNoZSBMaWNlbmNlICh2ZXJzaW9uIDIuMCksIGEgY29weSBvZiB3aGljaCBpcyANCiAgICBhdmFpbGFibGUgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wLCBhbmQgdGhlIA0KICAgIGZvbGxvd2luZyB0ZXJtcy4NCiAgICAgDQogICAgVGhpcyBQcm9kdWN0IGxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5jZSBhbmQgdGhlc2UgdGVybXMgbWF5DQogICAgYmUgdXNlZCB3aXRoaW4gcHJvZHVjdGlvbiBzb2Z0d2FyZSBzeXN0ZW1zLiBJdCBuZXZlcnRoZWxlc3MgcmVtYWlucyANCiAgICB5b3VyIHJlc3BvbnNpYmlsaXR5IHRvIHRlc3QgYW5kIHZhbGlkYXRlIHRoZSB1c2Ugb2YgdGhpcyBwcm9kdWN0IA0KICAgIHdpdGhpbiB5b3VyIHNvZnR3YXJlIGFuZCB0aGUgbGltaXRhdGlvbiBvZiBsaWFiaWxpdHkgcHJvdmlzaW9ucyBpbiANCiAgICBjbGF1c2UgOCBvZiB0aGUgQXBhY2hlIExpY2VuY2UgY29udGludWUgdG8gYXBwbHkuDQogICAgDQogICAgRGVzcGl0ZSBjbGF1c2UgNyBvZiB0aGUgQXBhY2hlIExpY2VuY2UsIGlmIGEgY29uZGl0aW9uIG9yIHdhcnJhbnR5IA0KICAgIGlzIGltcGxpZWQgYnkgc3RhdHV0ZSBvciBsYXcgdGhhdCBjYW5ub3QgYmUgZXhjbHVkZWQsIHRoZW4gdGhlIA0KICAgIGxpYWJpbGl0eSBvZiBhIENvbnRyaWJ1dG9yIHRvIHRoZSBleHRlbnQgdGhhdCBpdCBoYXMgY29udHJpYnV0ZWQgdG8gDQogICAgYSBicmVhY2ggb2YgdGhhdCBjb25kaXRpb24gb3Igd2FycmFudHkgaXMgbGltaXRlZCB0byBvbmUgb3IgbW9yZSBvZiANCiAgICB0aGUgZm9sbG93aW5nIGF0IGl0cyBvcHRpb246IChhKSBpbiB0aGUgY2FzZSBvZiBnb29kcywgYW55IG9uZSBvZiANCiAgICB0aGUgZm9sbG93aW5nOiB0aGUgcmVwbGFjZW1lbnQgb2YgdGhvc2UgZ29vZHMgb3IgdGhlIHJlLXN1cHBseSBvZiANCiAgICBlcXVpdmFsZW50IGdvb2RzOyB0aGUgcmVwYWlyIG9mIHRob3NlIGdvb2RzOyB0aGUgcGF5bWVudCBvZiB0aGUgDQogICAgY29zdCBvZiByZXBsYWNpbmcgdGhvc2Ugb3IgYWNxdWlyaW5nIGVxdWl2YWxlbnQgZ29vZHM7IG9yIHRoZSANCiAgICBwYXltZW50IG9mIHRoZSBjb3N0IG9mIGhhdmluZyB0aG9zZSBnb29kcyByZXBhaXJlZDsgYW5kIChiKSBpbiB0aGUgDQogICAgY2FzZSBvZiBzZXJ2aWNlczogdGhlIHN1cHBseWluZyBvZiB0aG9zZSBzZXJ2aWNlcyBhZ2Fpbjsgb3IgdGhlIA0KICAgIHBheW1lbnQgb2YgdGhlIGNvc3Qgb2YgaGF2aW5nIHRob3NlIHNlcnZpY2VzIHN1cHBsaWVkIGFnYWluLg0KICAgICANCiAgICBBIHRlcm0gd2hpY2ggaXMgZ2l2ZW4gYSBtZWFuaW5nIGluIHRoZSBBcGFjaGUgTGljZW5jZSwgaGFzIHRoZSBzYW1lIA0KICAgIG1lYW5pbmcgd2hlbiB1c2VkIGluIHRoZXNlIHRlcm1zLg0KICAgIA0KICAgIFJldmlzaW9uIEhpc3Rvcnk6DQoNCglWZXJzaW9uIDEuMy4wIHwgMDYvMDEvMjAxNw0KCS0gVXBkYXRlZCBPd25lciBUaGUgQXVzdHJhbGlhbiBEaWdpdGFsIEhlYWx0aCBBZ2VuY3kNCgktIFJlbW92ZWQgZGlzcGxheSBvZiBkYXRhIGVsZW1lbnQgaGllcmFyY2h5DQoJLSBSZXBsYWNlZCBORUhUQSB3aXRoIERIIGZvciBlbnYgdmFyaWFibGVzDQoJLSBSZXBsYWNlZCBQQ0VIUiB3aXRoIE1IUiBmb3IgZW52IHZhcmlhYmxlcw0KCS0gQWRkZWQgT0lEIGZvciBBSVIgDQoJLSBBZGRlZCBkaXNwbGF5IG9mIGNhcHRpb25zIHdpdGhpbiBwYXJhZ3JhcGggZWxlbWVudHMNCgktIEFkZGVkIGRpc3BsYXkgb2YgY2FwdGlvbnMgd2l0aGluIGxpc3QgaXRlbXMNCgktIEFkZGVkIGRpc3BsYXkgb2YgYXV0aG9yJ3Mgb3JnYW5pc2F0aW9uYWwgYWRkcmVzcyBhbmQgY29tbXVuaWNhdGlvbiBkZXRhaWxzIA0KCS0gQWRkZWQgc3VwcG9ydCBmb3Igb3JpZ2luYWxUZXh0IGZvciBBdXRob3IgUm9sZQ0KCS0gQWRkZWQgc3VwcG9ydCBmb3Igb3JpZ2luYWxUZXh0IGZvciBTZXBhcmF0aW9uIE1vZGUNCiAgICAtIEFkZGVkIGNoZWNrIGZvciBjb3JyZWN0IE9JRCBmb3IgSUhJDQogICAgLSBBZGRlZCBhZGRpdGlvbmFsTG9jYXRvciB0byBkaXNwbGF5IG9mIGFkZHJlc3NlcyANCiAgICAtIEFkZGVkIGRpcmVjdGlvbiB0byBkaXNwbGF5IG9mIGFkZHJlc3Nlcw0KICAgIC0gQWRkZWQgZGlzcGxheSBvZiBudWxsRmxhdm9yIGZvciBhZGRyZXNzZXMNCiAgICAtIEFkZGVkIGRpc3BsYXkgb2YgbnVsbEZsYXZvciBmb3IgZWxlY3Ryb25pYyBjb21tdW5pY2F0aW9uIGRldGFpbHMNCiAgICAtIEFkZGVkIGRpc3BsYXkgb2YgbnVsbEZsYXZvciBmb3IgU2VwYXJhdGlvbiBNb2RlDQogICAgLSBBZGRlZCBkaXNwbGF5IG9mIG51bGxGbGF2b3IgZm9yIHBhdGllbnQncyBmYW1pbHlOYW1lDQogICAgLSBBZGRlZCBkaXNwbGF5IG9mIG51bGxGbGF2b3IgZm9yIGVuY291bnRlciB0aW1lc3RhbXBzIChmb3IgRGlzY2hhcmdlIFN1bW1hcnkgYW5kIEV2ZW50IFN1bW1hcnkpDQogICAgLSBUcmFja2VkIGNoYW5nZXMgcmVuZGVyZWQgYXMgZmluYWwgdmVyc2lvbg0KICAgIC0gQWRkZWQgc3R5bGVzaGVldCBwYXJhbWV0ZXIgInNob3dQcm92aWRlckhvbWVEZXRhaWxzIiB0byBpbmRpY2F0ZSBpZiBwZXJzb25hbCBjb250YWN0IGRldGFpbHMgYW5kIGFkZHJlc3NlcyAodGhvc2UgbWFya2VkIGFzDQogICAgICBob21lKSBhcmUgdG8gYmUgcmVuZGVyZWQuIA0KICAgIC0gRml4ZWQgIlJlc3BvbnNpYmxlIEhlYWx0aCBQcm9mZXNzaW9uYWwgQXQgVGltZSBPZiBEaXNjaGFyZ2UiIHRvIGRpc3BsYXkgY29udGFjdCBkZXRhaWxzIGlmIHByZXNlbnQuDQogICAgLSBGaXhlZCBldmVudCBzdW1tYXJ5IHRvIGRpc3BsYXkgZW5jb3VudGVyIHBlcmlvZCBhY2NvcmRpbmdseSBpZiBvbmx5IGVuZCBkYXRlIGlzIHNwZWNpZmllZC4NCiAgICAtIEZpeGVkIGRpc3BsYXkgb2YgcHJvdmlkZXIgY29udGFjdCBkZXRhaWxzIHRvIHNheSAiTm90IHByb3ZpZGVkIiB3aGVuIHVuYXZhaWxhYmxlLg0KDQogICAgVmVyc2lvbiAxLjIuOSB8IDA0LzExLzIwMTQNCgktIEZpeGVkIFdDQUcgY29sb3IgY29udHJhY3QgaXNzdWUgd2l0aCBUaXRsZSBoZWFkZXJzIGFuZCBhZG1pbmlzdHJhdGl2ZSBkZXRhaWxzDQoJLSBBZGRlZCBQYXRob2xvZ3ksIERJIGFuZCBBQ0kgb2JqZWN0IGlkZW50aWZpZXJzIChPSURzKWZvciBkb2N1bWVudCB0eXBlIGxvb2t1cA0KCS0gRml4ZWQgQ1NTIHN5bnRheCBpc3N1ZXMgcmVsYXRlZCB0byB3aWR0aA0KCS0gVXBkYXRlcyBwcm9jZXNzaW5nIGZvciB0YWJsZSBib2R5LCB0YWJsZSBoZWFkLCBhbmQgdGFibGUgcm93IGVsZW1lbnRzDQoJLSBBZGRlZCBiYW5uZXJEaXNwbGF5IHBhcmFtZXRlci4gV2hlbiBzZXQgdG8gYSB2YWx1ZSBvZiAnZmFsc2UnLCB3aWxsIGRpc2FibGUgDQoJICBnZW5lcmF0aW9uIG9mIHRoZSBmaXhlZCBCYW5uZXIgZm9yIFJlbmRlcmluZyBTeXN0ZW1zIHdoaWNoIGFscmVhZHkgZGlzcGxheQ0KCSAgdGhlIGJhbm5lciBlbHNld2hlcmUuIERlZmF1bHQgaXMgdG8gYWx3YXlzIGRpc3BsYXkgdGhlIEJhbm5lci4NCgktIENoYW5nZWQgRG9jdW1lbnQgVHlwZSBuYW1lIG9mIHRoZSBNZWRpY2FyZSBWaWV3IGZyb20gIk1lZGljYXRpb24gSW5mb3JtYXRpb24gVmlldyINCgkgIHRvICJNZWRpY2FyZSBPdmVydmlldyINCgktIFVwZGF0ZWQgZG9jdW1lbnQgdHlwZSBuYW1lczoNCgkgICAgLSAiZS1EaXNjaGFyZ2UgU3VtbWFyeSIgY2hhbmdlcyB0byAiRGlzY2hhcmdlIFN1bW1hcnkiDQoJICAgIC0gIkF1c3RyYWxpYW4gQ2hpbGRob29kIEltbXVuaXNhdGlvbiBSZWdpc3RlciBSZWNvcmQiIHRvICJBdXN0cmFsaWFuIENoaWxkaG9vZCBJbW11bmlzYXRpb24gUmVnaXN0ZXIiDQoJICAgIC0gIkNvbnN1bWVyIEVudGVyZWQgTm90ZXMiIHRvICJQZXJzb25hbCBIZWFsdGggTm90ZSINCgkgICAgLSAiQ29uc3VtZXIgRW50ZXJlZCBIZWFsdGggU3VtbWFyeSIgdG8gIlBlcnNvbmFsIEhlYWx0aCBTdW1tYXJ5Ig0KCSAgICAtICJQQ0VIUiBQcmVzY3JpcHRpb24gUmVjb3JkIiB0byAiZUhlYWx0aCBQcmVzY3JpcHRpb24gUmVjb3JkIg0KCSAgICAtICJQQ0VIUiBEaXNwZW5zZSBSZWNvcmQiIHRvICJlSGVhbHRoIERpc3BlbnNlIFJlY29yZCINCgktIFByb3ZpZGVkIGNvbnN0YW50cyBmb3IgY2xpbmljYWwgZG9jdW1lbnQgdHlwZSBuYW1lcyB0byBzaW1wbGlmeSBpbXBsZW1lbnRhdGlvbiBvZiBhbnkgZnV0dXJlIG5hbWUgY2hhbmdlcw0KCS0gRml4ZWQgYnVnIHRvIGRpc3BsYXkgUmVmZXJlZSBwYXJ0aWNpcGFudCBjb250YWN0IGRldGFpbHMgZm9yIGUtUmVmZXJyYWwNCgktIEFkZGVkIFJlbmRlcmluZyBvZiBPY2N1cGF0aW9uIGFuZCBRdWFsaWZpY2F0aW9ucyBmb3I6DQoJICBhKSBnZW5lcmFsIFBhcnRpY2lwYW50cw0KCSAgYikgZ2VuZXJhbCBSZWNpcGllbnRzDQoJICBjKSBlLVJlZmVycmFsIFJlZmVyZWUNCgkgIGQpIFNwZWNpYWxpc3QgTGV0dGVyIFJlZmVycmVyDQoJLSBJbXByb3ZlZCBjaGVja2luZyBvZiBiYWNrZ3JvdW5kIGFuZCBmb3JlZ3JvdW5kIHRleHQgY29sb3VyIHN0eWxlIGNvZGUgdmFsdWVzDQoJLSBJbXByb3ZlZCBjaGVja2luZyBvZiBlbSBhbmQgcGl4ZWwgZm9udCBzaXplIHN0eWxlIGNvZGUgdmFsdWVzDQoJLSBJbXByb3ZlZCBjaGVja2luZyBvZiB0YWJsZSBjZWxsIGNvbHVtbiB3aWR0aCBzdHlsZSBjb2RlIHZhbHVlcw0KCS0gRml4ZWQgYSBidWcgaW4gd2hpY2ggY29sdW1uIHdpZHRoIHN0eWxlIGNvZGVzIHdlcmUgbm90IGJlaW5nIHByb2Nlc3NlZCBjb3JyZWN0bHkNCgktIEFkZGVkIGNoZWNraW5nIGZvciBKYXZhU2NyaXB0IHJlZmVyZW5jZXMgaW4gbGlua0h0bWwgbGlua3MsICBhbmQgcmVuZGVyTXVsdGltZWRpYSB0YXJnZXRzLCBhbmQgdGhlIExvZ28gdGFyZ2V0DQoJLSBBZGRlZCByZW5kZXJpbmcgb2YgUmVxdWVzdGVyIHBhcnRpY2lwYW50cyBhbmQgT3JkZXIgSUQgaW4gUGF0aG9sb2d5IFJlcG9ydCBhbmQgRGlhZ25vc3RpYyBJbWFnZSBSZXBvcnQgDQoJLSBBZGRlZCByZW5kZXJpbmcgb2YgQWNjZXNzaW9uIElEIGZvciBEaWFnbm9zdGljIEltYWdlIFJlcG9ydA0KCQ0KICAgIFZlcnNpb24gMS4yLjggfCAyMi8xMC8yMDEzDQogICAgLSBGaXhlZCBidWcgaW4gbmVzdGVkU2VjdGlvbiB0ZW1wbGF0ZQ0KICAgIC0gRml4ZWQgYXV0aG9yIG5hbWUgYnVnIGF0IHN0YXJ0IG9mIGRvY3VtZW50DQogICAgLSBBZGRlZCBwYXJhbWV0ZXIgdG8gZGlzYWJsZSByZW5kZXJpbmcgb2YgdGhlIEFkbWluaXN0cmF0aXZlIE9ic2VydmF0aW9ucyBzZWN0aW9uIChkZWZhdWx0cyB0byBhbHdheXMgZGlzcGxheWluZyBpdCkNCiAgICAtIEZpeGVkIHRkIGFuZCB0aCB0ZW1wbGF0ZXMgdG8gY29ycmVjdGx5IGFzc2lnbiBnZW5lcmljIENTUyBzdHlsZXMgd2hlbiBhbiAnSUQnIGF0dHJpYnV0ZSBpcyBwcmVzZW50DQogICAgLSBBZGRlZCBCYW5uZXIgQ1NTIHN0eWxlcyB0byBzdXBwb3J0IE1pY3Jvc29mdCBJbnRlcm5ldCBFeHBvcmVyIDYNCiAgICAtIEFkZGVkIHN0YXR1cyBvZiB3aXRoZHJhd24gZG9jdW1lbnRzIHRvIHRoZSBiYW5uZXINCiAgICAtIEFkZGVkIFN0cmVldCBTdWZmaXgsIFBvc3RhbCBEZWxpdmVyeSBUeXBlLCBQb3N0YWwgRGVsaXZlcnkgTnVtYmVyLCBBdXN0cmFsaWFuIFVuaXQgTnVtYmVyIGFuZCBBdXN0cmFsaWFuIFVuaXQgVHlwZQ0KICAgICAgdG8gZGlzcGxheSBvZiBhZGRyZXNzZXMNCiAgICAtIEFkbWluaXN0cmF0aXZlIE9ic2VydmF0aW9ucyBzZWN0aW9uIHdpbGwgb25seSBiZSByZW5kZXJlZCBpZiB0aGUgbmFycmF0aXZlIGJsb2NrIDx0ZXh0PiBlbGVtZW50IGlzIHByZXNlbnQgaW4gdGhlIHNlY3Rpb24NCiAgICAtIFJlbW92ZWQgcGFnZS1icmVhay1pbnNpZGU6IGF2b2lkIENTUyBwcm9wZXJ0eSB0aHJvdWdob3V0DQogICAgDQogICAgVmVyc2lvbiAxLjIuNyB8IDIyLzEyLzIwMTINCiAgICAtIEZpeGVkIGZvb3Rub3RlUmVmIGJ1Zw0KICAgIC0gUmVtb3ZlZCBjb21tZW50ZWQgb3V0IGNvZGUgaW4gY2RhOmZvb3Rub3RlIHRlbXBsYXRlDQoNCiAgICBWZXJzaW9uIDEuMi42IHwgMTEvMTIvMjAxMg0KICAgIC0gVXBkYXRlZCBsaW5rSHRtbCB0byBzdXBwb3J0IG9ic2VydmF0aW9uTWVkaWEgaW50ZXJuYWwgdGFyZ2V0cyBhbmQgZXh0ZXJuYWwgdGFyZ2V0cw0KICAgICAgKGkuZS4gdGhvc2Ugd2l0aG91dCBhbiBYTUwgSUQgZS5nLiBhIGZpbGUgaW4gdGhlIHBhY2thZ2Ugb3IgZXh0ZXJuYWwgVVJMKQ0KICAgIC0gQWRkZWQgUENFSFIgUHJlc2NyaXB0aW9uIGFuZCBEaXNwZW5zZSBWaWV3IGRvY3VtZW50IHR5cGUgcmVjb2duaXRpb24NCiAgICAtIEVuc3VyZWQgY29uc2lzdGVudCBkYXRlL2RhdGV0aW1lIGRhdGUvbW9udGgveWVhciBzZXBhcmF0b3JzIHdoZW4gZm9ybWF0dGluZyBkYXRlcw0KICAgIC0gQ2hhbmdlZCBmb3JtYXR0aW5nIG9mIHBhdGllbnQgbmFtZSBpbiB0aGUgYmFubmVyDQoNCiAgICBWZXJzaW9uIDEuMi41IHwgMy8xMC8yMDEyDQogICAgLSBJbmNsdWRlZCBBdXRob3IgT3JnYW5pc2F0aW9uIGFuZCBBdXRob3IgRGVwYXJ0bWVudCBpbiBhZG1pbmlzdHJhdGl2ZSBkZXRhaWxzICAgICAgDQoNCiAgICBWZXJzaW9uIDEuMi40IHwgMjcvMDkvMjAxMg0KICAgIC0gQW1lbmRlZCBkaXNwbGF5IG9mIGRvY3VtZW50LCBzZXQsIGFuZCByZWxhdGVkIGlkZW50aWZpZXJzICAgICAgDQogICAgLSBSZW1vdmVkIGRpc3BsYXkgb2YgUENFSFIgUHJlc2NyaXB0aW9uIFJlY29yZCBhbmQgUENFSFIgRGlzcGVuc2UgUmVjb3JkDQogICAgICBpdGVtIGlkZW50aWZpZXJzIGluIEFkbWluaXN0cmF0aXZlIERldGFpbHMNCg0KICAgIFZlcnNpb24gMS4yLjMgfCAxNC8wOS8yMDEyDQogICAgLSBBZGRlZCBwcmludGluZyBvZiB0aGUgQmxhY2sgQmFubmVyIG9uIHRoZSBmaXJzdCBwYWdlDQogICAgLSBUcmltbWVkIHRoZSBjb250ZW50IG9mIHRoZSBIVE1MIHRpdGxlIGZvciBwcmludGluZw0KICAgIC0gRml4ZWQgdG9wIGxlZnQgbWFyZ2luIGFsaWdubWVudCBmb3IgeFByZSB0ZXh0DQogICAgLSBBZGRlZCBwYXJhbSB0byBzdXBwb3J0IGRpc3BsYXlpbmcgc3R5bGUgc2hlZXQgdmVyc2lvbg0KICAgIA0KICAgIFZlcnNpb24gMS4yLjIgfCAzLzA5LzIwMTINCiAgICAtIEFkZGVkIFBDRUhSIFByZXNjcmlwdGlvbiBSZWNvcmQgYW5kIFBDRUhSIERpc3BlbnNlIFJlY29yZCBkb2N1bWVudCB0eXBlIHJlY29nbml0aW9uDQogICAgLSBSZW1vdmVkIGRlZmF1bHQgcGFyYWdyYXBoIHdpZHRoIENTUyBhdHRyaWJ1dGVzIHRvIGFsbG93IG5lc3QgcGFyYWdyYXBocw0KICAgIA0KICAgIFZlcnNpb24gMS4yLjEgfCAzMS8wOC8yMDEyDQogICAgLSBDb3JyZWN0ZWQgIk1lZGljYXJlL0RWQSBCZW5lZml0cyBSZXBvcnQiIGRvY3VtZW50IHR5cGUgbmFtZQ0KICAgIC0gRml4ZWQgc2VjdGlvbiBoZWFkZXIgYXR0cmlidXRlIGJ1Zw0KICAgIA0KICAgIFZlcnNpb24gMS4yLjAgfCAyMS8wOC8yMDEyDQogICAgLSBJbml0aWFsIHZlcnNpb24gDQotLT4NCg0KPHhzbDpzdHlsZXNoZWV0IHZlcnNpb249IjEuMCIgDQogICAgICAgICAgICAgICAgeG1sbnM6eHNsPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L1hTTC9UcmFuc2Zvcm0iDQogICAgICAgICAgICAgICAgeG1sbnM6Y2RhPSJ1cm46aGw3LW9yZzp2MyIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSINCiAgICAgICAgICAgICAgICB4bWxuczpleHQ9Imh0dHA6Ly9ucy5lbGVjdHJvbmljaGVhbHRoLm5ldC5hdS9DaS9DZGEvRXh0ZW5zaW9ucy8zLjAiDQogICAgICAgICAgICAgICAgZXhjbHVkZS1yZXN1bHQtcHJlZml4ZXM9InhzaSBjZGEgZXh0Ij4NCiAgICANCiAgICA8IS0tIFBBUkFNRVRFUlMgLS0+DQogICAgPHhzbDpwYXJhbSBuYW1lPSJwcm92aWRlckluZGl2aWR1YWxJZGVudGlmaWVyRGlzcGxheSI+ZmFsc2U8L3hzbDpwYXJhbT4NCiAgICA8eHNsOnBhcmFtIG5hbWU9InByb3ZpZGVyT3JnYW5pc2F0aW9uSWRlbnRpZmllckRpc3BsYXkiPmZhbHNlPC94c2w6cGFyYW0+DQogICAgPHhzbDpwYXJhbSBuYW1lPSJwcm92aWRlckRldmljZUlkZW50aWZpZXJEaXNwbGF5Ij5mYWxzZTwveHNsOnBhcmFtPg0KCTx4c2w6cGFyYW0gbmFtZT0ic3R5bGVTaGVldFZlcnNpb25EaXNwbGF5Ij5mYWxzZTwveHNsOnBhcmFtPg0KICAgIDx4c2w6cGFyYW0gbmFtZT0iYWRtaW5pc3RyYXRpdmVPYnNlcnZhdGlvbnNTZWN0aW9uRGlzcGxheSI+dHJ1ZTwveHNsOnBhcmFtPg0KICAgIDx4c2w6cGFyYW0gbmFtZT0ic2hvd1Byb3ZpZGVySG9tZURldGFpbHMiPmZhbHNlPC94c2w6cGFyYW0+DQogICAgPHhzbDpwYXJhbSBuYW1lPSJiYW5uZXJEaXNwbGF5Ij50cnVlPC94c2w6cGFyYW0+DQogICAgDQogICAgPCEtLSBPVVRQVVQgLS0+DQogICAgPCEtLT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09LS0+DQogICAgPHhzbDpvdXRwdXQgbWV0aG9kPSJodG1sIiBpbmRlbnQ9InllcyIgdmVyc2lvbj0iNC4wMSIgZW5jb2Rpbmc9IlVURi04Ig0KICAgICAgICAgICAgICAgIGRvY3R5cGUtc3lzdGVtPSJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9zdHJpY3QuZHRkIg0KICAgICAgICAgICAgICAgIGRvY3R5cGUtcHVibGljPSItLy9XM0MvL0RURCBIVE1MIDQuMDEvL0VOIi8+DQogICAgPCEtLT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09LS0+DQogICAgPCEtLSBbRU5EXSBPVVRQVVQgLS0+DQoNCg0KDQoNCiAgICA8IS0tIENPTlNUQU5UUyAtLT4NCiAgICA8IS0tPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0tLT4NCiAgICA8IS0tIENEQSBSZW5kZXJpbmcgU3BlY2lmaWNhdGlvbiBPYmplY3QgSWRlbnRpZmllciAtLT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IkRIX0NEQV9SRU5ERVJJTkdfU1BFQ0lGSUNBVElPTl9PSUQiPjEuMi4zNi4xLjIwMDEuMTAwMS4xMDAuMTQ5PC94c2w6dmFyaWFibGU+DQogICAgDQogICAgPCEtLSBWZXJzaW9uIG9mIHRoZSBHZW5lcmljIENEQSBTdHlsZXNoZWV0IC0tPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iREhfR0VORVJJQ19DREFfU1RZTEVTSEVFVF9WRVJTSU9OIj4xLjMuMDwveHNsOnZhcmlhYmxlPg0KICAgIA0KICAgIDwhLS0gVmVyc2lvbiBub3RlIC0tPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iVkVSU0lPTl9OT1RFIj5IVE1MIEdlbmVyYXRlZCBieSB0aGUgQXVzdHJhbGlhbiBEaWdpdGFsIEhlYWx0aCBBZ2VuY3kgR2VuZXJpYyBDREEgU3R5bGVzaGVldCBWZXJzaW9uOiA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJERIX0dFTkVSSUNfQ0RBX1NUWUxFU0hFRVRfVkVSU0lPTiIvPiA8L3hzbDp2YXJpYWJsZT4NCg0KICAgIDwhLS0gRG8gbm90ZSBlZGl0IG5vdGUgLS0+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJET19OT1RfRURJVF9OT1RFIj5EbyBOT1QgZWRpdCB0aGlzIEhUTUwgZGlyZWN0bHk6IGl0IHdhcyBnZW5lcmF0ZWQgdmlhIGFuIFhTTFQgdHJhbnNmb3JtYXRpb24gZnJvbSBhIHNvdXJjZSBDREEgUmVsZWFzZSAyIFhNTCBkb2N1bWVudC48L3hzbDp2YXJpYWJsZT4NCg0KICAgIDwhLS0gQ0RBIFJlbmRlcmluZyBTcGVjaWZpY2F0aW9uIEluY29tcGF0aWJpbGl0eSBXYXJuaW5nIC0tPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iQ0RBX1JFTkRFUklOR19TUEVDSUZJQ0FUSU9OX0lOQ09NUEFUSUJJTElUWV9XQVJOSU5HIj5UaGUgZG9jdW1lbnQgeW91IGFyZSBhYm91dCB0byB2aWV3IGlzIG5ld2VyIHRoYW4gdGhpcyBzb2Z0d2FyZSB3YXMgZGVzaWduZWQgdG8gZGlzcGxheS4gVGhlIGRvY3VtZW50IG1heSBub3QgYmUgZnVsbHkgZGlzcGxheWVkIGFzIHRoZSBvcmlnaW5hbCBhdXRob3IgaW50ZW5kZWQuPC94c2w6dmFyaWFibGU+DQoNCiAgICA8IS0tIFByb3ZpZGVyIElkZW50aWZpZXIgQ1NTIENsYXNzZXMgLS0+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJQUk9WSURFUl9JTkRJVklEVUFMX0lERU5USUZJRVJfQ1NTX0NMQVNTIj5QUk9WSURFUl9JTkRJVklEVUFMX0lERU5USUZJRVI8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IlBST1ZJREVSX09SR0FOSVNBVElPTl9JREVOVElGSUVSX0NTU19DTEFTUyI+UFJPVklERVJfT1JHQU5JU0FUSU9OX0lERU5USUZJRVI8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IlBST1ZJREVSX0RFVklDRV9JREVOVElGSUVSX0NTU19DTEFTUyI+UFJPVklERVJfREVWSUNFX0lERU5USUZJRVI8L3hzbDp2YXJpYWJsZT4NCiAgICANCiAgICA8IS0tUHJvdmlkZXIgUXVhbGlmaWNhdGlvbnMgYW5kIE9jY3VwYXRpb24gQ1NTIENsYXNzZXMgLS0+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJQUk9WSURFUl9JTkRJVklEVUFMX1FVQUxJRklDQVRJT05TX0NTU19DTEFTUyI+UFJPVklERVJfSU5ESVZJRFVBTF9RVUFMSUZJQ0FUSU9OUzwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iUFJPVklERVJfSU5ESVZJRFVBTF9PQ0NVUEFUSU9OX0NTU19DTEFTUyI+UFJPVklERVJfSU5ESVZJRFVBTF9PQ0NVUEFUSU9OPC94c2w6dmFyaWFibGU+DQogICAgDQogICAgPCEtLSBWZXJzaW9uIG9mIHRoZSBDREEgUmVuZGVyaW5nIFNwZWNpZmljYXRpb24gc3VwcG9ydGVkIGJ5IHRoZSBzdHlsZXNoZWV0IC0tPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iREhfR0VORVJJQ19DREFfU1RZTEVTSEVFVF9TVVBQT1JURURfQ0RBX1JFTkRFUklOR19TUEVDSUZJQ0FUSU9OX1ZFUlNJT04iPjEuMDwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iREhfR0VORVJJQ19DREFfU1RZTEVTSEVFVF9TVVBQT1JURURfQ0RBX1JFTkRFUklOR19TUEVDSUZJQ0FUSU9OX01BSk9SX1ZFUlNJT04iIHNlbGVjdD0ic3Vic3RyaW5nLWJlZm9yZSgkREhfR0VORVJJQ19DREFfU1RZTEVTSEVFVF9TVVBQT1JURURfQ0RBX1JFTkRFUklOR19TUEVDSUZJQ0FUSU9OX1ZFUlNJT04sICcuJykiLz4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IkRIX0dFTkVSSUNfQ0RBX1NUWUxFU0hFRVRfU1VQUE9SVEVEX0NEQV9SRU5ERVJJTkdfU1BFQ0lGSUNBVElPTl9NSU5PUl9WRVJTSU9OIiBzZWxlY3Q9InN1YnN0cmluZy1hZnRlcigkREhfR0VORVJJQ19DREFfU1RZTEVTSEVFVF9TVVBQT1JURURfQ0RBX1JFTkRFUklOR19TUEVDSUZJQ0FUSU9OX1ZFUlNJT04sICcuJykiLz4NCg0KICAgIDwhLS0gQ0RBIEltcGxlbWVudGF0aW9uIEd1aWRlIE9iamVjdCBJZGVudGlmaWVycyAtLT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IkRIX0RJU0NIQVJHRV9TVU1NQVJZX0NEQV9JTVBMRU1FTlRBVElPTl9HVUlERV9PSUQiPjEuMi4zNi4xLjIwMDEuMTAwMS4xMDEuMTAwLjEwMDIuNDwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iREhfU0hBUkVEX0hFQUxUSF9TVU1NQVJZX0NEQV9JTVBMRU1FTlRBVElPTl9HVUlERV9PSUQiPjEuMi4zNi4xLjIwMDEuMTAwMS4xMDEuMTAwLjEwMDIuMTIwPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJESF9FX1JFRkVSUkFMX0NEQV9JTVBMRU1FTlRBVElPTl9HVUlERV9PSUQiPjEuMi4zNi4xLjIwMDEuMTAwMS4xMDEuMTAwLjEwMDIuMjwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iREhfU1BFQ0lBTElTVF9MRVRURVJfQ0RBX0lNUExFTUVOVEFUSU9OX0dVSURFX09JRCI+MS4yLjM2LjEuMjAwMS4xMDAxLjEwMS4xMDAuMTAwMi4xMzI8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IkRIX0VWRU5UX1NVTU1BUllfQ0RBX0lNUExFTUVOVEFUSU9OX0dVSURFX09JRCI+MS4yLjM2LjEuMjAwMS4xMDAxLjEwMS4xMDAuMTAwMi4xMzY8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IkRIX0VfUFJFU0NSSVBUSU9OX0NEQV9JTVBMRU1FTlRBVElPTl9HVUlERV9PSUQiPjEuMi4zNi4xLjIwMDEuMTAwMS4xMDEuMTAwLjEwMDIuNzQ8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IkRIX0RJU1BFTlNFX1JFQ09SRF9DREFfSU1QTEVNRU5UQVRJT05fR1VJREVfT0lEIj4xLjIuMzYuMS4yMDAxLjEwMDEuMTAxLjEwMC4xMDAyLjc1PC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJESF9QUkVTQ1JJUFRJT05fUkVRVUVTVF9DREFfSU1QTEVNRU5UQVRJT05fR1VJREVfT0lEIj4xLjIuMzYuMS4yMDAxLjEwMDEuMTAxLjEwMC4xMDAyLjEwMTwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iREhfQVVTVFJBTElBTl9DSElMREhPT0RfSU1NVU5JU0FUSU9OX1JFR0lTVEVSX1JFQ09SRF9DREFfSU1QTEVNRU5UQVRJT05fR1VJREVfT0lEIj4xLjIuMzYuMS4yMDAxLjEwMDEuMTAxLjEwMC4xMDAyLjE0NDwveHNsOnZhcmlhYmxlPg0KCTx4c2w6dmFyaWFibGUgbmFtZT0iREhfQVVTVFJBTElBTl9JTU1VTklTQVRJT05fUkVHSVNURVJfUkVDT1JEX0NEQV9JTVBMRU1FTlRBVElPTl9HVUlERV9PSUQiPjEuMi4zNi4xLjIwMDEuMTAwMS4xMDEuMTAwLjEwMDIuMjM0PC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJESF9BVVNUUkFMSUFOX09SR0FOX0RPTk9SX1JFR0lTVEVSX1JFQ09SRF9DREFfSU1QTEVNRU5UQVRJT05fR1VJREVfT0lEIj4xLjIuMzYuMS4yMDAxLjEwMDEuMTAxLjEwMC4xMDAyLjE0NzwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iREhfTUVESUNBUkVfRFZBX0JFTkVGSVRTX1JFUE9SVF9DREFfSU1QTEVNRU5UQVRJT05fR1VJREVfT0lEIj4xLjIuMzYuMS4yMDAxLjEwMDEuMTAxLjEwMC4xMDAyLjE0MDwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iREhfQURWQU5DRV9DQVJFX0RJUkVDVElWRV9DVVNUT0RJQU5fUkVDT1JEX0NEQV9JTVBMRU1FTlRBVElPTl9HVUlERV9PSUQiPjEuMi4zNi4xLjIwMDEuMTAwMS4xMDEuMTAwLjEwMDIuMTU2PC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJESF9QSEFSTUFDRVVUSUNBTF9CRU5FRklUU19SRVBPUlRfQ0RBX0lNUExFTUVOVEFUSU9OX0dVSURFX09JRCI+MS4yLjM2LjEuMjAwMS4xMDAxLjEwMS4xMDAuMTAwMi4xNDI8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IkRIX0NPTlNVTUVSX0VOVEVSRURfTk9URVNfQ0RBX0lNUExFTUVOVEFUSU9OX0dVSURFX09JRCI+MS4yLjM2LjEuMjAwMS4xMDAxLjEwMS4xMDAuMTAwMi4xNTE8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IkRIX0NPTlNVTUVSX0VOVEVSRURfSEVBTFRIX1NVTU1BUllfQ0RBX0lNUExFTUVOVEFUSU9OX0dVSURFX09JRCI+MS4yLjM2LjEuMjAwMS4xMDAxLjEwMS4xMDAuMTAwMi4xNTM8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IkRIX0NPTlNPTElEQVRFRF9WSUVXX0NEQV9JTVBMRU1FTlRBVElPTl9HVUlERV9PSUQiPjEuMi4zNi4xLjIwMDEuMTAwMS4xMDEuMTAwLjEwMDIuMTYwPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJESF9NRURJQ0FSRV9JTkZPUk1BVElPTl9WSUVXX0NEQV9JTVBMRU1FTlRBVElPTl9HVUlERV9PSUQiPjEuMi4zNi4xLjIwMDEuMTAwMS4xMDAuMTAwMi4xNzI8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IkRIX01IUl9QUkVTQ1JJUFRJT05fUkVDT1JEX0NEQV9JTVBMRU1FTlRBVElPTl9HVUlERV9PSUQiPjEuMi4zNi4xLjIwMDEuMTAwMS4xMDAuMTAwMi4xNzA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IkRIX01IUl9ESVNQRU5TRV9SRUNPUkRfQ0RBX0lNUExFTUVOVEFUSU9OX0dVSURFX09JRCI+MS4yLjM2LjEuMjAwMS4xMDAxLjEwMC4xMDAyLjE3MTwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iREhfTUhSX1BSRVNDUklQVElPTl9BTkRfRElTUEVOU0VfVklFV19DREFfSU1QTEVNRU5UQVRJT05fR1VJREVfT0lEIj4xLjIuMzYuMS4yMDAxLjEwMDEuMTAwLjEwMDIuMTc5PC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJESF9QQVRIT0xPR1lfUkVQT1JUX0NEQV9JTVBMRU1FTlRBVElPTl9HVUlERV9PSUQiPjEuMi4zNi4xLjIwMDEuMTAwMS4xMDAuMTAwMi4yMjA8L3hzbDp2YXJpYWJsZT4NCgk8eHNsOnZhcmlhYmxlIG5hbWU9IkRIX0RJQUdOT1NUSUNfSU1BR0lOR19SRVBPUlRfQ0RBX0lNUExFTUVOVEFUSU9OX0dVSURFX09JRCI+MS4yLjM2LjEuMjAwMS4xMDAxLjEwMC4xMDAyLjIyMjwveHNsOnZhcmlhYmxlPg0KCTx4c2w6dmFyaWFibGUgbmFtZT0iREhfQURWQU5DRV9DQVJFX0lORk9STUFUSU9OX0NEQV9JTVBMRU1FTlRBVElPTl9HVUlERV9PSUQiPjEuMi4zNi4xLjIwMDEuMTAwMS4xMDAuMTAwMi4yMjY8L3hzbDp2YXJpYWJsZT4NCgkNCgk8IS0tIENsaW5pY2FsIERvY3VtZW50IFR5cGUgTmFtZXMgLS0+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJESF9ESVNDSEFSR0VfU1VNTUFSWV9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiPkRpc2NoYXJnZSBTdW1tYXJ5PC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJESF9TSEFSRURfSEVBTFRIX1NVTU1BUllfQ0xJTklDQUxfRE9DVU1FTlRfVFlQRV9OQU1FIj5TaGFyZWQgSGVhbHRoIFN1bW1hcnk8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IkRIX0VfUkVGRVJSQUxfQ0xJTklDQUxfRE9DVU1FTlRfVFlQRV9OQU1FIj5lLVJlZmVycmFsPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJESF9TUEVDSUFMSVNUX0xFVFRFUl9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiPlNwZWNpYWxpc3QgTGV0dGVyPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJESF9FVkVOVF9TVU1NQVJZX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSI+RXZlbnQgU3VtbWFyeTwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iREhfRV9QUkVTQ1JJUFRJT05fQ0xJTklDQUxfRE9DVU1FTlRfVFlQRV9OQU1FIj5lLVByZXNjcmlwdGlvbjwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iREhfRElTUEVOU0VfUkVDT1JEX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSI+RGlzcGVuc2UgUmVjb3JkPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJESF9QUkVTQ1JJUFRJT05fUkVRVUVTVF9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiPlByZXNjcmlwdGlvbiBSZXF1ZXN0PC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJESF9BVVNUUkFMSUFOX0NISUxESE9PRF9JTU1VTklTQVRJT05fUkVHSVNURVJfUkVDT1JEX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSI+QXVzdHJhbGlhbiBDaGlsZGhvb2QgSW1tdW5pc2F0aW9uIFJlZ2lzdGVyPC94c2w6dmFyaWFibGU+DQoJPHhzbDp2YXJpYWJsZSBuYW1lPSJESF9BVVNUUkFMSUFOX0lNTVVOSVNBVElPTl9SRUdJU1RFUl9SRUNPUkRfQ0xJTklDQUxfRE9DVU1FTlRfVFlQRV9OQU1FIj5BdXN0cmFsaWFuIEltbXVuaXNhdGlvbiBSZWdpc3RlcjwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iREhfQVVTVFJBTElBTl9PUkdBTl9ET05PUl9SRUdJU1RFUl9SRUNPUkRfQ0xJTklDQUxfRE9DVU1FTlRfVFlQRV9OQU1FIj5BdXN0cmFsaWFuIE9yZ2FuIERvbm9yIFJlZ2lzdGVyIFJlY29yZDwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iREhfTUVESUNBUkVfRFZBX0JFTkVGSVRTX1JFUE9SVF9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiPk1lZGljYXJlL0RWQSBCZW5lZml0cyBSZXBvcnQ8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IkRIX0FEVkFOQ0VfQ0FSRV9ESVJFQ1RJVkVfQ1VTVE9ESUFOX1JFQ09SRF9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiPkFkdmFuY2UgQ2FyZSBEaXJlY3RpdmUgQ3VzdG9kaWFuIFJlY29yZDwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iREhfUEhBUk1BQ0VVVElDQUxfQkVORUZJVFNfUkVQT1JUX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSI+UGhhcm1hY2V1dGljYWwgQmVuZWZpdHMgUmVwb3J0PC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJESF9DT05TVU1FUl9FTlRFUkVEX05PVEVTX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSI+UGVyc29uYWwgSGVhbHRoIE5vdGU8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IkRIX0NPTlNVTUVSX0VOVEVSRURfSEVBTFRIX1NVTU1BUllfQ0xJTklDQUxfRE9DVU1FTlRfVFlQRV9OQU1FIj5QZXJzb25hbCBIZWFsdGggU3VtbWFyeTwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iREhfQ09OU09MSURBVEVEX1ZJRVdfQ0xJTklDQUxfRE9DVU1FTlRfVFlQRV9OQU1FIj5Db25zb2xpZGF0ZWQgVmlldzwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iREhfTUVESUNBUkVfSU5GT1JNQVRJT05fVklFV19DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiPk1lZGljYXJlIE92ZXJ2aWV3PC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJESF9NSFJfUFJFU0NSSVBUSU9OX1JFQ09SRF9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiPmVIZWFsdGggUHJlc2NyaXB0aW9uIFJlY29yZDwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iREhfTUhSX0RJU1BFTlNFX1JFQ09SRF9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiPmVIZWFsdGggRGlzcGVuc2UgUmVjb3JkPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJESF9NSFJfUFJFU0NSSVBUSU9OX0FORF9ESVNQRU5TRV9WSUVXX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSI+UHJlc2NyaXB0aW9uIGFuZCBEaXNwZW5zZSBWaWV3PC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJESF9QQVRIT0xPR1lfUkVQT1JUX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSI+UGF0aG9sb2d5IFJlcG9ydDwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iREhfRElBR05PU1RJQ19JTUFHSU5HX1JFUE9SVF9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiPkRpYWdub3N0aWMgSW1hZ2luZyBSZXBvcnQ8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IkRIX0FEVkFOQ0VfQ0FSRV9JTkZPUk1BVElPTl9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiPkFkdmFuY2UgQ2FyZSBJbmZvcm1hdGlvbjwveHNsOnZhcmlhYmxlPg0KCQ0KICAgIDwhLS0gUGFnZSB3aWR0aHMgYW5kIGhlaWdodHMgLS0+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJGVUxMX1ZJRVdQT1JUX1dJRFRIX1BYIj4xMDI0PC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJUT1BfTUFSR0lOX1dJRFRIX1BYIj40PC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJMRUZUX01BUkdJTl9XSURUSF9QWCI+MTA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IlJJR0hUX01BUkdJTl9XSURUSF9QWCI+MTA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IkNPTlRFTlRfU0NST0xMX0JBUl9XSURUSF9QWCI+MzA8L3hzbDp2YXJpYWJsZT4NCg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iRlVMTF9DT05URU5UX1dJRFRIX1BYIj4xMDAwPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJNSU5JTVVNX0NPTlRFTlRfV0lEVEhfUFgiPjc2MDwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iSEFMRl9DT05URU5UX1dJRFRIX1BYIiBzZWxlY3Q9IiRGVUxMX0NPTlRFTlRfV0lEVEhfUFggZGl2IDIiLz4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IkZJRlRIX0NPTlRFTlRfV0lEVEhfUFgiIHNlbGVjdD0iJEZVTExfQ09OVEVOVF9XSURUSF9QWCBkaXYgNSIvPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iUVVBUlRFUl9DT05URU5UX1dJRFRIX1BYIiBzZWxlY3Q9IiRGVUxMX0NPTlRFTlRfV0lEVEhfUFggZGl2IDQiLz4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IkVJR0hUSF9DT05URU5UX1dJRFRIX1BYIiBzZWxlY3Q9IiRGVUxMX0NPTlRFTlRfV0lEVEhfUFggZGl2IDgiLz4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IlRFTlRIX0NPTlRFTlRfV0lEVEhfUFgiIHNlbGVjdD0iJEZVTExfQ09OVEVOVF9XSURUSF9QWCBkaXYgMTAiLz4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IlRIUkVFX1FVQVJURVJfQ09OVEVOVF9XSURUSF9QWCIgc2VsZWN0PSIoJEZVTExfQ09OVEVOVF9XSURUSF9QWCBkaXYgNCkgKiAzIi8+DQogICAgDQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJGVUxMX0NPTlRFTlRfV0lEVEhfUENUIj4xMDA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IkhBTEZfQ09OVEVOVF9XSURUSF9QQ1QiPjUwPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJGSUZUSF9DT05URU5UX1dJRFRIX1BDVCI+MjA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IlFVQVJURVJfQ09OVEVOVF9XSURUSF9QQ1QiPjI1PC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJFSUdIVEhfQ09OVEVOVF9XSURUSF9QQ1QiPjEyLjU8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IlRFTlRIX0NPTlRFTlRfV0lEVEhfUENUIj4xMDwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iVEhSRUVfUVVBUlRFUl9DT05URU5UX1dJRFRIX1BDVCI+NzU8L3hzbDp2YXJpYWJsZT4NCg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iREVUQUlMU19IQUxGX1RBQkxFX1RIX1dJRFRIX1BDVCI+MzU8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IkRFVEFJTFNfSEFMRl9UQUJMRV9URF9XSURUSF9QQ1QiIHNlbGVjdD0iMTAwIC0gJERFVEFJTFNfSEFMRl9UQUJMRV9USF9XSURUSF9QQ1QiLz4NCiAgICANCg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iQUtBX1NUUklORyI+YS5rLmEuIDwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iU0VDVElPTl9USVRMRV9OQVZJR0FUSU9OX1NFUEFSQVRPUiIgc2VsZWN0PSInID4gJyIvPg0KICAgIA0KICAgIDwhLS0gQ29sb3VycyAtLT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IkdFTkVSQUxfVEFCTEVfSEVBREVSX0NFTExfQkFDS0dST1VORF9DT0xPVVIiPiNGRkZGRkY8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IkdFTkVSQUxfVEFCTEVfSEVBREVSX0NFTExfQk9SREVSX0NPTE9VUiI+I0VFRUVFRTwveHNsOnZhcmlhYmxlPg0KICAgIA0KICAgIDwhLS09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PS0tPg0KICAgIDwhLS0gW0VORF0gQ09OU1RBTlRTIC0tPg0KDQoNCg0KDQogICAgPCEtLSBHTE9CQUwgVkFSSUFCTEVTIC0tPg0KICAgIDwhLS09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PS0tPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iY2RhRG9jdW1lbnRDZGFSZW5kZXJpbmdTcGVjaWZpY2F0aW9uVmVyc2lvbiIgc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOnRlbXBsYXRlSWRbQHJvb3Q9JzEuMi4zNi4xLjIwMDEuMTAwMS4xMDAuMTQ5J10vQGV4dGVuc2lvbiIvPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iY2RhRG9jdW1lbnRDZGFSZW5kZXJpbmdTcGVjaWZpY2F0aW9uTWFqb3JWZXJzaW9uTnVtYmVyIiBzZWxlY3Q9InN1YnN0cmluZy1iZWZvcmUoJGNkYURvY3VtZW50Q2RhUmVuZGVyaW5nU3BlY2lmaWNhdGlvblZlcnNpb24sICcuJykiPjwveHNsOnZhcmlhYmxlPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iY2RhRG9jdW1lbnRDZGFSZW5kZXJpbmdTcGVjaWZpY2F0aW9uTWlub3JWZXJzaW9uTnVtYmVyIiBzZWxlY3Q9InN1YnN0cmluZy1hZnRlcigkY2RhRG9jdW1lbnRDZGFSZW5kZXJpbmdTcGVjaWZpY2F0aW9uVmVyc2lvbiwgJy4nKSI+PC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJpc1N0eWxlc2hlZXRDb21wYXRpYmxlV2l0aFJlcXVpcmVkUmVuZGVyaW5nU3BlY2lmaWNhdGlvblZlcnNpb24iPg0KICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJzdHJpbmctbGVuZ3RoKCRjZGFEb2N1bWVudENkYVJlbmRlcmluZ1NwZWNpZmljYXRpb25WZXJzaW9uKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJGNkYURvY3VtZW50Q2RhUmVuZGVyaW5nU3BlY2lmaWNhdGlvbk1ham9yVmVyc2lvbk51bWJlciAmZ3Q7ICRESF9HRU5FUklDX0NEQV9TVFlMRVNIRUVUX1NVUFBPUlRFRF9DREFfUkVOREVSSU5HX1NQRUNJRklDQVRJT05fTUFKT1JfVkVSU0lPTiI+ZmFsc2U8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkY2RhRG9jdW1lbnRDZGFSZW5kZXJpbmdTcGVjaWZpY2F0aW9uTWFqb3JWZXJzaW9uTnVtYmVyID0gJERIX0dFTkVSSUNfQ0RBX1NUWUxFU0hFRVRfU1VQUE9SVEVEX0NEQV9SRU5ERVJJTkdfU1BFQ0lGSUNBVElPTl9NQUpPUl9WRVJTSU9OIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJGNkYURvY3VtZW50Q2RhUmVuZGVyaW5nU3BlY2lmaWNhdGlvbk1pbm9yVmVyc2lvbk51bWJlciAmZ3Q7ICRESF9HRU5FUklDX0NEQV9TVFlMRVNIRUVUX1NVUFBPUlRFRF9DREFfUkVOREVSSU5HX1NQRUNJRklDQVRJT05fTUlOT1JfVkVSU0lPTiI+ZmFsc2U8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+dHJ1ZTwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+dHJ1ZTwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOm90aGVyd2lzZT50cnVlPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgDQogICAgPCEtLSBQYXRpZW50IERldGFpbHMgLS0+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJwYXRpZW50SUhJIj4NCiAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0idHJpbSI+DQogICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJzdHJpbmciPg0KICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImZvcm1hdEhJIj4NCiAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iaGlWYWx1ZSIgc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOnJlY29yZFRhcmdldC9jZGE6cGF0aWVudFJvbGUvY2RhOnBhdGllbnQvZXh0OmFzRW50aXR5SWRlbnRpZmllci9leHQ6aWRbQGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9J0lISScgb3Igc3Vic3RyaW5nKEByb290LDEsMjcpPScxLjIuMzYuMS4yMDAxLjEwMDMuMC44MDAzNjAnXS9Acm9vdCIvPg0KICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgIDwveHNsOndpdGgtcGFyYW0+DQogICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InBhdGllbnRNUk4iPg0KICAgICAgICA8eHNsOmlmIHRlc3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6cmVjb3JkVGFyZ2V0L2NkYTpwYXRpZW50Um9sZS9jZGE6cGF0aWVudC9leHQ6YXNFbnRpdHlJZGVudGlmaWVyW2V4dDpjb2RlL0Bjb2RlPSdNUiddL2V4dDppZC9AZXh0ZW5zaW9uIGFuZCANCiAgICAgICAgICAgIG5vdCAoL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpyZWNvcmRUYXJnZXQvY2RhOnBhdGllbnRSb2xlL2NkYTpwYXRpZW50L2V4dDphc0VudGl0eUlkZW50aWZpZXJbZXh0OmNvZGUvQGNvZGU9J01SJ10vZXh0OmlkL0BkaXNwbGF5YWJsZT0nZmFsc2UnKSI+DQogICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpyZWNvcmRUYXJnZXQvY2RhOnBhdGllbnRSb2xlL2NkYTpwYXRpZW50L2V4dDphc0VudGl0eUlkZW50aWZpZXJbZXh0OmNvZGUvQGNvZGU9J01SJ10vZXh0OmlkL0BleHRlbnNpb24iLz4NCiAgICAgICAgPC94c2w6aWY+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgDQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJwYXRpZW50RmFtaWx5TmFtZSI+DQogICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJ0b1VwcGVyQ2FzZSI+DQogICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZGF0YSIgIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpyZWNvcmRUYXJnZXQvY2RhOnBhdGllbnRSb2xlL2NkYTpwYXRpZW50L2NkYTpuYW1lWzFdL2NkYTpmYW1pbHkiLz4gDQogICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJwYXRpZW50R2l2ZW5OYW1lIiBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6cmVjb3JkVGFyZ2V0L2NkYTpwYXRpZW50Um9sZS9jZGE6cGF0aWVudC9jZGE6bmFtZVsxXS9jZGE6Z2l2ZW4iLz4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InBhdGllbnRQcmVmaXgiIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpyZWNvcmRUYXJnZXQvY2RhOnBhdGllbnRSb2xlL2NkYTpwYXRpZW50L2NkYTpuYW1lWzFdL2NkYTpwcmVmaXgiLz4gICAgDQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJwYXRpZW50RmFtaWx5TmFtZU51bGxGbGF2b3IiPg0KICAgICAgICA8eHNsOmlmIHRlc3Q9InN0cmluZy1sZW5ndGgoL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpyZWNvcmRUYXJnZXQvY2RhOnBhdGllbnRSb2xlL2NkYTpwYXRpZW50L2NkYTpuYW1lWzFdL2NkYTpmYW1pbHkvQG51bGxGbGF2b3IpICZndDsgMCI+DQogICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0ic2hvdy1udWxsLWZsYXZvci12YWx1ZSI+DQogICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9Im51bGxGbGF2b3JWYWx1ZSI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOnJlY29yZFRhcmdldC9jZGE6cGF0aWVudFJvbGUvY2RhOnBhdGllbnQvY2RhOm5hbWVbMV0vY2RhOmZhbWlseS9AbnVsbEZsYXZvciIvPg0KICAgICAgICAgICAgICAgIDwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPiAgICAgICAgICANCiAgICAgICAgPC94c2w6aWY+DQogICAgPC94c2w6dmFyaWFibGU+DQoNCiAgICANCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InBhdGllbnROYW1lIj4NCiAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InNob3ctcGF0aWVudC1uYW1lIj4NCiAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJuYW1lIg0KICAgICAgICAgICAgICAgIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpyZWNvcmRUYXJnZXQvY2RhOnBhdGllbnRSb2xlL2NkYTpwYXRpZW50L2NkYTpuYW1lWzFdIi8+DQogICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJwYXRpZW50RGF0ZU9mQmlydGgiPg0KICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0ic2hvdy1kYXRlIj4NCiAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJkYXRldGltZSINCiAgICAgICAgICAgICAgICBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6cmVjb3JkVGFyZ2V0L2NkYTpwYXRpZW50Um9sZS9jZGE6cGF0aWVudC9jZGE6YmlydGhUaW1lIi8+DQogICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJwYXRpZW50RGVjZWFzZWRTdGF0dXMiPg0KICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOnJlY29yZFRhcmdldC9jZGE6cGF0aWVudFJvbGUvY2RhOnBhdGllbnQvZXh0OmRlY2Vhc2VkSW5kIGFuZA0KICAgICAgICAgICAgICAgIC9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6cmVjb3JkVGFyZ2V0L2NkYTpwYXRpZW50Um9sZS9jZGE6cGF0aWVudC9leHQ6ZGVjZWFzZWRJbmQvQHZhbHVlIGFuZA0KICAgICAgICAgICAgICAgIC9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6cmVjb3JkVGFyZ2V0L2NkYTpwYXRpZW50Um9sZS9jZGE6cGF0aWVudC9leHQ6ZGVjZWFzZWRJbmQvQHZhbHVlPSd0cnVlJyI+dHJ1ZTwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOm90aGVyd2lzZT5mYWxzZTwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgIDwveHNsOnZhcmlhYmxlPg0KICAgIA0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0icGF0aWVudENvZGVkQWdlIj4NCiAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldENvZGVkQWdlIj4NCiAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJhZ2VWYWx1ZSI+DQogICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJzdHJpbmctbGVuZ3RoKC9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6Y29tcG9uZW50L2NkYTpzdHJ1Y3R1cmVkQm9keS9jZGE6Y29tcG9uZW50L2NkYTpzZWN0aW9uL2NkYTplbnRyeS9jZGE6b2JzZXJ2YXRpb25bY2RhOmNvZGUvQGNvZGU9JzEwMy4yMDEwOScgYW5kIGNkYTpjb2RlL0Bjb2RlU3lzdGVtPScxLjIuMzYuMS4yMDAxLjEwMDEuMTAxJ10vY2RhOnZhbHVlL0B2YWx1ZSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudC9jZGE6c3RydWN0dXJlZEJvZHkvY2RhOmNvbXBvbmVudC9jZGE6c2VjdGlvbi9jZGE6ZW50cnkvY2RhOm9ic2VydmF0aW9uW2NkYTpjb2RlL0Bjb2RlPScxMDMuMjAxMDknIGFuZCBjZGE6Y29kZS9AY29kZVN5c3RlbT0nMS4yLjM2LjEuMjAwMS4xMDAxLjEwMSddL2NkYTp2YWx1ZS9AdmFsdWUiIC8+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlLz4NCiAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICA8L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImFnZVVjdW1Vbml0Q29kZSI+DQogICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJzdHJpbmctbGVuZ3RoKC9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6Y29tcG9uZW50L2NkYTpzdHJ1Y3R1cmVkQm9keS9jZGE6Y29tcG9uZW50L2NkYTpzZWN0aW9uL2NkYTplbnRyeS9jZGE6b2JzZXJ2YXRpb25bY2RhOmNvZGUvQGNvZGU9JzEwMy4yMDEwOScgYW5kIGNkYTpjb2RlL0Bjb2RlU3lzdGVtPScxLjIuMzYuMS4yMDAxLjEwMDEuMTAxJ10vY2RhOnZhbHVlL0B1bml0KSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6Y29tcG9uZW50L2NkYTpzdHJ1Y3R1cmVkQm9keS9jZGE6Y29tcG9uZW50L2NkYTpzZWN0aW9uL2NkYTplbnRyeS9jZGE6b2JzZXJ2YXRpb25bY2RhOmNvZGUvQGNvZGU9JzEwMy4yMDEwOScgYW5kIGNkYTpjb2RlL0Bjb2RlU3lzdGVtPScxLjIuMzYuMS4yMDAxLjEwMDEuMTAxJ10vY2RhOnZhbHVlL0B1bml0IiAvPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZS8+DQogICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgPC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICA8L3hzbDp2YXJpYWJsZT4gICAgDQogICAgDQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJwYXRpZW50QWdlIj4NCiAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJHBhdGllbnREZWNlYXNlZFN0YXR1cz0ndHJ1ZSciPkRFQ0VBU0VEPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJzdHJpbmctbGVuZ3RoKCRwYXRpZW50Q29kZWRBZ2UpICZndDsgMCI+DQogICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRwYXRpZW50Q29kZWRBZ2UiLz4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iKChzdHJpbmctbGVuZ3RoKC9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6cmVjb3JkVGFyZ2V0L2NkYTpwYXRpZW50Um9sZS9jZGE6cGF0aWVudC9jZGE6YmlydGhUaW1lL0B2YWx1ZSkgJmd0OyA3KSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoc3RyaW5nLWxlbmd0aCgvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudE9mL2NkYTplbmNvbXBhc3NpbmdFbmNvdW50ZXIvY2RhOmVmZmVjdGl2ZVRpbWUvY2RhOmhpZ2gvQHZhbHVlKSAmZ3Q7IDcpIG9yDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHN0cmluZy1sZW5ndGgoL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTplZmZlY3RpdmVUaW1lL0B2YWx1ZSkgJmd0OyA3KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIj4NCiAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iY2FsY3VsYXRlQWdlIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImJpcnRoRGF0ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpyZWNvcmRUYXJnZXQvY2RhOnBhdGllbnRSb2xlL2NkYTpwYXRpZW50L2NkYTpiaXJ0aFRpbWUvQHZhbHVlIi8+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJkb2NEYXRlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJzdHJpbmctbGVuZ3RoKC9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6Y29tcG9uZW50T2YvY2RhOmVuY29tcGFzc2luZ0VuY291bnRlci9jZGE6ZWZmZWN0aXZlVGltZS9jZGE6aGlnaC9AdmFsdWUpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJzdWJzdHJpbmcoL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpjb21wb25lbnRPZi9jZGE6ZW5jb21wYXNzaW5nRW5jb3VudGVyL2NkYTplZmZlY3RpdmVUaW1lL2NkYTpoaWdoL0B2YWx1ZSwxLDgpIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJzdWJzdHJpbmcoL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTplZmZlY3RpdmVUaW1lL0B2YWx1ZSwxLDgpIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPkFHRSBVTktOT1dOPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgPC94c2w6dmFyaWFibGU+ICAgIA0KICAgIA0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0icGF0aWVudFNleCI+DQogICAgICAgIDx4c2w6aWYgdGVzdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpyZWNvcmRUYXJnZXQvY2RhOnBhdGllbnRSb2xlL2NkYTpwYXRpZW50L2NkYTphZG1pbmlzdHJhdGl2ZUdlbmRlckNvZGUgYW5kDQogICAgICAgICAgICAgICAgICAgICAgL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpyZWNvcmRUYXJnZXQvY2RhOnBhdGllbnRSb2xlL2NkYTpwYXRpZW50L2NkYTphZG1pbmlzdHJhdGl2ZUdlbmRlckNvZGUvQGNvZGUgYW5kDQogICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOnJlY29yZFRhcmdldC9jZGE6cGF0aWVudFJvbGUvY2RhOnBhdGllbnQvY2RhOmFkbWluaXN0cmF0aXZlR2VuZGVyQ29kZS9AY29kZSkgJmd0OyAwIGFuZA0KICAgICAgICAgICAgICAgICAgICAgIC9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6cmVjb3JkVGFyZ2V0L2NkYTpwYXRpZW50Um9sZS9jZGE6cGF0aWVudC9jZGE6YWRtaW5pc3RyYXRpdmVHZW5kZXJDb2RlL0Bjb2RlU3lzdGVtPScyLjE2Ljg0MC4xLjExMzg4My4xMy42OCciPg0KICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6cmVjb3JkVGFyZ2V0L2NkYTpwYXRpZW50Um9sZS9jZGE6cGF0aWVudC9jZGE6YWRtaW5pc3RyYXRpdmVHZW5kZXJDb2RlL0Bjb2RlID0gJ00nIj5NYWxlPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpyZWNvcmRUYXJnZXQvY2RhOnBhdGllbnRSb2xlL2NkYTpwYXRpZW50L2NkYTphZG1pbmlzdHJhdGl2ZUdlbmRlckNvZGUvQGNvZGUgPSAnRiciPkZlbWFsZTwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6cmVjb3JkVGFyZ2V0L2NkYTpwYXRpZW50Um9sZS9jZGE6cGF0aWVudC9jZGE6YWRtaW5pc3RyYXRpdmVHZW5kZXJDb2RlL0Bjb2RlID0gJ0knIj5JbnRlcnNleCBvciBJbmRldGVybWluYXRlPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpyZWNvcmRUYXJnZXQvY2RhOnBhdGllbnRSb2xlL2NkYTpwYXRpZW50L2NkYTphZG1pbmlzdHJhdGl2ZUdlbmRlckNvZGUvQGNvZGUgPSAnTiciPk5vdCBTdGF0ZWQvSW5hZGVxdWF0ZWx5IERlc2NyaWJlZDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+VW5rbm93bjwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgPC94c2w6aWY+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgIA0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0icGF0aWVudEluZGlnZW5vdXNTdGF0dXMiPg0KICAgICAgICA8eHNsOmlmIHRlc3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6cmVjb3JkVGFyZ2V0L2NkYTpwYXRpZW50Um9sZS9jZGE6cGF0aWVudC9jZGE6ZXRobmljR3JvdXBDb2RlL0Bjb2RlIGFuZA0KICAgICAgICAgICAgICAgICAgICAgIChzdHJpbmctbGVuZ3RoKC9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6cmVjb3JkVGFyZ2V0L2NkYTpwYXRpZW50Um9sZS9jZGE6cGF0aWVudC9jZGE6ZXRobmljR3JvdXBDb2RlL0Bjb2RlKSAmZ3Q7IDApIGFuZA0KICAgICAgICAgICAgICAgICAgICAgIC9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6cmVjb3JkVGFyZ2V0L2NkYTpwYXRpZW50Um9sZS9jZGE6cGF0aWVudC9jZGE6ZXRobmljR3JvdXBDb2RlL0Bjb2RlU3lzdGVtPScyLjE2Ljg0MC4xLjExMzg4My4zLjg3OS4yOTEwMzYnIGFuZA0KICAgICAgICAgICAgICAgICAgICAgIC9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6cmVjb3JkVGFyZ2V0L2NkYTpwYXRpZW50Um9sZS9jZGE6cGF0aWVudC9jZGE6ZXRobmljR3JvdXBDb2RlL0BkaXNwbGF5TmFtZSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAoc3RyaW5nLWxlbmd0aCgvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOnJlY29yZFRhcmdldC9jZGE6cGF0aWVudFJvbGUvY2RhOnBhdGllbnQvY2RhOmV0aG5pY0dyb3VwQ29kZS9AZGlzcGxheU5hbWUpICZndDsgMCkiPg0KICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6cmVjb3JkVGFyZ2V0L2NkYTpwYXRpZW50Um9sZS9jZGE6cGF0aWVudC9jZGE6ZXRobmljR3JvdXBDb2RlL0BkaXNwbGF5TmFtZSIvPg0KICAgICAgICA8L3hzbDppZj4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICANCiAgICA8IS0tIERpc2NoYXJnZSBEZXRhaWxzIC0tPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZGlzY2hhcmdlTG9jYXRpb24iPg0KICAgICAgICA8eHNsOmlmIHRlc3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6cGFydGljaXBhbnRbQHR5cGVDb2RlPSdPUkcnIGFuZCBjZGE6YXNzb2NpYXRlZEVudGl0eS9AY2xhc3NDb2RlPSdTRExPQyddL2NkYTphc3NvY2lhdGVkRW50aXR5L2NkYTpjb2RlL2NkYTpvcmlnaW5hbFRleHQgYW5kDQogICAgICAgICAgICBzdHJpbmctbGVuZ3RoKC9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6cGFydGljaXBhbnRbQHR5cGVDb2RlPSdPUkcnIGFuZCBjZGE6YXNzb2NpYXRlZEVudGl0eS9AY2xhc3NDb2RlPSdTRExPQyddL2NkYTphc3NvY2lhdGVkRW50aXR5L2NkYTpjb2RlL2NkYTpvcmlnaW5hbFRleHQpICZndDsgMCI+DQogICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpwYXJ0aWNpcGFudFtAdHlwZUNvZGU9J09SRycgYW5kIGNkYTphc3NvY2lhdGVkRW50aXR5L0BjbGFzc0NvZGU9J1NETE9DJ10vY2RhOmFzc29jaWF0ZWRFbnRpdHkvY2RhOmNvZGUvY2RhOm9yaWdpbmFsVGV4dCIvPg0KICAgICAgICA8L3hzbDppZj4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICANCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InNlcGFyYXRpb25Nb2RlIiBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6Y29tcG9uZW50T2YvY2RhOmVuY29tcGFzc2luZ0VuY291bnRlci9jZGE6ZGlzY2hhcmdlRGlzcG9zaXRpb25Db2RlL0BkaXNwbGF5TmFtZSIvPg0KICAgIA0KICAgIDwhLS0gQ0RBIERvY3VtZW50IFR5cGUgLS0+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJjZGFEb2N1bWVudFR5cGUiPg0KICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOnRlbXBsYXRlSWRbQHJvb3Q9JERIX0RJU0NIQVJHRV9TVU1NQVJZX0NEQV9JTVBMRU1FTlRBVElPTl9HVUlERV9PSURdIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJERIX0RJU0NIQVJHRV9TVU1NQVJZX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSIvPjwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTp0ZW1wbGF0ZUlkW0Byb290PSRESF9TSEFSRURfSEVBTFRIX1NVTU1BUllfQ0RBX0lNUExFTUVOVEFUSU9OX0dVSURFX09JRF0iPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkREhfU0hBUkVEX0hFQUxUSF9TVU1NQVJZX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSIvPjwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTp0ZW1wbGF0ZUlkW0Byb290PSRESF9FX1JFRkVSUkFMX0NEQV9JTVBMRU1FTlRBVElPTl9HVUlERV9PSURdIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJERIX0VfUkVGRVJSQUxfQ0xJTklDQUxfRE9DVU1FTlRfVFlQRV9OQU1FIi8+PC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOnRlbXBsYXRlSWRbQHJvb3Q9JERIX1NQRUNJQUxJU1RfTEVUVEVSX0NEQV9JTVBMRU1FTlRBVElPTl9HVUlERV9PSURdIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJERIX1NQRUNJQUxJU1RfTEVUVEVSX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSIvPjwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTp0ZW1wbGF0ZUlkW0Byb290PSRESF9FVkVOVF9TVU1NQVJZX0NEQV9JTVBMRU1FTlRBVElPTl9HVUlERV9PSURdIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJERIX0VWRU5UX1NVTU1BUllfQ0xJTklDQUxfRE9DVU1FTlRfVFlQRV9OQU1FIi8+PC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOnRlbXBsYXRlSWRbQHJvb3Q9JERIX0VfUFJFU0NSSVBUSU9OX0NEQV9JTVBMRU1FTlRBVElPTl9HVUlERV9PSURdIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJERIX0VfUFJFU0NSSVBUSU9OX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSIvPjwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTp0ZW1wbGF0ZUlkW0Byb290PSRESF9ESVNQRU5TRV9SRUNPUkRfQ0RBX0lNUExFTUVOVEFUSU9OX0dVSURFX09JRF0iPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkREhfRElTUEVOU0VfUkVDT1JEX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSIvPjwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTp0ZW1wbGF0ZUlkW0Byb290PSRESF9QUkVTQ1JJUFRJT05fUkVRVUVTVF9DREFfSU1QTEVNRU5UQVRJT05fR1VJREVfT0lEXSI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRESF9QUkVTQ1JJUFRJT05fUkVRVUVTVF9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiLz48L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6dGVtcGxhdGVJZFtAcm9vdD0kREhfQVVTVFJBTElBTl9DSElMREhPT0RfSU1NVU5JU0FUSU9OX1JFR0lTVEVSX1JFQ09SRF9DREFfSU1QTEVNRU5UQVRJT05fR1VJREVfT0lEXSI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRESF9BVVNUUkFMSUFOX0NISUxESE9PRF9JTU1VTklTQVRJT05fUkVHSVNURVJfUkVDT1JEX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSIvPjwveHNsOndoZW4+DQoJCQk8eHNsOndoZW4gdGVzdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTp0ZW1wbGF0ZUlkW0Byb290PSRESF9BVVNUUkFMSUFOX0lNTVVOSVNBVElPTl9SRUdJU1RFUl9SRUNPUkRfQ0RBX0lNUExFTUVOVEFUSU9OX0dVSURFX09JRF0iPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkREhfQVVTVFJBTElBTl9JTU1VTklTQVRJT05fUkVHSVNURVJfUkVDT1JEX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSIvPjwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTp0ZW1wbGF0ZUlkW0Byb290PSRESF9BVVNUUkFMSUFOX09SR0FOX0RPTk9SX1JFR0lTVEVSX1JFQ09SRF9DREFfSU1QTEVNRU5UQVRJT05fR1VJREVfT0lEXSI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRESF9BVVNUUkFMSUFOX09SR0FOX0RPTk9SX1JFR0lTVEVSX1JFQ09SRF9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiLz48L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6dGVtcGxhdGVJZFtAcm9vdD0kREhfTUVESUNBUkVfRFZBX0JFTkVGSVRTX1JFUE9SVF9DREFfSU1QTEVNRU5UQVRJT05fR1VJREVfT0lEXSI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRESF9NRURJQ0FSRV9EVkFfQkVORUZJVFNfUkVQT1JUX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSIvPjwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTp0ZW1wbGF0ZUlkW0Byb290PSRESF9QSEFSTUFDRVVUSUNBTF9CRU5FRklUU19SRVBPUlRfQ0RBX0lNUExFTUVOVEFUSU9OX0dVSURFX09JRF0iPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkREhfUEhBUk1BQ0VVVElDQUxfQkVORUZJVFNfUkVQT1JUX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSIvPjwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTp0ZW1wbGF0ZUlkW0Byb290PSRESF9BRFZBTkNFX0NBUkVfRElSRUNUSVZFX0NVU1RPRElBTl9SRUNPUkRfQ0RBX0lNUExFTUVOVEFUSU9OX0dVSURFX09JRF0iPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkREhfQURWQU5DRV9DQVJFX0RJUkVDVElWRV9DVVNUT0RJQU5fUkVDT1JEX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSIvPjwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTp0ZW1wbGF0ZUlkW0Byb290PSRESF9DT05TVU1FUl9FTlRFUkVEX05PVEVTX0NEQV9JTVBMRU1FTlRBVElPTl9HVUlERV9PSURdIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJERIX0NPTlNVTUVSX0VOVEVSRURfTk9URVNfQ0xJTklDQUxfRE9DVU1FTlRfVFlQRV9OQU1FIi8+PC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOnRlbXBsYXRlSWRbQHJvb3Q9JERIX0NPTlNVTUVSX0VOVEVSRURfSEVBTFRIX1NVTU1BUllfQ0RBX0lNUExFTUVOVEFUSU9OX0dVSURFX09JRF0iPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkREhfQ09OU1VNRVJfRU5URVJFRF9IRUFMVEhfU1VNTUFSWV9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiLz48L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6dGVtcGxhdGVJZFtAcm9vdD0kREhfQ09OU09MSURBVEVEX1ZJRVdfQ0RBX0lNUExFTUVOVEFUSU9OX0dVSURFX09JRF0iPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkREhfQ09OU09MSURBVEVEX1ZJRVdfQ0xJTklDQUxfRE9DVU1FTlRfVFlQRV9OQU1FIi8+PC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOnRlbXBsYXRlSWRbQHJvb3Q9JERIX01FRElDQVJFX0lORk9STUFUSU9OX1ZJRVdfQ0RBX0lNUExFTUVOVEFUSU9OX0dVSURFX09JRF0iPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkREhfTUVESUNBUkVfSU5GT1JNQVRJT05fVklFV19DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiLz48L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6dGVtcGxhdGVJZFtAcm9vdD0kREhfTUhSX1BSRVNDUklQVElPTl9SRUNPUkRfQ0RBX0lNUExFTUVOVEFUSU9OX0dVSURFX09JRF0iPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkREhfTUhSX1BSRVNDUklQVElPTl9SRUNPUkRfQ0xJTklDQUxfRE9DVU1FTlRfVFlQRV9OQU1FIi8+PC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOnRlbXBsYXRlSWRbQHJvb3Q9JERIX01IUl9ESVNQRU5TRV9SRUNPUkRfQ0RBX0lNUExFTUVOVEFUSU9OX0dVSURFX09JRF0iPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkREhfTUhSX0RJU1BFTlNFX1JFQ09SRF9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiLz48L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6dGVtcGxhdGVJZFtAcm9vdD0kREhfTUhSX1BSRVNDUklQVElPTl9BTkRfRElTUEVOU0VfVklFV19DREFfSU1QTEVNRU5UQVRJT05fR1VJREVfT0lEXSI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRESF9NSFJfUFJFU0NSSVBUSU9OX0FORF9ESVNQRU5TRV9WSUVXX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSIvPjwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTp0ZW1wbGF0ZUlkW0Byb290PSRESF9QQVRIT0xPR1lfUkVQT1JUX0NEQV9JTVBMRU1FTlRBVElPTl9HVUlERV9PSURdIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJERIX1BBVEhPTE9HWV9SRVBPUlRfQ0xJTklDQUxfRE9DVU1FTlRfVFlQRV9OQU1FIi8+PC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOnRlbXBsYXRlSWRbQHJvb3Q9JERIX0RJQUdOT1NUSUNfSU1BR0lOR19SRVBPUlRfQ0RBX0lNUExFTUVOVEFUSU9OX0dVSURFX09JRF0iPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkREhfRElBR05PU1RJQ19JTUFHSU5HX1JFUE9SVF9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiLz48L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6dGVtcGxhdGVJZFtAcm9vdD0kREhfQURWQU5DRV9DQVJFX0lORk9STUFUSU9OX0NEQV9JTVBMRU1FTlRBVElPTl9HVUlERV9PSURdIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJERIX0FEVkFOQ0VfQ0FSRV9JTkZPUk1BVElPTl9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiLz48L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6Y29kZS9AZGlzcGxheU5hbWUgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvZGUvQGRpc3BsYXlOYW1lKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvZGUvQGRpc3BsYXlOYW1lIi8+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgPHhzbDp0ZXh0PkNsaW5pY2FsIERvY3VtZW50PC94c2w6dGV4dD4NCiAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgIDwveHNsOnZhcmlhYmxlPg0KICAgIA0KICAgIDwhLS0gQ0RBIERvY3VtZW50IFRpdGxlIC0tPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iY2RhRG9jdW1lbnRUaXRsZSI+DQogICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6dGl0bGUgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOnRpdGxlKSAgJmd0Oz0gMSI+DQogICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6dGl0bGUiLz4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGNkYURvY3VtZW50VHlwZSIvPg0KICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgPC94c2w6dmFyaWFibGU+DQoNCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9IkJBTk5FUl9IRUlHSFRfUFgiIHNlbGVjdD0iOTAgKyAoY2VpbGluZyhzdHJpbmctbGVuZ3RoKCRjZGFEb2N1bWVudFRpdGxlKSBkaXYgOTApICogMjApIi8+DQogICAgDQogICAgPCEtLSBDREEgRG9jdW1lbnQgQ3JlYXRpb24gRGF0ZSBUaW1lIC0tPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iY2RhRG9jdW1lbnRDcmVhdGlvblRpbWUiPg0KICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0ic2hvdy10aW1lIj4NCiAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJkYXRldGltZSIgc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmVmZmVjdGl2ZVRpbWUiLz4NCiAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICANCiAgICA8IS0tIENEQSBEb2N1bWVudCBDcmVhdGlvbiBEYXRlICAtLT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImNkYURvY3VtZW50Q3JlYXRpb25EYXRlIj4NCiAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InNob3ctZGF0ZSI+DQogICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZGF0ZXRpbWUiIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTplZmZlY3RpdmVUaW1lIi8+DQogICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgPC94c2w6dmFyaWFibGU+DQoNCiAgICA8IS0tIENEQSBEb2N1bWVudCBDcmVhdGlvbiBEYXRlIGZvciB0b3Agb2YgZG9jdW1lbnQgLS0+DQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJjZGFEb2N1bWVudENyZWF0aW9uRGF0ZUZvclRvcE9mRG9jdW1lbnQiPg0KICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0ic2hvdy1kYXRlIj4NCiAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJkYXRldGltZSIgc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmVmZmVjdGl2ZVRpbWUiLz4NCiAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICANCiAgICA8IS0tIERvY3VtZW50IFJlbmRlcmluZyBWaWV3IFRpdGxlIC0tPg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZG9jdW1lbnRSZW5kZXJpbmdWaWV3VGl0bGUiPg0KICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0idHJpbSI+DQogICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ic3RyaW5nIj4NCiAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9InN0cmluZy1sZW5ndGgoJHBhdGllbnRNUk4pICZndDsgMCBhbmQgc3RyaW5nLWxlbmd0aCgkcGF0aWVudElISSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjb25jYXQoJHBhdGllbnROYW1lLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIHwgJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhdGllbnRTZXgsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgfCBEb0I6ICcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYXRpZW50RGF0ZU9mQmlydGgsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgKCcsIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGF0aWVudEFnZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJykgfCBJSEk6ICcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYXRpZW50SUhJLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIHwgTVJOOiAnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGF0aWVudE1STiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyB8ICcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjZGFEb2N1bWVudFRpdGxlKSIvPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJHBhdGllbnRNUk49JycgYW5kIHN0cmluZy1sZW5ndGgoJHBhdGllbnRJSEkpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iY29uY2F0KCRwYXRpZW50TmFtZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgfCAnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhdGllbnRTZXgsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIHwgRG9COiAnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhdGllbnREYXRlT2ZCaXJ0aCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgKCcsIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhdGllbnRBZ2UsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnKSB8IElISTogJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYXRpZW50SUhJLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyB8ICcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2RhRG9jdW1lbnRUaXRsZSkiLz4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9InN0cmluZy1sZW5ndGgoJHBhdGllbnRNUk4pICZndDsgMCBhbmQgJHBhdGllbnRJSEk9JyciPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNvbmNhdCgkcGF0aWVudE5hbWUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJyB8ICcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhdGllbnRTZXgsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJyB8IERvQjogJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGF0aWVudERhdGVPZkJpcnRoLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgKCcsIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYXRpZW50QWdlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICcpIHwgTVJOOiAnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYXRpZW50TVJOLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgfCAnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjZGFEb2N1bWVudFRpdGxlKSIvPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjb25jYXQoJHBhdGllbnROYW1lLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIHwgJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYXRpZW50U2V4LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIHwgRG9COiAnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGF0aWVudERhdGVPZkJpcnRoLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICgnLCANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhdGllbnRBZ2UsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcpIHwgJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNkYURvY3VtZW50VGl0bGUpIi8+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICA8L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgIDwveHNsOnZhcmlhYmxlPiANCiAgICANCiAgICA8IS0tIEVuY291bnRlciAtLT4NCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImVuY291bnRlckVmZmVjdGl2ZVRpbWVOdWxsRmxhdm9yIj4NCiAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InNob3ctbnVsbC1mbGF2b3ItdmFsdWUiPg0KICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9Im51bGxGbGF2b3JWYWx1ZSIgc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudE9mL2NkYTplbmNvbXBhc3NpbmdFbmNvdW50ZXIvY2RhOmVmZmVjdGl2ZVRpbWUvQG51bGxGbGF2b3IiPjwveHNsOndpdGgtcGFyYW0+DQogICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgPC94c2w6dmFyaWFibGU+ICANCiAgICANCiAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImVuY291bnRlclN0YXJ0RGF0ZVRpbWUiPg0KICAgICAgICA8eHNsOmlmDQogICAgICAgICAgICB0ZXN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudE9mL2NkYTplbmNvbXBhc3NpbmdFbmNvdW50ZXIvY2RhOmVmZmVjdGl2ZVRpbWUvY2RhOmxvdy9AdmFsdWUhPScnIj4NCiAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJzaG93LXRpbWUiPg0KICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJkYXRldGltZSINCiAgICAgICAgICAgICAgICAgICAgc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudE9mL2NkYTplbmNvbXBhc3NpbmdFbmNvdW50ZXIvY2RhOmVmZmVjdGl2ZVRpbWUvY2RhOmxvdyIvPg0KICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgPC94c2w6aWY+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgDQogICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJlbmNvdW50ZXJFbmREYXRlVGltZSI+DQogICAgICAgIDx4c2w6aWYNCiAgICAgICAgICAgIHRlc3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6Y29tcG9uZW50T2YvY2RhOmVuY29tcGFzc2luZ0VuY291bnRlci9jZGE6ZWZmZWN0aXZlVGltZS9jZGE6aGlnaC9AdmFsdWUhPScnIj4NCiAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJzaG93LXRpbWUiPg0KICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJkYXRldGltZSINCiAgICAgICAgICAgICAgICAgICAgc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudE9mL2NkYTplbmNvbXBhc3NpbmdFbmNvdW50ZXIvY2RhOmVmZmVjdGl2ZVRpbWUvY2RhOmhpZ2giLz4NCiAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgIDwveHNsOmlmPg0KICAgIDwveHNsOnZhcmlhYmxlPg0KICAgIA0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZW5jb3VudGVyRGF0ZVRpbWUiPg0KICAgICAgICA8eHNsOmlmDQogICAgICAgICAgICB0ZXN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudE9mL2NkYTplbmNvbXBhc3NpbmdFbmNvdW50ZXIvY2RhOmVmZmVjdGl2ZVRpbWUvQHZhbHVlIT0nJyI+DQogICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0ic2hvdy10aW1lIj4NCiAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZGF0ZXRpbWUiDQogICAgICAgICAgICAgICAgICAgIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpjb21wb25lbnRPZi9jZGE6ZW5jb21wYXNzaW5nRW5jb3VudGVyL2NkYTplZmZlY3RpdmVUaW1lIi8+DQogICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICA8L3hzbDppZj4NCiAgICA8L3hzbDp2YXJpYWJsZT4NCg0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZW5jb3VudGVyU3RhcnREYXRlIj4NCiAgICAgICAgPHhzbDppZg0KICAgICAgICAgICAgdGVzdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpjb21wb25lbnRPZi9jZGE6ZW5jb21wYXNzaW5nRW5jb3VudGVyL2NkYTplZmZlY3RpdmVUaW1lL2NkYTpsb3cvQHZhbHVlIT0nJyI+DQogICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0ic2hvdy1kYXRlIj4NCiAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZGF0ZXRpbWUiDQogICAgICAgICAgICAgICAgICAgIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpjb21wb25lbnRPZi9jZGE6ZW5jb21wYXNzaW5nRW5jb3VudGVyL2NkYTplZmZlY3RpdmVUaW1lL2NkYTpsb3ciLz4NCiAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgIDwveHNsOmlmPg0KICAgIDwveHNsOnZhcmlhYmxlPg0KICAgIA0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZW5jb3VudGVyRW5kRGF0ZSI+DQogICAgICAgIDx4c2w6aWYNCiAgICAgICAgICAgIHRlc3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6Y29tcG9uZW50T2YvY2RhOmVuY29tcGFzc2luZ0VuY291bnRlci9jZGE6ZWZmZWN0aXZlVGltZS9jZGE6aGlnaC9AdmFsdWUhPScnIj4NCiAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJzaG93LWRhdGUiPg0KICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJkYXRldGltZSINCiAgICAgICAgICAgICAgICAgICAgc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudE9mL2NkYTplbmNvbXBhc3NpbmdFbmNvdW50ZXIvY2RhOmVmZmVjdGl2ZVRpbWUvY2RhOmhpZ2giLz4NCiAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgIDwveHNsOmlmPg0KICAgIDwveHNsOnZhcmlhYmxlPg0KICAgIA0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZW5jb3VudGVyRGF0ZSI+DQogICAgICAgIDx4c2w6aWYNCiAgICAgICAgICAgIHRlc3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6Y29tcG9uZW50T2YvY2RhOmVuY29tcGFzc2luZ0VuY291bnRlci9jZGE6ZWZmZWN0aXZlVGltZS9AdmFsdWUhPScnIj4NCiAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJzaG93LWRhdGUiPg0KICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJkYXRldGltZSINCiAgICAgICAgICAgICAgICAgICAgc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudE9mL2NkYTplbmNvbXBhc3NpbmdFbmNvdW50ZXIvY2RhOmVmZmVjdGl2ZVRpbWUiLz4NCiAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgIDwveHNsOmlmPg0KICAgIDwveHNsOnZhcmlhYmxlPg0KICAgIA0KICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZW5jb3VudGVyRHVyYXRpb24iPg0KICAgICAgICA8eHNsOmlmIHRlc3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6Y29tcG9uZW50T2YvY2RhOmVuY29tcGFzc2luZ0VuY291bnRlci9jZGE6ZWZmZWN0aXZlVGltZS9jZGE6d2lkdGgvQHZhbHVlIT0nJyBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudE9mL2NkYTplbmNvbXBhc3NpbmdFbmNvdW50ZXIvY2RhOmVmZmVjdGl2ZVRpbWUvY2RhOndpZHRoL0B1bml0IT0nJyI+DQogICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0RHVyYXRpb24iPg0KICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJ2YWx1ZSIgc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudE9mL2NkYTplbmNvbXBhc3NpbmdFbmNvdW50ZXIvY2RhOmVmZmVjdGl2ZVRpbWUvY2RhOndpZHRoL0B2YWx1ZSIvPg0KICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJ1Y3VtVW5pdENvZGUiIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpjb21wb25lbnRPZi9jZGE6ZW5jb21wYXNzaW5nRW5jb3VudGVyL2NkYTplZmZlY3RpdmVUaW1lL2NkYTp3aWR0aC9AdW5pdCIvPg0KICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgPC94c2w6aWY+DQogICAgPC94c2w6dmFyaWFibGU+DQogICAgDQogICAgPCEtLT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09LS0+DQogICAgPCEtLSBbRU5EXSBHTE9CQUwgVkFSSUFCTEVTIC0tPg0KICAgIA0KICAgIA0KICAgIA0KICAgIA0KICAgIDwhLS0gRU5UUlkgVEVNUExBVEUgLS0+DQogICAgPCEtLT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09LS0+DQogICAgPHhzbDp0ZW1wbGF0ZSBtYXRjaD0iL2NkYTpDbGluaWNhbERvY3VtZW50Ij4NCiAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9Imh0bWwiPiANCiAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImxhbmciPmVuPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImhlYWQiPg0KICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJtZXRhIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iaHR0cC1lcXVpdiI+Q29udGVudC1TdHlsZS1UeXBlPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjb250ZW50Ij50ZXh0L2NzczwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJtZXRhIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ibmFtZSI+dmlld3BvcnQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNvbnRlbnQiPnVzZXItc2NhbGFibGU9eWVzLCB3aWR0aD08eHNsOnZhbHVlLW9mIHNlbGVjdD0iJEZVTExfVklFV1BPUlRfV0lEVEhfUFgiLz48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ibWV0YSI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9Im5hbWUiPmZvcm1hdC1kZXRlY3Rpb248L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNvbnRlbnQiPnRlbGVwaG9uZT1ubzwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJtZXRhIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iaHR0cC1lcXVpdiI+WC1VQS1Db21wYXRpYmxlPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjb250ZW50Ij5JRT1lZGdlPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+CQ0KICAgICAgICAgICAgICAgIDx4c2w6Y29tbWVudD48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJERPX05PVF9FRElUX05PVEUiLz48L3hzbDpjb21tZW50Pg0KICAgICAgICAgICAgICAgIDx4c2w6Y29tbWVudD48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJFZFUlNJT05fTk9URSIvPjwveHNsOmNvbW1lbnQ+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRpdGxlIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGRvY3VtZW50UmVuZGVyaW5nVmlld1RpdGxlIi8+PC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iYWRkQ1NTIi8+DQogICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvaGVhZD4gLS0+DQogICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iYm9keSI+DQogICAgICAgICAgICAgICAgPCEtLSBEaXNwbGF5IHRoZSBCYW5uZXIgLS0+DQogICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIkYmFubmVyRGlzcGxheSE9J2ZhbHNlJyI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkaXYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPkJBTk5FUiBjbGVhcmZpeDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXRCYW5uZXIiLz4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICANCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImRpdiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+QkFOTkVSX0JBQ0sgY2xlYXJmaXg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0QmFubmVyIi8+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImRpdiI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5DT05URU5UPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICA8IS0tIERpc3BsYXkgU3RhcnQgb2YgRG9jdW1lbnQgSW5kaWNhdG9yIC0tPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0U3RhcnRPZkRvY3VtZW50SW5kaWNhdG9yIi8+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gRGlzcGxheSBSZW5kZXJpbmcgU3BlY2lmaWNhdGlvbiBpbmNvbXBhdGliaWxpdHkgd2FybmluZyBpZiBuZWNlc3NhcnkgLS0+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iJGlzU3R5bGVzaGVldENvbXBhdGlibGVXaXRoUmVxdWlyZWRSZW5kZXJpbmdTcGVjaWZpY2F0aW9uVmVyc2lvbj0nZmFsc2UnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXRSZW5kZXJpbmdTcGVjaWZpY2F0aW9uSW5jb21wYXRpYmlsaXR5V2FybmluZyIvPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDwhLS0gRGlzcGxheSBEb2N1bWVudCBUaXRsZSAtLT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImRpdiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+REVUQUlMUzwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXRBdXRob3JEZXRhaWxzQW5kTG9nb1RhYmxlIi8+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPCEtLSBEaXNwbGF5IHRoZSBCb2R5IC0tPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iZGl2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5CT0RZPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9ImNkYTpjb21wb25lbnQvY2RhOm5vblhNTEJvZHkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmFwcGx5LXRlbXBsYXRlcyBzZWxlY3Q9ImNkYTpjb21wb25lbnQvY2RhOm5vblhNTEJvZHkiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0icHJvY2Vzc1N0cnVjdHVyZWRCb2R5Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJzdHJ1Y3R1cmVkQm9keSIgc2VsZWN0PSJjZGE6Y29tcG9uZW50L2NkYTpzdHJ1Y3R1cmVkQm9keSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InByb2Nlc3NBZG1pbmlzdHJhdGl2ZU9ic2VydmF0aW9ucyI+bm88L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9ImNkYTpjb21wb25lbnQvY2RhOnN0cnVjdHVyZWRCb2R5L2NkYTpjb21wb25lbnQvY2RhOnNlY3Rpb25bKGNkYTpjb2RlL0Bjb2RlPScxMDIuMTYwODAnKSBhbmQgKGNkYTpjb2RlL0Bjb2RlU3lzdGVtPScxLjIuMzYuMS4yMDAxLjEwMDEuMTAxJyldIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhZG1pbmlzdHJhdGl2ZU9ic2VydmF0aW9uc1NlY3Rpb25EaXNwbGF5PSd0cnVlJyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0icHJvY2Vzc1N0cnVjdHVyZWRCb2R5Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ic3RydWN0dXJlZEJvZHkiIHNlbGVjdD0iY2RhOmNvbXBvbmVudC9jZGE6c3RydWN0dXJlZEJvZHkiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0icHJvY2Vzc0FkbWluaXN0cmF0aXZlT2JzZXJ2YXRpb25zIj55ZXM8L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KDQogICAgICAgICAgICAgICAgICAgIDwhLS0gRGlzcGxheSBBZG1pbmlzdHJhdGl2ZSBEZXRhaWxzIEluZGljYXRvciAtLT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldEFkbWluaXN0cmF0aXZlRGV0YWlsc0luZGljYXRvciIvPg0KDQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkaXYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPkRFVEFJTFM8L3hzbDphdHRyaWJ1dGU+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gRGlzcGxheSBFbmNvdW50ZXIgRGV0YWlscyBhbmQgRmFjaWxpdHkgVGFibGUgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJGNkYURvY3VtZW50VHlwZT0kREhfRElTQ0hBUkdFX1NVTU1BUllfQ0xJTklDQUxfRE9DVU1FTlRfVFlQRV9OQU1FIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldEVuY291bnRlckRldGFpbHNBbmRGYWNpbGl0eVRhYmxlIi8+ICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2UvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8IS0tIERpc3BsYXkgUGF0aWVudCBEZXRhaWxzIGFuZCBEb2N1bWVudCBEZXRhaWxzIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldFBhdGllbnREZXRhaWxzQW5kRG9jdW1lbnREZXRhaWxzVGFibGUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXRIb3Jpem9udGFsU3BhY2VyIi8+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8IS0tIERpc3BsYXkgUGFydGljaXBhbnRzIC0tPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9ImNvdW50KC4vY2RhOnBhcnRpY2lwYW50WyhAdHlwZUNvZGU9J1BBUlQnIG9yIEB0eXBlQ29kZT0nSVJDUCcpIGFuZCBjZGE6YXNzb2NpYXRlZEVudGl0eS9jZGE6YXNzb2NpYXRlZFBlcnNvbl0pICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0UGFydGljaXBhbnRzVGFibGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJ0aXRsZSI+UEFSVElDSVBBTlRTPC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0idGFibGVJZCI+UEFSVElDSVBBTlRTX1RBQkxFPC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0icGFydGljaXBhbnRzIiBzZWxlY3Q9Ii4vY2RhOnBhcnRpY2lwYW50WyhAdHlwZUNvZGU9J1BBUlQnIG9yIEB0eXBlQ29kZT0nSVJDUCcpIGFuZCBjZGE6YXNzb2NpYXRlZEVudGl0eS9jZGE6YXNzb2NpYXRlZFBlcnNvbl0iIC8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSJjb3VudCguL2NkYTppbmZvcm1hdGlvblJlY2lwaWVudFtAdHlwZUNvZGU9J1BSQ1AnIG9yIG5vdChAdHlwZUNvZGUpXS9jZGE6aW50ZW5kZWRSZWNpcGllbnQpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0UmVjaXBpZW50c1RhYmxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0idGl0bGUiPlByaW1hcnkgUmVjaXBpZW50czwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InRhYmxlSWQiPlBSSU1BUllfUkVDSVBJRU5UU19UQUJMRTwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InJlY2lwaWVudHMiIHNlbGVjdD0iLi9jZGE6aW5mb3JtYXRpb25SZWNpcGllbnRbQHR5cGVDb2RlPSdQUkNQJyBvciBub3QoQHR5cGVDb2RlKV0vY2RhOmludGVuZGVkUmVjaXBpZW50IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9ImNvdW50KC4vY2RhOmluZm9ybWF0aW9uUmVjaXBpZW50W0B0eXBlQ29kZT0nVFJDJ10vY2RhOmludGVuZGVkUmVjaXBpZW50KSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldFJlY2lwaWVudHNUYWJsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InRpdGxlIj5TZWNvbmRhcnkgUmVjaXBpZW50czwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InRhYmxlSWQiPlNFQ09OREFSWV9SRUNJUElFTlRTX1RBQkxFPC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0icmVjaXBpZW50cyIgc2VsZWN0PSIuL2NkYTppbmZvcm1hdGlvblJlY2lwaWVudFtAdHlwZUNvZGU9J1RSQyddL2NkYTppbnRlbmRlZFJlY2lwaWVudCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPCEtLSBEaXNwbGF5IGZvb3Rub3RlcyAtLT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImRpdiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0Rm9vdG5vdGVzVGFibGUiLz4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCg0KICAgICAgICAgICAgICAgICAgICA8IS0tIERpc3BsYXkgRW5kIG9mIERvY3VtZW50IC0tPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9IiRzdHlsZVNoZWV0VmVyc2lvbkRpc3BsYXk9J3RydWUnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0U3R5bGVTaGVldFZlcnNpb25JbmRpY2F0b3IiLz4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXRFbmRPZkRvY3VtZW50SW5kaWNhdG9yIi8+DQoNCiAgICAgICAgICAgICAgICAgICAgPCEtLSBTcGFjZSB0byBhbGxvdyBzY3JvbGxpbmcgdG8gZm9vdG5vdGUgcmVmZXJlbmNlcyAtLT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldFNwYWNlVG9TY3JvbGxUb0Zvb3Rub3Rlc0RpdiIvPg0KICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC9kaXY+IC0tPg0KICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L2JvZHk+IC0tPg0KICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvaHRtbCAtLT4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgICA8IS0tPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0tLT4NCiAgICA8IS0tIFtFTkRdIEVOVFJZIFRFTVBMQVRFIC0tPg0KICAgIA0KICAgIA0KICAgIA0KICAgIA0KICAgIDwhLS0gQkFOTkVSIFRFTVBMQVRFUyAtLT4NCiAgICA8IS0tPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0tLT4gICANCg0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0iZ2V0QmFubmVyIj4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJjb21wbGV0aW9uQ29kZSI+DQogICAgICAgICAgICA8eHNsOmlmIHRlc3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9leHQ6Y29tcGxldGlvbkNvZGUgYW5kDQogICAgICAgICAgICAgICAgL2NkYTpDbGluaWNhbERvY3VtZW50L2V4dDpjb21wbGV0aW9uQ29kZS9AY29kZVN5c3RlbSBhbmQNCiAgICAgICAgICAgICAgICAvY2RhOkNsaW5pY2FsRG9jdW1lbnQvZXh0OmNvbXBsZXRpb25Db2RlL0Bjb2RlU3lzdGVtPScxLjIuMzYuMS4yMDAxLjEwMDEuMTAxLjEwNC4yMDEwNCcgYW5kDQogICAgICAgICAgICAgICAgL2NkYTpDbGluaWNhbERvY3VtZW50L2V4dDpjb21wbGV0aW9uQ29kZS9AY29kZSBhbmQNCiAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKC9jZGE6Q2xpbmljYWxEb2N1bWVudC9leHQ6Y29tcGxldGlvbkNvZGUvQGNvZGUpICZndDsgMCI+DQogICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvZXh0OmNvbXBsZXRpb25Db2RlL0Bjb2RlPSdGJyI+RmluYWw8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2V4dDpjb21wbGV0aW9uQ29kZS9AY29kZT0nSSciPkludGVyaW08L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2V4dDpjb21wbGV0aW9uQ29kZS9AY29kZT0nVyciPldpdGhkcmF3bjwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlLz4NCiAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgIA0KICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImRpdiI+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPkJBTk5FUl9ET0NVTUVOVF9USVRMRV9ESVY8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRjZGFEb2N1bWVudFRpdGxlIi8+PHhzbDppZiB0ZXN0PSIkY29tcGxldGlvbkNvZGUgPSAnV2l0aGRyYXduJyI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNvbmNhdCgnIOKAkyAnLCAnV0lUSERSQVdOJykiLz48L3hzbDppZj4gICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L2Rpdj4gLS0+DQoNCiAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkaXYiPg0KICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5CQU5ORVJfRE9DVU1FTlRfREFURV9ESVY8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRjZGFEb2N1bWVudFR5cGU9JERIX0RJU0NIQVJHRV9TVU1NQVJZX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSBhbmQgKHN0cmluZy1sZW5ndGgoJGVuY291bnRlckVuZERhdGUpICZndDsgMCkiPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZW5jb3VudGVyRW5kRGF0ZSIvPjwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGNkYURvY3VtZW50Q3JlYXRpb25EYXRlIi8+PC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvZGl2PiAtLT4NCg0KICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImRpdiI+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPkJBTk5FUl9QQVRJRU5UX0RFVEFJTFNfRElWPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkaXYiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJzdHlsZSI+ZGlzcGxheTogaW5saW5lOyBtYXJnaW4tcmlnaHQ6IDIwcHg7IGZvbnQtc2l6ZTogMTRweDs8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRwYXRpZW50RmFtaWx5TmFtZSE9JycgYW5kIHN0cmluZy1sZW5ndGgoJHBhdGllbnRGYW1pbHlOYW1lKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iJHBhdGllbnRQcmVmaXghPScnIGFuZCBzdHJpbmctbGVuZ3RoKCRwYXRpZW50UHJlZml4KSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJHBhdGllbnRQcmVmaXgiLz48eHNsOnRleHQ+IDwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIkcGF0aWVudEdpdmVuTmFtZSE9JycgYW5kIHN0cmluZy1sZW5ndGgoJHBhdGllbnRHaXZlbk5hbWUpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkcGF0aWVudEdpdmVuTmFtZSIvPjx4c2w6dGV4dD4gPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InNwYW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+Ym9sZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRwYXRpZW50RmFtaWx5TmFtZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJHBhdGllbnROYW1lIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+ICA8IS0tIDwvZGl2PiAtLT4NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iZGwiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+YmFubmVyRGw8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkdCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+YmFubmVyRHQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICBEb0INCiAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImRkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5iYW5uZXJEZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJub3QoJHBhdGllbnRBZ2U9J0RFQ0VBU0VEJykgYW5kIG5vdCgkcGF0aWVudEFnZT0nQUdFIFVOS05PV04nKSBhbmQgc3RyaW5nLWxlbmd0aCgkcGF0aWVudENvZGVkQWdlKSA9IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJHBhdGllbnREYXRlT2ZCaXJ0aCIvPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjb25jYXQoJyAoJywgJHBhdGllbnRBZ2UpIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXRDYWxjdWxhdGVkQWdlTGluayIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+KTwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRwYXRpZW50RGF0ZU9mQmlydGgiLz48eHNsOnZhbHVlLW9mIHNlbGVjdD0iY29uY2F0KCcgKCcsICRwYXRpZW50QWdlLCAnKScpIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iZHQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmJhbm5lckR0PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgU0VYDQogICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkZCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+YmFubmVyRGQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJHBhdGllbnRTZXgiLz4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iJHBhdGllbnRJSEkhPScnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmJhbm5lckR0PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIElISQ0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmJhbm5lckRkPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkcGF0aWVudElISSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0ic3RyaW5nLWxlbmd0aCgkcGF0aWVudE1STikgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmJhbm5lckR0PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1STg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmJhbm5lckRkPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkcGF0aWVudE1STiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC9kbD4gLS0+ICAgICAgICAgICAgDQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJnZXRDYWxjdWxhdGVkQWdlTGluayI+DQogICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJhIj4NCiAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5hZ2VMaW5rPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iaHJlZiI+I2NhbGN1bGF0ZWRBZ2VBbmNob3I8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICA8eHNsOnRleHQ+KjwveHNsOnRleHQ+DQogICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPCEtLT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09LS0+ICAgDQogICAgPCEtLSBbRU5EXSBCQU5ORVIgVEVNUExBVEVTIC0tPg0KICAgIA0KDQogICAgPCEtLSAxLjIgVEVNUExBVEVTIC0tPg0KICAgIDwhLS09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PS0tPiAgIA0KDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJnZXRBdXRob3JEZXRhaWxzQW5kTG9nb1RhYmxlIj4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJhdXRob3JPcmdhbmlzYXRpb24iPg0KICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9InN0cmluZy1sZW5ndGgoL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTphdXRob3IvY2RhOmFzc2lnbmVkQXV0aG9yL2NkYTphc3NpZ25lZFBlcnNvbi9leHQ6YXNFbXBsb3ltZW50L2V4dDplbXBsb3llck9yZ2FuaXphdGlvbi9jZGE6YXNPcmdhbml6YXRpb25QYXJ0T2YvY2RhOndob2xlT3JnYW5pemF0aW9uL2NkYTpuYW1lKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTphdXRob3IvY2RhOmFzc2lnbmVkQXV0aG9yL2NkYTphc3NpZ25lZFBlcnNvbi9leHQ6YXNFbXBsb3ltZW50L2V4dDplbXBsb3llck9yZ2FuaXphdGlvbi9jZGE6YXNPcmdhbml6YXRpb25QYXJ0T2YvY2RhOndob2xlT3JnYW5pemF0aW9uL2NkYTpuYW1lIi8+DQogICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0ic3RyaW5nLWxlbmd0aCgvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudE9mL2NkYTplbmNvbXBhc3NpbmdFbmNvdW50ZXIvY2RhOmxvY2F0aW9uL2NkYTpoZWFsdGhDYXJlRmFjaWxpdHkvY2RhOnNlcnZpY2VQcm92aWRlck9yZ2FuaXphdGlvbi9jZGE6YXNPcmdhbml6YXRpb25QYXJ0T2YvY2RhOndob2xlT3JnYW5pemF0aW9uL2NkYTpuYW1lKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpjb21wb25lbnRPZi9jZGE6ZW5jb21wYXNzaW5nRW5jb3VudGVyL2NkYTpsb2NhdGlvbi9jZGE6aGVhbHRoQ2FyZUZhY2lsaXR5L2NkYTpzZXJ2aWNlUHJvdmlkZXJPcmdhbml6YXRpb24vY2RhOmFzT3JnYW5pemF0aW9uUGFydE9mL2NkYTp3aG9sZU9yZ2FuaXphdGlvbi9jZGE6bmFtZSIvPg0KICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6YXV0aG9yL2NkYTphc3NpZ25lZEF1dGhvci9jZGE6YXNzaWduZWRBdXRob3JpbmdEZXZpY2UiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTphdXRob3IvY2RhOmFzc2lnbmVkQXV0aG9yL2NkYTphc3NpZ25lZEF1dGhvcmluZ0RldmljZS9jZGE6c29mdHdhcmVOYW1lL3RleHQoKSIvPg0KICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgIDwveHNsOnZhcmlhYmxlPg0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImF1dGhvck5hbWUiPg0KICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InNob3ctbmFtZSI+PHhzbDp3aXRoLXBhcmFtIG5hbWU9Im5hbWUiIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTphdXRob3IvY2RhOmFzc2lnbmVkQXV0aG9yWzFdL2NkYTphc3NpZ25lZFBlcnNvbi9jZGE6bmFtZVsxXSIvPjwveHNsOmNhbGwtdGVtcGxhdGU+ICAgICAgICANCiAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iYXV0aG9yUm9sZSIgc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmF1dGhvci9jZGE6YXNzaWduZWRBdXRob3JbMV0vY2RhOmNvZGUvQGRpc3BsYXlOYW1lIi8+DQoJCTx4c2w6dmFyaWFibGUgbmFtZT0iYXV0aG9yUm9sZU9UIiBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6YXV0aG9yL2NkYTphc3NpZ25lZEF1dGhvclsxXS9jZGE6Y29kZS9jZGE6b3JpZ2luYWxUZXh0Ii8+DQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iYXV0aG9yUGhvbmVOdW1iZXIiIHNlbGVjdD0ic3Vic3RyaW5nLWFmdGVyKC9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6YXV0aG9yL2NkYTphc3NpZ25lZEF1dGhvclsxXS9jZGE6dGVsZWNvbVtzdGFydHMtd2l0aChAdmFsdWUsICd0ZWwnKV0vQHZhbHVlLCAndGVsOicpIi8+DQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZmFjaWxpdHlOYW1lIiBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6Y29tcG9uZW50T2YvY2RhOmVuY29tcGFzc2luZ0VuY291bnRlci9jZGE6bG9jYXRpb24vY2RhOmhlYWx0aENhcmVGYWNpbGl0eS9jZGE6c2VydmljZVByb3ZpZGVyT3JnYW5pemF0aW9uL2NkYTphc09yZ2FuaXphdGlvblBhcnRPZi9jZGE6d2hvbGVPcmdhbml6YXRpb24vY2RhOm5hbWUiLz4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJmYWNpbGl0eURlcGFydG1lbnQiIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpjb21wb25lbnRPZi9jZGE6ZW5jb21wYXNzaW5nRW5jb3VudGVyL2NkYTpsb2NhdGlvbi9jZGE6aGVhbHRoQ2FyZUZhY2lsaXR5L2NkYTpzZXJ2aWNlUHJvdmlkZXJPcmdhbml6YXRpb24vY2RhOm5hbWUiLz4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJhY2Nlc3Npb25JRCI+DQogICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTppbkZ1bGZpbGxtZW50T2YvY2RhOm9yZGVyL2NkYTppZCI+DQogICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIuL0Byb290IGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRzLXdpdGgoLi9Acm9vdCwgJzEuMi4zNi4xLjIwMDEuMTAwNS41My4nKSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLi9AZXh0ZW5zaW9uIi8+DQogICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgIA0KICAgICAgICA8eHNsOmlmIHRlc3Q9InN0cmluZy1sZW5ndGgoJGF1dGhvck9yZ2FuaXNhdGlvbikgJmd0OyAwIG9yDQogICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgkYXV0aG9yTmFtZSkgJmd0OyAwIG9yDQogICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgkYWNjZXNzaW9uSUQpICZndDsgMCBvcg0KICAgICAgICAgICAgICAgICAgICAgICgvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudC9jZGE6c3RydWN0dXJlZEJvZHkvL2NkYTpvYnNlcnZhdGlvbk1lZGlhW0BJRD0nTE9HTyddL2NkYTp2YWx1ZVtAbWVkaWFUeXBlPSdpbWFnZS9wbmcnIG9yIEBtZWRpYVR5cGU9J2ltYWdlL2dpZicgb3IgQG1lZGlhVHlwZT0naW1hZ2UvanBlZyddKSI+DQogICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRhYmxlIj4NCiAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjZWxsc3BhY2luZyI+MDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjZWxscGFkZGluZyI+MDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJib3JkZXIiPjA8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRvY3VtZW50VGl0bGVUYWJsZTwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRvY3VtZW50VGl0bGVUYWJsZUF1dGhvckRldGFpbHNUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkaXYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5hdXRob3JPcmdhbmlzYXRpb25DbGFzczwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGF1dGhvck9yZ2FuaXNhdGlvbiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L2Rpdj4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9InN0cmluZy1sZW5ndGgoJGF1dGhvck5hbWUpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImRpdiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0YWJsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjZWxscGFkZGluZyI+MDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNlbGxzcGFjaW5nIj4wPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ic3VtbWFyeSI+RE9DVU1FTlRfQVVUSE9SX0FORF9MT0dPX1RBQkxFPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRvY3VtZW50VGl0bGVBdXRob3JEZXRhaWxzVGFibGU8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGJvZHkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0ic3RyaW5nLWxlbmd0aCgkYXV0aG9yTmFtZSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kb2N1bWVudFRpdGxlQXV0aG9yRGV0YWlsc1RhYmxlVGg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkY2RhRG9jdW1lbnRUeXBlID0gJ2VIZWFsdGggUHJlc2NyaXB0aW9uIFJlY29yZCciPlByZXNjcmliZXI8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJGNkYURvY3VtZW50VHlwZSA9ICdlSGVhbHRoIERpc3BlbnNlIFJlY29yZCciPkRpc3BlbnNlcjwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPkF1dGhvcjwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZG9jdW1lbnRUaXRsZUF1dGhvckRldGFpbHNUYWJsZVRkPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkYXV0aG9yTmFtZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0ic3RyaW5nLWxlbmd0aCgkYXV0aG9yUm9sZU9UKSAmZ3Q7IDAiPig8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGF1dGhvclJvbGVPVCIvPik8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4oPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRhdXRob3JSb2xlIi8+KTwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0ic3RyaW5nLWxlbmd0aCgkYXV0aG9yUGhvbmVOdW1iZXIpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kb2N1bWVudFRpdGxlQXV0aG9yRGV0YWlsc1RhYmxlVGg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGhvbmUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kb2N1bWVudFRpdGxlQXV0aG9yRGV0YWlsc1RhYmxlVGQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRhdXRob3JQaG9uZU51bWJlciIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RyPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRjZGFEb2N1bWVudFR5cGUgPSAkREhfRVZFTlRfU1VNTUFSWV9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0aCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kb2N1bWVudFRpdGxlQXV0aG9yRGV0YWlsc1RhYmxlVGg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVuY291bnRlciBQZXJpb2QNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kb2N1bWVudFRpdGxlQXV0aG9yRGV0YWlsc1RhYmxlVGQ8L3hzbDphdHRyaWJ1dGU+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9InN0cmluZy1sZW5ndGgoJGVuY291bnRlckRhdGUpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGVuY291bnRlckRhdGUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iKHN0cmluZy1sZW5ndGgoJGVuY291bnRlclN0YXJ0RGF0ZSkgJmd0OyAwKSBhbmQgKHN0cmluZy1sZW5ndGgoJGVuY291bnRlckVuZERhdGUpICZndDsgMCkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNvbmNhdCgkZW5jb3VudGVyU3RhcnREYXRlVGltZSwgJyB0byAnLCAkZW5jb3VudGVyRW5kRGF0ZVRpbWUpIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9InN0cmluZy1sZW5ndGgoJGVuY291bnRlckVuZERhdGUpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRlbmNvdW50ZXJFbmREYXRlVGltZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJzdHJpbmctbGVuZ3RoKCRlbmNvdW50ZXJEdXJhdGlvbikgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZW5jb3VudGVyRHVyYXRpb24iLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0ic3RyaW5nLWxlbmd0aCgkZW5jb3VudGVyRWZmZWN0aXZlVGltZU51bGxGbGF2b3IpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRlbmNvdW50ZXJFZmZlY3RpdmVUaW1lTnVsbEZsYXZvciIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RyPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJGNkYURvY3VtZW50VHlwZSA9ICRESF9ESVNDSEFSR0VfU1VNTUFSWV9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImRpc2NoYXJnZURpc3Bvc2l0aW9uQ29kZSIgc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudE9mL2NkYTplbmNvbXBhc3NpbmdFbmNvdW50ZXIvY2RhOmRpc2NoYXJnZURpc3Bvc2l0aW9uQ29kZSIvPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9InN0cmluZy1sZW5ndGgoJGRpc2NoYXJnZURpc3Bvc2l0aW9uQ29kZS9AZGlzcGxheU5hbWUpICZndDsgMCBvciBzdHJpbmctbGVuZ3RoKCRkaXNjaGFyZ2VEaXNwb3NpdGlvbkNvZGUvY2RhOm9yaWdpbmFsVGV4dCkgJmd0OyAwIG9yIHN0cmluZy1sZW5ndGgoJGRpc2NoYXJnZURpc3Bvc2l0aW9uQ29kZS9AbnVsbEZsYXZvcikgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRvY3VtZW50VGl0bGVBdXRob3JEZXRhaWxzVGFibGVUaDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERpc2NoYXJnZSBUbw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRvY3VtZW50VGl0bGVBdXRob3JEZXRhaWxzVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9InN0cmluZy1sZW5ndGgoJGRpc2NoYXJnZURpc3Bvc2l0aW9uQ29kZS9jZGE6b3JpZ2luYWxUZXh0KSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGRpc2NoYXJnZURpc3Bvc2l0aW9uQ29kZS9jZGE6b3JpZ2luYWxUZXh0Ii8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0ic3RyaW5nLWxlbmd0aCgkZGlzY2hhcmdlRGlzcG9zaXRpb25Db2RlL0BkaXNwbGF5TmFtZSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRkaXNjaGFyZ2VEaXNwb3NpdGlvbkNvZGUvQGRpc3BsYXlOYW1lIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0ic3RyaW5nLWxlbmd0aCgkZGlzY2hhcmdlRGlzcG9zaXRpb25Db2RlL0BudWxsRmxhdm9yKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0ic2hvdy1udWxsLWZsYXZvci12YWx1ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ibnVsbEZsYXZvclZhbHVlIiBzZWxlY3Q9IiRkaXNjaGFyZ2VEaXNwb3NpdGlvbkNvZGUvQG51bGxGbGF2b3IiPjwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90cj4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSJzdHJpbmctbGVuZ3RoKCRkaXNjaGFyZ2VMb2NhdGlvbikgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRvY3VtZW50VGl0bGVBdXRob3JEZXRhaWxzVGFibGVUaDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERpc2NoYXJnZSBGcm9tDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZG9jdW1lbnRUaXRsZUF1dGhvckRldGFpbHNUYWJsZVRkPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRkaXNjaGFyZ2VMb2NhdGlvbiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90cj4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRjZGFEb2N1bWVudFR5cGUgPSAkREhfRElBR05PU1RJQ19JTUFHSU5HX1JFUE9SVF9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSJzdHJpbmctbGVuZ3RoKCRhY2Nlc3Npb25JRCkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRvY3VtZW50VGl0bGVBdXRob3JEZXRhaWxzVGFibGVUaDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFjY2Vzc2lvbiBJRA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRvY3VtZW50VGl0bGVBdXRob3JEZXRhaWxzVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkYWNjZXNzaW9uSUQiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdHI+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGJvZHk+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGFibGU+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC9kaXY+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90ZD4gLS0+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZG9jdW1lbnRUaXRsZVRhYmxlTG9nb1RkPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ic3R5bGUiPnZlcnRpY2FsLWFsaWduOiB0b3A7PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iYWxpZ24iPnJpZ2h0PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudC9jZGE6c3RydWN0dXJlZEJvZHkvL2NkYTpvYnNlcnZhdGlvbk1lZGlhW0BJRD0nTE9HTyddL2NkYTp2YWx1ZVtAbWVkaWFUeXBlPSdpbWFnZS9wbmcnIG9yIEBtZWRpYVR5cGU9J2ltYWdlL2dpZicgb3IgQG1lZGlhVHlwZT0naW1hZ2UvanBlZyddIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0icmVuZGVyTG9nbyIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90ZD4gLS0+ICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90cj4gLS0+DQogICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICA8L3hzbDppZj4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgICANCiAgICA8eHNsOnRlbXBsYXRlIG5hbWU9ImdldEVuY291bnRlckRldGFpbHNBbmRGYWNpbGl0eVRhYmxlIj4NCiAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImRpdiI+DQogICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+c3BhY2VkU2VjdGlvbiBwYWdlV2lkdGhXaXRoTGVmdE1hcmdpbjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0YWJsZSI+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ic3VtbWFyeSI+RU5DT1VOVEVSX0RFVEFJTFNfQU5EX0ZBQ0lMSVRZX1RBQkxFPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzVGFibGU8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2VsbHBhZGRpbmciPjE1PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNlbGxzcGFjaW5nIj4wPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ciI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzVGFibGVUcjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXRFbmNvdW50ZXJEZXRhaWxzIi8+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0UmVzcG9uc2libGVIZWFsdGhQcm9mZXNzaW9uYWxBdFRpbWVPZkRpc2NoYXJnZVJvdyIvPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGQ+IC0tPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNUYWJsZVRkPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldEZhY2lsaXR5RGV0YWlscyIvPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGQ+IC0tPg0KICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90cj4gLS0+DQogICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGFibGU+IC0tPg0KICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvZGl2PiAtLT4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgICANCiAgICA8eHNsOnRlbXBsYXRlIG5hbWU9ImdldEVuY291bnRlckRldGFpbHMiPg0KICAgICAgICA8eHNsOmlmIHRlc3Q9IiRlbmNvdW50ZXJTdGFydERhdGVUaW1lICE9ICcnIG9yDQogICAgICAgICAgICAkZW5jb3VudGVyRW5kRGF0ZVRpbWUgIT0gJycgb3INCiAgICAgICAgICAgICRlbmNvdW50ZXJEYXRlVGltZSAhPSAnJyBvcg0KICAgICAgICAgICAgJHNlcGFyYXRpb25Nb2RlICE9ICcnIG9yDQogICAgICAgICAgICAkZGlzY2hhcmdlTG9jYXRpb24iPg0KICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImRpdiI+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVIZWFkZXJEaXY8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgRW5jb3VudGVyIERldGFpbHMNCiAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC9kaXY+IC0tPg0KICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRhYmxlIj4NCiAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJzdW1tYXJ5Ij5FTkNPVU5URVJfREVUQUlMU19UQUJMRTwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZTwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGJvZHkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0ic3RyaW5nLWxlbmd0aCgkZW5jb3VudGVyRWZmZWN0aXZlVGltZU51bGxGbGF2b3IpICZndDsgMCBhbmQgc3RyaW5nLWxlbmd0aCgkZW5jb3VudGVyU3RhcnREYXRlVGltZSkgPSAwIGFuZCBzdHJpbmctbGVuZ3RoKCRlbmNvdW50ZXJFbmREYXRlVGltZSkgPSAwIGFuZCBzdHJpbmctbGVuZ3RoKCRlbmNvdW50ZXJEYXRlVGltZSkgPSAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRoIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InNwYW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaFNwYW48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEYXRlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RoPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRkPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGVuY291bnRlckVmZmVjdGl2ZVRpbWVOdWxsRmxhdm9yIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90cj4gLS0+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIkZW5jb3VudGVyU3RhcnREYXRlVGltZSE9JyciPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3BhbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoU3BhbjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkY2RhRG9jdW1lbnRUeXBlPSRESF9ESVNDSEFSR0VfU1VNTUFSWV9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiPkFkbWlzc2lvbiBEYXRlPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT5TdGFydCBEYXRlPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90aD4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRlbmNvdW50ZXJTdGFydERhdGVUaW1lIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90cj4gLS0+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9IiRlbmNvdW50ZXJFbmREYXRlVGltZSE9JyciPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3BhbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoU3BhbjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkY2RhRG9jdW1lbnRUeXBlPSRESF9ESVNDSEFSR0VfU1VNTUFSWV9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiPkRpc2NoYXJnZSBEYXRlPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT5FbmQgRGF0ZTwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGg+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZW5jb3VudGVyRW5kRGF0ZVRpbWUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGQ+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RyPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iJGVuY291bnRlckRhdGVUaW1lIT0nJyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0aCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJzcGFuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGhTcGFuPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRjZGFEb2N1bWVudFR5cGU9JERIX1NQRUNJQUxJU1RfTEVUVEVSX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSI+RGF0ZS9UaW1lIFN1YmplY3Qgb2YgQ2FyZSBTZWVuPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT5FbmNvdW50ZXIgRGF0ZTwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGg+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZW5jb3VudGVyRGF0ZVRpbWUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGQ+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RyPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iJHNlcGFyYXRpb25Nb2RlIT0nJyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0aCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJzcGFuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGhTcGFuPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGlzY2hhcmdlIFRvDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RoPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRkPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJHNlcGFyYXRpb25Nb2RlIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90cj4gLS0+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9IiRjZGFEb2N1bWVudFR5cGU9JERIX0RJU0NIQVJHRV9TVU1NQVJZX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZGlzY2hhcmdlTG9jYXRpb24hPScnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRoIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InNwYW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaFNwYW48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEaXNjaGFyZ2UgRnJvbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90aD4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRkaXNjaGFyZ2VMb2NhdGlvbiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90ZD4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdHI+IC0tPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIkY2RhRG9jdW1lbnRUeXBlPSRESF9ESVNDSEFSR0VfU1VNTUFSWV9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICAvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudC9jZGE6c3RydWN0dXJlZEJvZHkvY2RhOmNvbXBvbmVudC9jZGE6c2VjdGlvbi9jZGE6ZW50cnkvY2RhOm9ic2VydmF0aW9uW2NkYTpjb2RlL0Bjb2RlPScxMDMuMTYwMjgnIGFuZCBjZGE6Y29kZS9AY29kZVN5c3RlbT0nMS4yLjM2LjEuMjAwMS4xMDAxLjEwMScgYW5kIGNkYTpjb2RlL0BkaXNwbGF5TmFtZT0nU3BlY2lhbHR5J10vY2RhOnZhbHVlWyhAZGlzcGxheU5hbWUgYW5kIChzdHJpbmctbGVuZ3RoKEBkaXNwbGF5TmFtZSkgJmd0OyAwKSkgb3IgKGNkYTpvcmlnaW5hbFRleHQgYW5kIHN0cmluZy1sZW5ndGgoY2RhOm9yaWdpbmFsVGV4dCkgJmd0OyAwKV0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3BhbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoU3BhbjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNwZWNpYWx0aWVzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC9zcGFuPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGg+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ1bCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+c3BlY2lhbHRpZXN1bDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudC9jZGE6c3RydWN0dXJlZEJvZHkvY2RhOmNvbXBvbmVudC9jZGE6c2VjdGlvbi9jZGE6ZW50cnkvY2RhOm9ic2VydmF0aW9uW2NkYTpjb2RlL0Bjb2RlPScxMDMuMTYwMjgnIGFuZCBjZGE6Y29kZS9AY29kZVN5c3RlbT0nMS4yLjM2LjEuMjAwMS4xMDAxLjEwMScgYW5kIGNkYTpjb2RlL0BkaXNwbGF5TmFtZT0nU3BlY2lhbHR5J10vY2RhOnZhbHVlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ibGkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+c3BlY2lhbHRpZXNsaTwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iLi9AY29kZSBhbmQgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHN0cmluZy1sZW5ndGgoLi9AY29kZSkgJmd0OyAwKSBhbmQgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi9AY29kZVN5c3RlbSBhbmQgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHN0cmluZy1sZW5ndGgoLi9AY29kZVN5c3RlbSkgJmd0OyAwKSBhbmQgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi9AZGlzcGxheU5hbWUgYW5kIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzdHJpbmctbGVuZ3RoKC4vQGRpc3BsYXlOYW1lKSAmZ3Q7IDApIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLi9AZGlzcGxheU5hbWUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9Ii4vY2RhOm9yaWdpbmFsVGV4dCBhbmQgc3RyaW5nLWxlbmd0aCguL2NkYTpvcmlnaW5hbFRleHQpICZndDsgMCI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii4vY2RhOm9yaWdpbmFsVGV4dC90ZXh0KCkiLz48L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGQ+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RyPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3Rib2R5PiAtLT4NCiAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90YWJsZT4gLS0+DQogICAgICAgIDwveHNsOmlmPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KICAgIA0KICAgIA0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0iZ2V0UmVzcG9uc2libGVIZWFsdGhQcm9mZXNzaW9uYWxBdFRpbWVPZkRpc2NoYXJnZVJvdyI+DQogICAgICAgIDx4c2w6aWYgdGVzdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpjb21wb25lbnRPZi9jZGE6ZW5jb21wYXNzaW5nRW5jb3VudGVyL2NkYTplbmNvdW50ZXJQYXJ0aWNpcGFudFtAdHlwZUNvZGU9J0RJUyddL2NkYTphc3NpZ25lZEVudGl0eS9jZGE6YXNzaWduZWRQZXJzb24vY2RhOm5hbWUgYW5kDQogICAgICAgICAgICBzdHJpbmctbGVuZ3RoKC9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6Y29tcG9uZW50T2YvY2RhOmVuY29tcGFzc2luZ0VuY291bnRlci9jZGE6ZW5jb3VudGVyUGFydGljaXBhbnRbQHR5cGVDb2RlPSdESVMnXS9jZGE6YXNzaWduZWRFbnRpdHkvY2RhOmFzc2lnbmVkUGVyc29uL2NkYTpuYW1lKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImRpdiI+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ic3R5bGUiPm1hcmdpbi10b3A6IDEwcHg7PC94c2w6YXR0cmlidXRlPiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZUhlYWRlckRpdjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICBSZXNwb25zaWJsZSBIZWFsdGggUHJvZmVzc2lvbmFsIEF0IFRpbWUgT2YgRGlzY2hhcmdlDQogICAgICAgICAgICA8L3hzbDplbGVtZW50PiANCiAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0YWJsZSI+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ic3VtbWFyeSI+UkVTUE9OU0lCTEVfSEVBTFRIX1BST0ZFU1NJT05BTF9BVF9USU1FX09GX0RJU0NIQVJHRV9UQUJMRTwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZTwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGJvZHkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3BhbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoU3BhbjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5hbWUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRkPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpjb21wb25lbnRPZi9jZGE6ZW5jb21wYXNzaW5nRW5jb3VudGVyL2NkYTplbmNvdW50ZXJQYXJ0aWNpcGFudFtAdHlwZUNvZGU9J0RJUyddL2NkYTphc3NpZ25lZEVudGl0eS9jZGE6YXNzaWduZWRQZXJzb24vY2RhOm5hbWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSJwb3NpdGlvbigpID4gMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRBS0FfU1RSSU5HIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJzaG93LW5hbWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJuYW1lIiBzZWxlY3Q9Ii4iLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9InBvc2l0aW9uKCkhPWxhc3QoKSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImJyIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudE9mL2NkYTplbmNvbXBhc3NpbmdFbmNvdW50ZXIvY2RhOmVuY291bnRlclBhcnRpY2lwYW50W0B0eXBlQ29kZT0nRElTJ10vY2RhOmFzc2lnbmVkRW50aXR5L2NkYTphc3NpZ25lZFBlcnNvbi9leHQ6YXNFbnRpdHlJZGVudGlmaWVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXRQcm92aWRlckluZGl2aWR1YWxJZGVudGlmaWVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZW50aXR5SWRlbnRpZmllciIgc2VsZWN0PSIuIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiANCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXRBZGRyZXNzRGV0YWlsc1Jvd3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJwZXJzb25Pck9yZyIgc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudE9mL2NkYTplbmNvbXBhc3NpbmdFbmNvdW50ZXIvY2RhOmVuY291bnRlclBhcnRpY2lwYW50W0B0eXBlQ29kZT0nRElTJ10vY2RhOmFzc2lnbmVkRW50aXR5Ii8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0Q29udGFjdERldGFpbHNSb3dzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0icGVyc29uT3JPcmciIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpjb21wb25lbnRPZi9jZGE6ZW5jb21wYXNzaW5nRW5jb3VudGVyL2NkYTplbmNvdW50ZXJQYXJ0aWNpcGFudFtAdHlwZUNvZGU9J0RJUyddL2NkYTphc3NpZ25lZEVudGl0eSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudE9mL2NkYTplbmNvbXBhc3NpbmdFbmNvdW50ZXIvY2RhOmVuY291bnRlclBhcnRpY2lwYW50W0B0eXBlQ29kZT0nRElTJ10vY2RhOmFzc2lnbmVkRW50aXR5L2NkYTphc3NpZ25lZFBlcnNvbi9leHQ6YXNFbXBsb3ltZW50L2V4dDplbXBsb3llck9yZ2FuaXphdGlvbi9jZGE6YXNPcmdhbml6YXRpb25QYXJ0T2YvY2RhOndob2xlT3JnYW5pemF0aW9uL2NkYTpuYW1lIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpjb21wb25lbnRPZi9jZGE6ZW5jb21wYXNzaW5nRW5jb3VudGVyL2NkYTplbmNvdW50ZXJQYXJ0aWNpcGFudFtAdHlwZUNvZGU9J0RJUyddL2NkYTphc3NpZ25lZEVudGl0eS9jZGE6YXNzaWduZWRQZXJzb24vZXh0OmFzRW1wbG95bWVudC9leHQ6ZW1wbG95ZXJPcmdhbml6YXRpb24vY2RhOmFzT3JnYW5pemF0aW9uUGFydE9mL2NkYTp3aG9sZU9yZ2FuaXphdGlvbi9jZGE6bmFtZSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJzcGFuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoU3BhbjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPcmdhbmlzYXRpb24NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudE9mL2NkYTplbmNvbXBhc3NpbmdFbmNvdW50ZXIvY2RhOmVuY291bnRlclBhcnRpY2lwYW50W0B0eXBlQ29kZT0nRElTJ10vY2RhOmFzc2lnbmVkRW50aXR5L2NkYTphc3NpZ25lZFBlcnNvbi9leHQ6YXNFbXBsb3ltZW50L2V4dDplbXBsb3llck9yZ2FuaXphdGlvbi9jZGE6YXNPcmdhbml6YXRpb25QYXJ0T2YvY2RhOndob2xlT3JnYW5pemF0aW9uL2NkYTpuYW1lIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudE9mL2NkYTplbmNvbXBhc3NpbmdFbmNvdW50ZXIvY2RhOmVuY291bnRlclBhcnRpY2lwYW50W0B0eXBlQ29kZT0nRElTJ10vY2RhOmFzc2lnbmVkRW50aXR5L2NkYTphc3NpZ25lZFBlcnNvbi9leHQ6YXNFbXBsb3ltZW50L2V4dDplbXBsb3llck9yZ2FuaXphdGlvbi9jZGE6bmFtZSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKC9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6Y29tcG9uZW50T2YvY2RhOmVuY29tcGFzc2luZ0VuY291bnRlci9jZGE6ZW5jb3VudGVyUGFydGljaXBhbnRbQHR5cGVDb2RlPSdESVMnXS9jZGE6YXNzaWduZWRFbnRpdHkvY2RhOmFzc2lnbmVkUGVyc29uL2V4dDphc0VtcGxveW1lbnQvZXh0OmVtcGxveWVyT3JnYW5pemF0aW9uL2NkYTpuYW1lKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0aCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InNwYW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGhTcGFuPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlcGFydG1lbnQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudE9mL2NkYTplbmNvbXBhc3NpbmdFbmNvdW50ZXIvY2RhOmVuY291bnRlclBhcnRpY2lwYW50W0B0eXBlQ29kZT0nRElTJ10vY2RhOmFzc2lnbmVkRW50aXR5L2NkYTphc3NpZ25lZFBlcnNvbi9leHQ6YXNFbXBsb3ltZW50L2V4dDplbXBsb3llck9yZ2FuaXphdGlvbi9jZGE6bmFtZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiANCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90Ym9keT4gLS0+DQogICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGFibGU+IC0tPg0KICAgICAgICA8L3hzbDppZj4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgICANCiAgICA8eHNsOnRlbXBsYXRlIG5hbWU9ImdldFNpZ25pZmljYW50UGFydGljaXBhbnQiPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9InBhcnRpY2lwYW50Ii8+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0icGFydGljaXBhbnRUaXRsZSIvPg0KICAgICAgICANCiAgICAgICAgPHhzbDppZiB0ZXN0PSIkcGFydGljaXBhbnQvY2RhOmFzc29jaWF0ZWRFbnRpdHkvY2RhOmFzc29jaWF0ZWRQZXJzb24vY2RhOm5hbWUgYW5kDQogICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRwYXJ0aWNpcGFudC9jZGE6YXNzb2NpYXRlZEVudGl0eS9jZGE6YXNzb2NpYXRlZFBlcnNvbi9jZGE6bmFtZSkgJmd0OyAwIj4NCiAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkaXYiPg0KICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9InN0eWxlIj5tYXJnaW4tdG9wOiAxMHB4OzwveHNsOmF0dHJpYnV0ZT4gICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVIZWFkZXJEaXY8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRwYXJ0aWNpcGFudFRpdGxlIi8+DQogICAgICAgICAgICA8L3hzbDplbGVtZW50PiANCiAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0YWJsZSI+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGU8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRib2R5Ij4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIoJGNkYURvY3VtZW50VHlwZT0kREhfUEFUSE9MT0dZX1JFUE9SVF9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUgb3IgJGNkYURvY3VtZW50VHlwZT0kREhfRElBR05PU1RJQ19JTUFHSU5HX1JFUE9SVF9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUpIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYXJ0aWNpcGFudC9AdHlwZUNvZGU9J1JFRicgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCgkcGFydGljaXBhbnQvY2RhOnRpbWUvQHZhbHVlIGFuZCBzdHJpbmctbGVuZ3RoKCRwYXJ0aWNpcGFudC9jZGE6dGltZS9AdmFsdWUpICZndDsgMCkgb3INCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoJHBhcnRpY2lwYW50L2NkYTp0aW1lL2NkYTpsb3cvQHZhbHVlIGFuZCBzdHJpbmctbGVuZ3RoKCRwYXJ0aWNpcGFudC9jZGE6dGltZS9jZGE6bG93L0B2YWx1ZSkgJmd0OyAwKSkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3BhbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoU3BhbjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlcXVlc3QgQ3JlYXRpb24gRGF0ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iKCRwYXJ0aWNpcGFudC9jZGE6dGltZS9AdmFsdWUgYW5kIHN0cmluZy1sZW5ndGgoJHBhcnRpY2lwYW50L2NkYTp0aW1lL0B2YWx1ZSkgJmd0OyAwKSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InNob3ctdGltZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJkYXRldGltZSIgc2VsZWN0PSIkcGFydGljaXBhbnQvY2RhOnRpbWUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJzaG93LXRpbWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZGF0ZXRpbWUiIHNlbGVjdD0iJHBhcnRpY2lwYW50L2NkYTp0aW1lL2NkYTpsb3ciLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4gDQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9Im9yZGVySUQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJGNkYURvY3VtZW50VHlwZT0kREhfUEFUSE9MT0dZX1JFUE9SVF9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJwYXRoT3JkZXJJRCIgc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmluRnVsZmlsbG1lbnRPZi9jZGE6b3JkZXIvY2RhOmlkIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJHBhdGhPcmRlcklEL0BleHRlbnNpb24gYW5kIHN0cmluZy1sZW5ndGgoJHBhdGhPcmRlcklEL0BleHRlbnNpb24pICZndDsgMCI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRwYXRoT3JkZXJJRC9AZXh0ZW5zaW9uIi8+PC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJHBhdGhPcmRlcklEL0Byb290IGFuZCBzdHJpbmctbGVuZ3RoKCRwYXRoT3JkZXJJRC9Acm9vdCkgJmd0OyAwIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJHBhdGhPcmRlcklEL0Byb290Ii8+PC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZS8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6aW5GdWxmaWxsbWVudE9mL2NkYTpvcmRlci9jZGE6aWQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iLi9Acm9vdCBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90KHN0YXJ0cy13aXRoKC4vQHJvb3QsICcxLjIuMzYuMS4yMDAxLjEwMDUuNTMuJykpIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iLi9AZXh0ZW5zaW9uIGFuZCBzdHJpbmctbGVuZ3RoKC4vQGV4dGVuc2lvbikgJmd0OyAwIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iLi9AZXh0ZW5zaW9uIi8+PC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIuL0Byb290IGFuZCBzdHJpbmctbGVuZ3RoKC4vQHJvb3QpICZndDsgMCI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii4vQHJvb3QiLz48L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2UvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4gICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0ic3RyaW5nLWxlbmd0aCgkb3JkZXJJRCkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJzcGFuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoU3BhbjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPcmRlciBJRA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RoPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJG9yZGVySUQiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4gDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InNwYW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoU3BhbjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTmFtZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiANCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iJHBhcnRpY2lwYW50L2NkYTphc3NvY2lhdGVkRW50aXR5L2NkYTphc3NvY2lhdGVkUGVyc29uL2NkYTpuYW1lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSJwb3NpdGlvbigpID4gMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJEFLQV9TVFJJTkciLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJzaG93LW5hbWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9Im5hbWUiIHNlbGVjdD0iLiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9InBvc2l0aW9uKCkhPWxhc3QoKSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iYnIiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9IiRwYXJ0aWNpcGFudC9jZGE6YXNzb2NpYXRlZEVudGl0eS9jZGE6YXNzb2NpYXRlZFBlcnNvbi9leHQ6YXNFbnRpdHlJZGVudGlmaWVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldFByb3ZpZGVySW5kaXZpZHVhbElkZW50aWZpZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImVudGl0eUlkZW50aWZpZXIiIHNlbGVjdD0iLiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iJHBhcnRpY2lwYW50L2NkYTphc3NvY2lhdGVkRW50aXR5L2NkYTphc3NvY2lhdGVkUGVyc29uL2V4dDphc0VtcGxveW1lbnRbQGNsYXNzQ29kZT0nRU1QJ10vZXh0OmpvYkNvZGUvY2RhOm9yaWdpbmFsVGV4dCBvcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhcnRpY2lwYW50L2NkYTphc3NvY2lhdGVkRW50aXR5L2NkYTphc3NvY2lhdGVkUGVyc29uL2V4dDphc0VtcGxveW1lbnRbQGNsYXNzQ29kZT0nRU1QJ10vZXh0OmpvYkNvZGUvQGRpc3BsYXlOYW1lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldFByb3ZpZGVySW5kaXZpZHVhbE9jY3VwYXRpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImpvYkNvZGUiIHNlbGVjdD0iJHBhcnRpY2lwYW50L2NkYTphc3NvY2lhdGVkRW50aXR5L2NkYTphc3NvY2lhdGVkUGVyc29uL2V4dDphc0VtcGxveW1lbnRbQGNsYXNzQ29kZT0nRU1QJ10vZXh0OmpvYkNvZGUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9IiRwYXJ0aWNpcGFudC9jZGE6YXNzb2NpYXRlZEVudGl0eS9jZGE6YXNzb2NpYXRlZFBlcnNvbi9leHQ6YXNRdWFsaWZpY2F0aW9ucy9leHQ6Y29kZS9jZGE6b3JpZ2luYWxUZXh0IGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRwYXJ0aWNpcGFudC9jZGE6YXNzb2NpYXRlZEVudGl0eS9jZGE6YXNzb2NpYXRlZFBlcnNvbi9leHQ6YXNRdWFsaWZpY2F0aW9ucy9leHQ6Y29kZS9jZGE6b3JpZ2luYWxUZXh0L3RleHQoKSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldFByb3ZpZGVySW5kaXZpZHVhbFF1YWxpZmljYXRpb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJxdWFsaWZpY2F0aW9ucyIgc2VsZWN0PSIkcGFydGljaXBhbnQvY2RhOmFzc29jaWF0ZWRFbnRpdHkvY2RhOmFzc29jaWF0ZWRQZXJzb24vZXh0OmFzUXVhbGlmaWNhdGlvbnMvZXh0OmNvZGUvY2RhOm9yaWdpbmFsVGV4dC90ZXh0KCkiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IA0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0aCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3BhbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGhTcGFuPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBZGRyZXNzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IA0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRkPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkbCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5hZGRyZXNzZGw8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9ImNvdW50KCRwYXJ0aWNpcGFudC9jZGE6YXNzb2NpYXRlZEVudGl0eS9jZGE6YWRkclskc2hvd1Byb3ZpZGVySG9tZURldGFpbHMgPSAndHJ1ZScgb3Igbm90KGNvbnRhaW5zKEB1c2UsICdIJykpXSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iJHBhcnRpY2lwYW50L2NkYTphc3NvY2lhdGVkRW50aXR5L2NkYTphZGRyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldEFkZHJlc3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImFkZHJlc3MiIHNlbGVjdD0iLiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vdCBQcm92aWRlZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+ICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiANCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IA0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldENvbnRhY3REZXRhaWxzUm93cyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0icGVyc29uT3JPcmciIHNlbGVjdD0iJHBhcnRpY2lwYW50L2NkYTphc3NvY2lhdGVkRW50aXR5Ii8+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iJHBhcnRpY2lwYW50L2NkYTphc3NvY2lhdGVkRW50aXR5L2NkYTphc3NvY2lhdGVkUGVyc29uL2V4dDphc0VtcGxveW1lbnQvZXh0OmVtcGxveWVyT3JnYW5pemF0aW9uL2NkYTphc09yZ2FuaXphdGlvblBhcnRPZi9jZGE6d2hvbGVPcmdhbml6YXRpb24vY2RhOm5hbWUgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRwYXJ0aWNpcGFudC9jZGE6YXNzb2NpYXRlZEVudGl0eS9jZGE6YXNzb2NpYXRlZFBlcnNvbi9leHQ6YXNFbXBsb3ltZW50L2V4dDplbXBsb3llck9yZ2FuaXphdGlvbi9jZGE6YXNPcmdhbml6YXRpb25QYXJ0T2YvY2RhOndob2xlT3JnYW5pemF0aW9uL2NkYTpuYW1lKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3BhbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoU3BhbjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9yZ2FuaXNhdGlvbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkcGFydGljaXBhbnQvY2RhOmFzc29jaWF0ZWRFbnRpdHkvY2RhOmFzc29jaWF0ZWRQZXJzb24vZXh0OmFzRW1wbG95bWVudC9leHQ6ZW1wbG95ZXJPcmdhbml6YXRpb24vY2RhOmFzT3JnYW5pemF0aW9uUGFydE9mL2NkYTp3aG9sZU9yZ2FuaXphdGlvbi9jZGE6bmFtZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IA0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9IiRwYXJ0aWNpcGFudC9jZGE6YXNzb2NpYXRlZEVudGl0eS9jZGE6YXNzb2NpYXRlZFBlcnNvbi9leHQ6YXNFbXBsb3ltZW50L2V4dDplbXBsb3llck9yZ2FuaXphdGlvbi9jZGE6bmFtZSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoJHBhcnRpY2lwYW50L2NkYTphc3NvY2lhdGVkRW50aXR5L2NkYTphc3NvY2lhdGVkUGVyc29uL2V4dDphc0VtcGxveW1lbnQvZXh0OmVtcGxveWVyT3JnYW5pemF0aW9uL2NkYTpuYW1lKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0aCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJzcGFuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGhTcGFuPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVwYXJ0bWVudA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkcGFydGljaXBhbnQvY2RhOmFzc29jaWF0ZWRFbnRpdHkvY2RhOmFzc29jaWF0ZWRQZXJzb24vZXh0OmFzRW1wbG95bWVudC9leHQ6ZW1wbG95ZXJPcmdhbml6YXRpb24vY2RhOm5hbWUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiANCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IA0KICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGJvZHk+IC0tPg0KICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RhYmxlPiAtLT4NCiAgICAgICAgPC94c2w6aWY+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJnZXRGYWNpbGl0eURldGFpbHMiPg0KICAgICAgICA8eHNsOmlmIHRlc3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6Y29tcG9uZW50T2YvY2RhOmVuY29tcGFzc2luZ0VuY291bnRlci9jZGE6bG9jYXRpb24vY2RhOmhlYWx0aENhcmVGYWNpbGl0eS9jZGE6c2VydmljZVByb3ZpZGVyT3JnYW5pemF0aW9uL2NkYTphc09yZ2FuaXphdGlvblBhcnRPZi9jZGE6d2hvbGVPcmdhbml6YXRpb24vY2RhOm5hbWUgYW5kIA0KICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudE9mL2NkYTplbmNvbXBhc3NpbmdFbmNvdW50ZXIvY2RhOmxvY2F0aW9uL2NkYTpoZWFsdGhDYXJlRmFjaWxpdHkvY2RhOnNlcnZpY2VQcm92aWRlck9yZ2FuaXphdGlvbi9jZGE6YXNPcmdhbml6YXRpb25QYXJ0T2YvY2RhOndob2xlT3JnYW5pemF0aW9uL2NkYTpuYW1lKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImRpdiI+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVIZWFkZXJEaXY8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkY2RhRG9jdW1lbnRUeXBlPSRESF9NSFJfUFJFU0NSSVBUSU9OX1JFQ09SRF9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiPlByZXNjcmliZXIgT3JnYW5pc2F0aW9uPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRjZGFEb2N1bWVudFR5cGU9JERIX01IUl9ESVNQRU5TRV9SRUNPUkRfQ0xJTklDQUxfRE9DVU1FTlRfVFlQRV9OQU1FIj5EaXNwZW5zaW5nIE9yZ2FuaXNhdGlvbjwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPkZhY2lsaXR5PC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC9kaXY+IC0tPg0KICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRhYmxlIj4NCiAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJzdW1tYXJ5Ij5GQUNJTElUWV9ERVRBSUxTX1RBQkxFPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0Ym9keSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0aCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJzcGFuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGhTcGFuPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTmFtZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90aD4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6Y29tcG9uZW50T2YvY2RhOmVuY29tcGFzc2luZ0VuY291bnRlci9jZGE6bG9jYXRpb24vY2RhOmhlYWx0aENhcmVGYWNpbGl0eS9jZGE6c2VydmljZVByb3ZpZGVyT3JnYW5pemF0aW9uL2NkYTphc09yZ2FuaXphdGlvblBhcnRPZi9jZGE6d2hvbGVPcmdhbml6YXRpb24vY2RhOm5hbWUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6Y29tcG9uZW50T2YvY2RhOmVuY29tcGFzc2luZ0VuY291bnRlci9jZGE6bG9jYXRpb24vY2RhOmhlYWx0aENhcmVGYWNpbGl0eS9jZGE6c2VydmljZVByb3ZpZGVyT3JnYW5pemF0aW9uL2NkYTphc09yZ2FuaXphdGlvblBhcnRPZi9jZGE6d2hvbGVPcmdhbml6YXRpb24vZXh0OmFzRW50aXR5SWRlbnRpZmllciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0UHJvdmlkZXJPcmdhbmlzYXRpb25JZGVudGlmaWVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZW50aXR5SWRlbnRpZmllciIgc2VsZWN0PSIuIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGQ+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RyPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSIvL2V4dDpjb3ZlcmFnZTJbQHR5cGVDb2RlPSdDT1ZCWSddL2V4dDplbnRpdGxlbWVudFtAY2xhc3NDb2RlPSdDT1YnIGFuZCBAbW9vZENvZGU9J0VWTicgYW5kIGV4dDpwYXJ0aWNpcGFudFtAdHlwZUNvZGU9J0hMRCddL2V4dDpwYXJ0aWNpcGFudFJvbGVbQGNsYXNzQ29kZT0nU0RMT0MnXV0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iLi9leHQ6cGFydGljaXBhbnQvZXh0OnBhcnRpY2lwYW50Um9sZS9leHQ6aWQvQHJvb3QgPSAvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudE9mL2NkYTplbmNvbXBhc3NpbmdFbmNvdW50ZXIvY2RhOmxvY2F0aW9uL2NkYTpoZWFsdGhDYXJlRmFjaWxpdHkvY2RhOmlkL0Byb290Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZW50aXRsZW1lbnRUeXBlIiBzZWxlY3Q9ImV4dDpjb2RlL0BkaXNwbGF5TmFtZSI+PC94c2w6dmFyaWFibGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZW50aXRsZW1lbnROdW1iZXIiIHNlbGVjdD0iZXh0OmlkL0BleHRlbnNpb24iPjwveHNsOnZhcmlhYmxlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0aCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3BhbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGhTcGFuPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJwb3NpdGlvbigpPTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5FbnRpdGxlbWVudHM8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGg+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRkPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZW50aXRsZW1lbnROdW1iZXIiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9IiRlbnRpdGxlbWVudFR5cGUgYW5kIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRlbnRpdGxlbWVudFR5cGUpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4gKDwveHNsOnRleHQ+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRlbnRpdGxlbWVudFR5cGUiLz48eHNsOnRleHQ+KTwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGQ+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdHI+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldEFkZHJlc3NEZXRhaWxzUm93cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InBlcnNvbk9yT3JnIiBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6Y29tcG9uZW50T2YvY2RhOmVuY29tcGFzc2luZ0VuY291bnRlci9jZGE6bG9jYXRpb24vY2RhOmhlYWx0aENhcmVGYWNpbGl0eS9jZGE6c2VydmljZVByb3ZpZGVyT3JnYW5pemF0aW9uL2NkYTphc09yZ2FuaXphdGlvblBhcnRPZi9jZGE6d2hvbGVPcmdhbml6YXRpb24iLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldENvbnRhY3REZXRhaWxzUm93cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InBlcnNvbk9yT3JnIiBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6Y29tcG9uZW50T2YvY2RhOmVuY29tcGFzc2luZ0VuY291bnRlci9jZGE6bG9jYXRpb24vY2RhOmhlYWx0aENhcmVGYWNpbGl0eS9jZGE6c2VydmljZVByb3ZpZGVyT3JnYW5pemF0aW9uL2NkYTphc09yZ2FuaXphdGlvblBhcnRPZi9jZGE6d2hvbGVPcmdhbml6YXRpb24iLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpjb21wb25lbnRPZi9jZGE6ZW5jb21wYXNzaW5nRW5jb3VudGVyL2NkYTpsb2NhdGlvbi9jZGE6aGVhbHRoQ2FyZUZhY2lsaXR5L2NkYTpzZXJ2aWNlUHJvdmlkZXJPcmdhbml6YXRpb24vY2RhOm5hbWUgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmNvbXBvbmVudE9mL2NkYTplbmNvbXBhc3NpbmdFbmNvdW50ZXIvY2RhOmxvY2F0aW9uL2NkYTpoZWFsdGhDYXJlRmFjaWxpdHkvY2RhOnNlcnZpY2VQcm92aWRlck9yZ2FuaXphdGlvbi9jZGE6bmFtZSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJzcGFuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoU3BhbjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXBhcnRtZW50DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvc3Bhbj4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90aD4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRkPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6Y29tcG9uZW50T2YvY2RhOmVuY29tcGFzc2luZ0VuY291bnRlci9jZGE6bG9jYXRpb24vY2RhOmhlYWx0aENhcmVGYWNpbGl0eS9jZGE6c2VydmljZVByb3ZpZGVyT3JnYW5pemF0aW9uL2NkYTpuYW1lIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpjb21wb25lbnRPZi9jZGE6ZW5jb21wYXNzaW5nRW5jb3VudGVyL2NkYTpsb2NhdGlvbi9jZGE6aGVhbHRoQ2FyZUZhY2lsaXR5L2NkYTpzZXJ2aWNlUHJvdmlkZXJPcmdhbml6YXRpb24vZXh0OmFzRW50aXR5SWRlbnRpZmllciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldFByb3ZpZGVyT3JnYW5pc2F0aW9uSWRlbnRpZmllciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJlbnRpdHlJZGVudGlmaWVyIiBzZWxlY3Q9Ii4iLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90ZD4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RyPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90Ym9keT4gLS0+DQogICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGFibGU+IC0tPg0KICAgICAgICA8L3hzbDppZj4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgICANCiAgICA8eHNsOnRlbXBsYXRlIG5hbWU9ImdldFBhdGllbnREZXRhaWxzQW5kRG9jdW1lbnREZXRhaWxzVGFibGUiPg0KICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iZGl2Ij4NCiAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5zcGFjZWRTZWN0aW9uIHBhZ2VXaWR0aFdpdGhMZWZ0TWFyZ2luPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRhYmxlIj4NCiAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc1RhYmxlPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNlbGxwYWRkaW5nIj4xNTwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjZWxsc3BhY2luZyI+MDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc1RhYmxlVHI8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc1RhYmxlVGQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0UGF0aWVudERldGFpbHMiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iJGNkYURvY3VtZW50VHlwZT0kREhfTUhSX1BSRVNDUklQVElPTl9SRUNPUkRfQ0xJTklDQUxfRE9DVU1FTlRfVFlQRV9OQU1FIG9yICRjZGFEb2N1bWVudFR5cGU9JERIX01IUl9ESVNQRU5TRV9SRUNPUkRfQ0xJTklDQUxfRE9DVU1FTlRfVFlQRV9OQU1FIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0RmFjaWxpdHlEZXRhaWxzIi8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXRBdXRob3JEZXRhaWxzIi8+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0RG9jdW1lbnREZXRhaWxzIi8+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90ZD4gLS0+DQogICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RyPiAtLT4NCiAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRjZGFEb2N1bWVudFR5cGU9JERIX0VfUkVGRVJSQUxfQ0xJTklDQUxfRE9DVU1FTlRfVFlQRV9OQU1FIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOnBhcnRpY2lwYW50W0B0eXBlQ29kZT0nUkVGVCddL2NkYTphc3NvY2lhdGVkRW50aXR5L2NkYTphc3NvY2lhdGVkUGVyc29uL2NkYTpuYW1lIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKC9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6cGFydGljaXBhbnRbQHR5cGVDb2RlPSdSRUZUJ10vY2RhOmFzc29jaWF0ZWRFbnRpdHkvY2RhOmFzc29jaWF0ZWRQZXJzb24vY2RhOm5hbWUpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzVGFibGVUcjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJ2YWxpZ24iPnRvcDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc1RhYmxlVGQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXRTaWduaWZpY2FudFBhcnRpY2lwYW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJwYXJ0aWNpcGFudCIgc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOnBhcnRpY2lwYW50W0B0eXBlQ29kZT0nUkVGVCddIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0icGFydGljaXBhbnRUaXRsZSI+UmVmZXJlZTwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc1RhYmxlVGQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90cj4gLS0+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkY2RhRG9jdW1lbnRUeXBlPSRESF9TUEVDSUFMSVNUX0xFVFRFUl9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICAvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOnBhcnRpY2lwYW50W0B0eXBlQ29kZT0nUkVGQiddL2NkYTphc3NvY2lhdGVkRW50aXR5L2NkYTphc3NvY2lhdGVkUGVyc29uL2NkYTpuYW1lIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOnBhcnRpY2lwYW50W0B0eXBlQ29kZT0nUkVGQiddL2NkYTphc3NvY2lhdGVkRW50aXR5L2NkYTphc3NvY2lhdGVkUGVyc29uL2NkYTpuYW1lKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc1RhYmxlVHI8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0idmFsaWduIj50b3A8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNUYWJsZVRkPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0U2lnbmlmaWNhbnRQYXJ0aWNpcGFudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0icGFydGljaXBhbnQiIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpwYXJ0aWNpcGFudFtAdHlwZUNvZGU9J1JFRkInXSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InBhcnRpY2lwYW50VGl0bGUiPlJlZmVycmVyPC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGQ+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGQ+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RyPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IigkY2RhRG9jdW1lbnRUeXBlPSRESF9QQVRIT0xPR1lfUkVQT1JUX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSBvciAkY2RhRG9jdW1lbnRUeXBlPSRESF9ESUFHTk9TVElDX0lNQUdJTkdfUkVQT1JUX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSkgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICAvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOnBhcnRpY2lwYW50W0B0eXBlQ29kZT0nUkVGJ10vY2RhOmFzc29jaWF0ZWRFbnRpdHkvY2RhOmFzc29jaWF0ZWRQZXJzb24vY2RhOm5hbWUgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKC9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6cGFydGljaXBhbnRbQHR5cGVDb2RlPSdSRUYnXS9jZGE6YXNzb2NpYXRlZEVudGl0eS9jZGE6YXNzb2NpYXRlZFBlcnNvbi9jZGE6bmFtZSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNUYWJsZVRyPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9InZhbGlnbiI+dG9wPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldFNpZ25pZmljYW50UGFydGljaXBhbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InBhcnRpY2lwYW50IiBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6cGFydGljaXBhbnRbQHR5cGVDb2RlPSdSRUYnXSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InBhcnRpY2lwYW50VGl0bGUiPlJlcXVlc3RlcjwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc1RhYmxlVGQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90cj4gLS0+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RhYmxlPiAtLT4NCiAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L2Rpdj4gLS0+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJnZXRQYXRpZW50RGV0YWlscyI+DQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZGVjZWFzZWRUaW1lIj4NCiAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iJHBhdGllbnREZWNlYXNlZFN0YXR1cz0ndHJ1ZScgYW5kDQogICAgICAgICAgICAgICAgL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpyZWNvcmRUYXJnZXQvY2RhOnBhdGllbnRSb2xlL2NkYTpwYXRpZW50L2V4dDpkZWNlYXNlZFRpbWUgYW5kDQogICAgICAgICAgICAgICAgL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpyZWNvcmRUYXJnZXQvY2RhOnBhdGllbnRSb2xlL2NkYTpwYXRpZW50L2V4dDpkZWNlYXNlZFRpbWUvQHZhbHVlIGFuZA0KICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpyZWNvcmRUYXJnZXQvY2RhOnBhdGllbnRSb2xlL2NkYTpwYXRpZW50L2V4dDpkZWNlYXNlZFRpbWUvQHZhbHVlKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJzaG93LXRpbWUiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZGF0ZXRpbWUiDQogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6cmVjb3JkVGFyZ2V0L2NkYTpwYXRpZW50Um9sZS9jZGE6cGF0aWVudC9leHQ6ZGVjZWFzZWRUaW1lIi8+DQogICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICAgICAgDQogICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkaXYiPg0KICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVIZWFkZXJEaXY8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICBQYXRpZW50DQogICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC9kaXY+IC0tPg0KICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGFibGUiPg0KICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ic3VtbWFyeSI+UEFUSUVOVF9ERVRBSUxTX1RBQkxFPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGU8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGJvZHkiPg0KICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ciI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0aCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InNwYW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGhTcGFuPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5hbWUNCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90aD4gLS0+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRkPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6cmVjb3JkVGFyZ2V0L2NkYTpwYXRpZW50Um9sZS9jZGE6cGF0aWVudC9jZGE6bmFtZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSJwb3NpdGlvbigpID4gMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkQUtBX1NUUklORyIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJzaG93LXBhdGllbnQtbmFtZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJuYW1lIiBzZWxlY3Q9Ii4iLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0icG9zaXRpb24oKSE9bGFzdCgpIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImJyIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4NCiAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdHI+IC0tPg0KDQogICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRyIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRoIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3BhbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaFNwYW48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgU2V4DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGg+IC0tPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkcGF0aWVudFNleCIvPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGQ+IC0tPg0KICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90cj4gLS0+DQoNCiAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9InN0cmluZy1sZW5ndGgoJHBhdGllbnRJbmRpZ2Vub3VzU3RhdHVzKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRoIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJzcGFuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaFNwYW48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEluZGlnZW5vdXMgU3RhdHVzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90aD4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRwYXRpZW50SW5kaWdlbm91c1N0YXR1cyIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RyPiAtLT4NCiAgICAgICAgICAgICAgICA8L3hzbDppZj4NCg0KICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ciI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0aCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InNwYW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGhTcGFuPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIERhdGUgb2YgQmlydGgNCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90aD4gLS0+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRkPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRwYXRpZW50RGF0ZU9mQmlydGgiLz4gKDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkcGF0aWVudEFnZSIvPikNCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0ibm90KCRwYXRpZW50QWdlPSdERUNFQVNFRCcpIGFuZCBub3QoJHBhdGllbnRBZ2U9J0FHRSBVTktOT1dOJykgYW5kIHN0cmluZy1sZW5ndGgoJHBhdGllbnRDb2RlZEFnZSkgPSAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iYnIiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iZGl2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iaWQiPmNhbGN1bGF0ZWRBZ2VBbmNob3I8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9Im5hbWUiPmNhbGN1bGF0ZWRBZ2VBbmNob3I8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9InN0eWxlIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iY29uY2F0KCdwb3NpdGlvbjpyZWxhdGl2ZTsgdG9wOi0nLCAkQkFOTkVSX0hFSUdIVF9QWCwgJ3B4OycpIi8+PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PiogQWdlIGlzIGNhbGN1bGF0ZWQgZnJvbSBkYXRlIG9mIGJpcnRoPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90cj4gLS0+DQoNCiAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9IiRwYXRpZW50RGVjZWFzZWRTdGF0dXM9J3RydWUnIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0aCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3BhbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGhTcGFuPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdGF0dXMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RoPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3BhbiI+PHhzbDphdHRyaWJ1dGUgbmFtZT0ic3R5bGUiPmZvbnQtd2VpZ2h0OiBib2xkOzwveHNsOmF0dHJpYnV0ZT5ERUNFQVNFRDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdHI+IC0tPg0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSJzdHJpbmctbGVuZ3RoKCRkZWNlYXNlZFRpbWUpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0aCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJzcGFuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGhTcGFuPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVjZWFzZWQgVGltZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90aD4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRkZWNlYXNlZFRpbWUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RyPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRyIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRoIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3BhbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaFNwYW48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgSUhJDQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGg+IC0tPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkcGF0aWVudElISSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgkcGF0aWVudElISSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRwYXRpZW50SUhJIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT5Ob3QgUHJvdmlkZWQ8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90ZD4gLS0+DQogICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RyPiAtLT4NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iLy9leHQ6Y292ZXJhZ2UyW0B0eXBlQ29kZT0nQ09WQlknXS9leHQ6ZW50aXRsZW1lbnRbQGNsYXNzQ29kZT0nQ09WJyBhbmQgQG1vb2RDb2RlPSdFVk4nIGFuZCBleHQ6cGFydGljaXBhbnRbQHR5cGVDb2RlPSdCRU4nXS9leHQ6cGFydGljaXBhbnRSb2xlW0BjbGFzc0NvZGU9J1BBVCddXSI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iLi9leHQ6cGFydGljaXBhbnQvZXh0OnBhcnRpY2lwYW50Um9sZS9leHQ6aWQvQHJvb3QgPSAvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOnJlY29yZFRhcmdldC9jZGE6cGF0aWVudFJvbGUvY2RhOmlkL0Byb290Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJlbnRpdGxlbWVudFR5cGUiIHNlbGVjdD0iZXh0OmNvZGUvQGRpc3BsYXlOYW1lIj48L3hzbDp2YXJpYWJsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZW50aXRsZW1lbnROdW1iZXIiIHNlbGVjdD0iZXh0OmlkL0BleHRlbnNpb24iPjwveHNsOnZhcmlhYmxlPg0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0aCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJzcGFuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGhTcGFuPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9InBvc2l0aW9uKCk9MSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5FbnRpdGxlbWVudHM8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2UvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90aD4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRlbnRpdGxlbWVudE51bWJlciIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9IiRlbnRpdGxlbWVudFR5cGUgYW5kIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgkZW50aXRsZW1lbnRUeXBlKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PiAoPC94c2w6dGV4dD48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGVudGl0bGVtZW50VHlwZSIvPjx4c2w6dGV4dD4pPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90cj4gLS0+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+DQoNCiAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpyZWNvcmRUYXJnZXQvY2RhOnBhdGllbnRSb2xlL2NkYTpwYXRpZW50L2V4dDphc0VudGl0eUlkZW50aWZpZXJbQGNsYXNzQ29kZT0nSURFTlQnIGFuZCBleHQ6aWRbQGFzc2lnbmluZ0F1dGhvcml0eU5hbWUhPSdJSEknXV0iPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9Ii4vZXh0OmlkIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgLi9leHQ6aWQvQHJvb3QgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKC4vZXh0OmlkL0Byb290KSAmZ3Q7IDAgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICBub3QoLi9leHQ6aWQvQGRpc3BsYWJsZT0nZmFsc2UnKSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgIC4vZXh0OmNvZGUgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICAuL2V4dDpjb2RlL0Bjb2RlIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCguL2V4dDpjb2RlL0Bjb2RlKSAmZ3Q7IDAgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICAuL2V4dDpjb2RlL0Bjb2RlU3lzdGVtPScyLjE2Ljg0MC4xLjExMzg4My4xMi4yMDMnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iaWRlbnRpZmllciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIuL2V4dDppZC9AZXh0ZW5zaW9uIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCguL2V4dDppZC9AZXh0ZW5zaW9uKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii4vZXh0OmlkL0BleHRlbnNpb24iLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0ic3Vic3RyaW5nLWFmdGVyLWxhc3Qtb2NjdXJhbmNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ic3RyaW5nIiBzZWxlY3Q9Ii4vZXh0OmlkL0Byb290Ii8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImFyZ3VtZW50Ij4uPC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iaWRlbnRpZmllclR5cGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXRITDdWMlRhYmxlMDIwM0lkZW50aWZpZXJDb2RlRGVzY3JpcHRpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iY29kZSIgc2VsZWN0PSIuL2V4dDpjb2RlL0Bjb2RlIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOnZhcmlhYmxlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJpZGVudGlmaWVyQXNzaWduaW5nQXV0aG9yaXR5TmFtZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIuL2V4dDppZC9AYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCguL2V4dDppZC9AYXNzaWduaW5nQXV0aG9yaXR5TmFtZSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii4vZXh0OmlkL0Bhc3NpZ25pbmdBdXRob3JpdHlOYW1lIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3BhbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoU3BhbjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJwb3NpdGlvbigpPTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+TG9jYWwgSWRlbnRpZmllcnM8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2UvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90aD4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRpZGVudGlmaWVyIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRpZGVudGlmaWVyQXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhbmQgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgkaWRlbnRpZmllckFzc2lnbmluZ0F1dGhvcml0eU5hbWUpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PiAoPC94c2w6dGV4dD48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGlkZW50aWZpZXJBc3NpZ25pbmdBdXRob3JpdHlOYW1lIi8+PHhzbDp0ZXh0Pik8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkaWRlbnRpZmllclR5cGUgYW5kIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoJGlkZW50aWZpZXJUeXBlKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4gKDwveHNsOnRleHQ+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRpZGVudGlmaWVyVHlwZSIvPjx4c2w6dGV4dD4pPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+IChMb2NhbCBJZGVudGlmaWVyKTwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGQ+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RyPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldEFkZHJlc3NEZXRhaWxzUm93cyI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJwZXJzb25Pck9yZyIgc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOnJlY29yZFRhcmdldC9jZGE6cGF0aWVudFJvbGUiLz4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImlzUGF0aWVudCIgc2VsZWN0PSIndHJ1ZSciIC8+DQogICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0Q29udGFjdERldGFpbHNSb3dzIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InBlcnNvbk9yT3JnIiBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6cmVjb3JkVGFyZ2V0L2NkYTpwYXRpZW50Um9sZSIvPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iaXNQYXRpZW50IiBzZWxlY3Q9Iid0cnVlJyIgLz4NCiAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3Rib2R5PiAtLT4NCiAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RhYmxlPiAtLT4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCg0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0iZ2V0QXV0aG9yRGV0YWlscyI+DQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iYXV0aG9yT3JnIiBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6YXV0aG9yL2NkYTphc3NpZ25lZEF1dGhvci9jZGE6YXNzaWduZWRQZXJzb24vZXh0OmFzRW1wbG95bWVudC9leHQ6ZW1wbG95ZXJPcmdhbml6YXRpb24vY2RhOmFzT3JnYW5pemF0aW9uUGFydE9mL2NkYTp3aG9sZU9yZ2FuaXphdGlvbi9jZGE6bmFtZSIvPg0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImF1dGhvckRlcGFydG1lbnQiIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTphdXRob3IvY2RhOmFzc2lnbmVkQXV0aG9yL2NkYTphc3NpZ25lZFBlcnNvbi9leHQ6YXNFbXBsb3ltZW50L2V4dDplbXBsb3llck9yZ2FuaXphdGlvbi9jZGE6bmFtZSIvPg0KICAgICAgICANCiAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImRpdiI+DQogICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZUhlYWRlckRpdjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkY2RhRG9jdW1lbnRUeXBlPSRESF9NSFJfUFJFU0NSSVBUSU9OX1JFQ09SRF9DTElOSUNBTF9ET0NVTUVOVF9UWVBFX05BTUUiPlByZXNjcmliZXI8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkY2RhRG9jdW1lbnRUeXBlPSRESF9NSFJfRElTUEVOU0VfUkVDT1JEX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSI+RGlzcGVuc2VyPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT5BdXRob3I8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC9kaXY+IC0tPg0KICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGFibGUiPg0KICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ic3VtbWFyeSI+QVVUSE9SX0RFVEFJTFNfVEFCTEU8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZTwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0Ym9keSI+DQogICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmF1dGhvci9jZGE6YXNzaWduZWRBdXRob3IvY2RhOmFzc2lnbmVkQXV0aG9yaW5nRGV2aWNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRoIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InNwYW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaFNwYW48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXZpY2UgTmFtZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90aD4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6YXV0aG9yL2NkYTphc3NpZ25lZEF1dGhvci9jZGE6YXNzaWduZWRBdXRob3JpbmdEZXZpY2UvY2RhOnNvZnR3YXJlTmFtZS90ZXh0KCkiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6YXV0aG9yL2NkYTphc3NpZ25lZEF1dGhvci9jZGE6YXNzaWduZWRBdXRob3JpbmdEZXZpY2UvZXh0OmFzRW50aXR5SWRlbnRpZmllciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0UHJvdmlkZXJEZXZpY2VJZGVudGlmaWVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZW50aXR5SWRlbnRpZmllciIgc2VsZWN0PSIuIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGQ+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RyPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0aCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJzcGFuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGhTcGFuPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTmFtZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90aD4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6YXV0aG9yL2NkYTphc3NpZ25lZEF1dGhvci9jZGE6YXNzaWduZWRQZXJzb24vY2RhOm5hbWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSJwb3NpdGlvbigpID4gMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRBS0FfU1RSSU5HIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJzaG93LW5hbWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJuYW1lIiBzZWxlY3Q9Ii4iLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9InBvc2l0aW9uKCkhPWxhc3QoKSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImJyIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTphdXRob3IvY2RhOmFzc2lnbmVkQXV0aG9yL2NkYTpjb2RlL0BkaXNwbGF5TmFtZSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTphdXRob3IvY2RhOmFzc2lnbmVkQXV0aG9yL2NkYTpjb2RlL0BkaXNwbGF5TmFtZSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4gKDwveHNsOnRleHQ+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6YXV0aG9yL2NkYTphc3NpZ25lZEF1dGhvci9jZGE6Y29kZS9AZGlzcGxheU5hbWUiLz48eHNsOnRleHQ+KTwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iYnIiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOmF1dGhvci9jZGE6YXNzaWduZWRBdXRob3IvY2RhOmFzc2lnbmVkUGVyc29uL2V4dDphc0VudGl0eUlkZW50aWZpZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldFByb3ZpZGVySW5kaXZpZHVhbElkZW50aWZpZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJlbnRpdHlJZGVudGlmaWVyIiBzZWxlY3Q9Ii4iLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90ZD4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdHI+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iLy9leHQ6Y292ZXJhZ2UyW0B0eXBlQ29kZT0nQ09WQlknXS9leHQ6ZW50aXRsZW1lbnRbQGNsYXNzQ29kZT0nQ09WJyBhbmQgQG1vb2RDb2RlPSdFVk4nIGFuZCBleHQ6cGFydGljaXBhbnRbQHR5cGVDb2RlPSdITEQnXS9leHQ6cGFydGljaXBhbnRSb2xlW0BjbGFzc0NvZGU9J0FTU0lHTkVEJ11dIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9Ii4vZXh0OnBhcnRpY2lwYW50L2V4dDpwYXJ0aWNpcGFudFJvbGUvZXh0OmlkL0Byb290ID0gL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTphdXRob3IvY2RhOmFzc2lnbmVkQXV0aG9yL2NkYTppZC9Acm9vdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImVudGl0bGVtZW50VHlwZSIgc2VsZWN0PSJleHQ6Y29kZS9AZGlzcGxheU5hbWUiPjwveHNsOnZhcmlhYmxlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImVudGl0bGVtZW50TnVtYmVyIiBzZWxlY3Q9ImV4dDppZC9AZXh0ZW5zaW9uIj48L3hzbDp2YXJpYWJsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InNwYW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoU3BhbjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0icG9zaXRpb24oKT0xIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+RW50aXRsZW1lbnRzPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZS8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RoPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGVudGl0bGVtZW50TnVtYmVyIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIkZW50aXRsZW1lbnRUeXBlIGFuZCANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgkZW50aXRsZW1lbnRUeXBlKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+ICg8L3hzbDp0ZXh0Pjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZW50aXRsZW1lbnRUeXBlIi8+PHhzbDp0ZXh0Pik8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RyPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9InN0cmluZy1sZW5ndGgoJGF1dGhvck9yZykgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJzcGFuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoU3BhbjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+T3JnYW5pc2F0aW9uPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90aD4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRkPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRhdXRob3JPcmciLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdHI+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0ic3RyaW5nLWxlbmd0aCgkYXV0aG9yRGVwYXJ0bWVudCkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJzcGFuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoU3BhbjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+RGVwYXJ0bWVudDwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGg+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkYXV0aG9yRGVwYXJ0bWVudCIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGQ+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90cj4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldEFkZHJlc3NEZXRhaWxzUm93cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InBlcnNvbk9yT3JnIiBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6YXV0aG9yL2NkYTphc3NpZ25lZEF1dGhvciIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldENvbnRhY3REZXRhaWxzUm93cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InBlcnNvbk9yT3JnIiBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6YXV0aG9yL2NkYTphc3NpZ25lZEF1dGhvciIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90Ym9keT4gLS0+DQogICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90YWJsZT4gLS0+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJnZXREb2N1bWVudERldGFpbHMiPg0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImRvY3VtZW50SWQiPg0KICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldERvY3VtZW50SWRlbnRpZmllciI+DQogICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImlpVmFyaWFibGUiIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTppZCIvPg0KICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgIA0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImRvY3VtZW50U2V0SWQiPg0KICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldERvY3VtZW50SWRlbnRpZmllciI+DQogICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImlpVmFyaWFibGUiIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpzZXRJZCIvPg0KICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgIA0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImRvY3VtZW50VmVyc2lvbiIgc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOnZlcnNpb25OdW1iZXIvQHZhbHVlIi8+DQogICAgICAgIA0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImNvbXBsZXRpb25Db2RlIj4NCiAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2V4dDpjb21wbGV0aW9uQ29kZSBhbmQNCiAgICAgICAgICAgICAgICAvY2RhOkNsaW5pY2FsRG9jdW1lbnQvZXh0OmNvbXBsZXRpb25Db2RlL0Bjb2RlU3lzdGVtIGFuZA0KICAgICAgICAgICAgICAgIC9jZGE6Q2xpbmljYWxEb2N1bWVudC9leHQ6Y29tcGxldGlvbkNvZGUvQGNvZGVTeXN0ZW09JzEuMi4zNi4xLjIwMDEuMTAwMS4xMDEuMTA0LjIwMTA0JyBhbmQNCiAgICAgICAgICAgICAgICAvY2RhOkNsaW5pY2FsRG9jdW1lbnQvZXh0OmNvbXBsZXRpb25Db2RlL0Bjb2RlIGFuZA0KICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoL2NkYTpDbGluaWNhbERvY3VtZW50L2V4dDpjb21wbGV0aW9uQ29kZS9AY29kZSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9leHQ6Y29tcGxldGlvbkNvZGUvQGNvZGU9J0YnIj5GaW5hbDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvZXh0OmNvbXBsZXRpb25Db2RlL0Bjb2RlPSdJJyI+SW50ZXJpbTwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvZXh0OmNvbXBsZXRpb25Db2RlL0Bjb2RlPSdXJyI+V2l0aGRyYXduPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2UvPg0KICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICAgICAgDQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZGF0ZVRpbWVBdHRlc3RlZCI+DQogICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0ic2hvdy10aW1lIj4NCiAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZGF0ZXRpbWUiIHNlbGVjdD0iL2NkYTpDbGluaWNhbERvY3VtZW50L2NkYTpsZWdhbEF1dGhlbnRpY2F0b3IvY2RhOnRpbWUiLz4NCiAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgIDwveHNsOnZhcmlhYmxlPg0KDQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0icmVwbGFjZW1lbnRTdGF0dXNEb2N1bWVudElkIj4NCiAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXREb2N1bWVudElkZW50aWZpZXIiPg0KICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJpaVZhcmlhYmxlIiBzZWxlY3Q9Ii9jZGE6Q2xpbmljYWxEb2N1bWVudC9jZGE6cmVsYXRlZERvY3VtZW50W0B0eXBlQ29kZT0nUlBMQyddL2NkYTpwYXJlbnREb2N1bWVudC9jZGE6aWQiLz4NCiAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgIDwveHNsOnZhcmlhYmxlPg0KICAgICAgICANCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJyZXBsYWNlbWVudFN0YXR1cyI+DQogICAgICAgICAgICA8eHNsOmlmIHRlc3Q9InN0cmluZy1sZW5ndGgoJHJlcGxhY2VtZW50U3RhdHVzRG9jdW1lbnRJZCkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJHJlcGxhY2VtZW50U3RhdHVzRG9jdW1lbnRJZCIvPg0KICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgIDwveHNsOnZhcmlhYmxlPg0KDQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0idHJhbnNmb3JtU3RhdHVzRG9jdW1lbnRJZCI+DQogICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0RG9jdW1lbnRJZGVudGlmaWVyIj4NCiAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iaWlWYXJpYWJsZSIgc2VsZWN0PSIvY2RhOkNsaW5pY2FsRG9jdW1lbnQvY2RhOnJlbGF0ZWREb2N1bWVudFtAdHlwZUNvZGU9J1hGUk0nXS9jZGE6cGFyZW50RG9jdW1lbnQvY2RhOmlkIi8+DQogICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICAgICAgDQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0idHJhbnNmb3JtU3RhdHVzIj4NCiAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0ic3RyaW5nLWxlbmd0aCgkdHJhbnNmb3JtU3RhdHVzRG9jdW1lbnRJZCkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJHRyYW5zZm9ybVN0YXR1c0RvY3VtZW50SWQiLz4NCiAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICAgICAgDQogICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkaXYiPg0KICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVIZWFkZXJEaXY8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICBDbGluaWNhbCBEb2N1bWVudCBEZXRhaWxzDQogICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC9kaXY+IC0tPg0KICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGFibGUiPiAgICAgICAgICAgIA0KICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ic3VtbWFyeSI+RE9DVU1FTlRfREVUQUlMU19UQUJMRTwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRib2R5Ij4NCiAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJzcGFuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoU3BhbjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEb2N1bWVudCBUeXBlDQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGg+IC0tPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkY2RhRG9jdW1lbnRUeXBlIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRjZGFEb2N1bWVudFR5cGUpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkY2RhRG9jdW1lbnRUeXBlIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm90IFByb3ZpZGVkDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGQ+IC0tPg0KICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90cj4gLS0+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRyIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRoIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3BhbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaFNwYW48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3JlYXRpb24gRGF0ZS9UaW1lDQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGg+IC0tPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkY2RhRG9jdW1lbnRDcmVhdGlvblRpbWUgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoJGNkYURvY3VtZW50Q3JlYXRpb25UaW1lKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGNkYURvY3VtZW50Q3JlYXRpb25UaW1lIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0Pk5vdCBQcm92aWRlZDwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGQ+IC0tPg0KICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90cj4gLS0+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRyIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRoIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3BhbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaFNwYW48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRGF0ZS9UaW1lIEF0dGVzdGVkDQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGg+IC0tPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkZGF0ZVRpbWVBdHRlc3RlZCBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgkZGF0ZVRpbWVBdHRlc3RlZCkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRkYXRlVGltZUF0dGVzdGVkIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0Pk5vdCBQcm92aWRlZDwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGQ+IC0tPg0KICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90cj4gLS0+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRyIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRoIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3BhbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaFNwYW48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRG9jdW1lbnQgSUQNCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90aD4gLS0+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRkPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRkb2N1bWVudElkIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRkb2N1bWVudElkKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGRvY3VtZW50SWQiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb3QgUHJvdmlkZWQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90ZD4gLS0+DQogICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RyPiAtLT4NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9IiRkb2N1bWVudFNldElkIGFuZA0KICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRkb2N1bWVudFNldElkKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRoIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJzcGFuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaFNwYW48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvY3VtZW50IFNldCBJRA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGg+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRkPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZG9jdW1lbnRTZXRJZCIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RyPiAtLT4NCiAgICAgICAgICAgICAgICA8L3hzbDppZj4NCg0KICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iJGRvY3VtZW50VmVyc2lvbiBhbmQNCiAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgkZG9jdW1lbnRWZXJzaW9uKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRoIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJzcGFuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaFNwYW48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvY3VtZW50IFZlcnNpb24NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RoPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGRvY3VtZW50VmVyc2lvbiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RyPiAtLT4NCiAgICAgICAgICAgICAgICA8L3hzbDppZj4NCg0KICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iJGNvbXBsZXRpb25Db2RlIGFuZA0KICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRjb21wbGV0aW9uQ29kZSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0aCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3BhbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGhTcGFuPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb21wbGV0aW9uIENvZGUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RoPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRjb21wbGV0aW9uQ29kZT0nV2l0aGRyYXduJyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3BhbiI+PHhzbDphdHRyaWJ1dGUgbmFtZT0ic3R5bGUiPmZvbnQtd2VpZ2h0OiBib2xkOzwveHNsOmF0dHJpYnV0ZT5XSVRIRFJBV048L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkY29tcGxldGlvbkNvZGUiLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGQ+IC0tPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdHI+IC0tPg0KICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KDQogICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSJzdHJpbmctbGVuZ3RoKCRyZXBsYWNlbWVudFN0YXR1cykgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0aCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3BhbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGhTcGFuPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZXBsYWNlcyBEb2N1bWVudCBJRA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGg+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRkPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkcmVwbGFjZW1lbnRTdGF0dXMiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90cj4gLS0+DQogICAgICAgICAgICAgICAgPC94c2w6aWY+DQoNCiAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9InN0cmluZy1sZW5ndGgoJHRyYW5zZm9ybVN0YXR1cykgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0aCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3BhbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGhTcGFuPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTb3VyY2UgUmVjb3JkIElEDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90aD4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiR0cmFuc2Zvcm1TdGF0dXMiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90cj4gLS0+DQogICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGJvZHk+IC0tPg0KICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGFibGU+IC0tPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KICAgIA0KICAgIDwhLS09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PS0tPiAgIA0KICAgIDwhLS0gW0VORF0gMS4yIFRFTVBMQVRFUyAtLT4NCiAgICANCg0KICAgIDwhLS0gREVUQUlMUyBURU1QTEFURVMgLS0+DQogICAgPCEtLT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09LS0+ICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJnZXRQYXJ0aWNpcGFudHNUYWJsZSI+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0icGFydGljaXBhbnRzIi8+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0idGl0bGUiPjwveHNsOnBhcmFtPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9InRhYmxlSWQiPjwveHNsOnBhcmFtPg0KICAgICAgICANCiAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImgxIj4NCiAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5wYXJ0aWNpcGFudHNIZWFkZXI8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAmIzE2MDtQYXJ0aWNpcGFudHMNCiAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRhYmxlIj4NCiAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImlkIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJHRhYmxlSWQiLz48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+cGFydGljaXBhbnRzVGFibGVDbGFzczwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9InN1bW1hcnkiPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkdGl0bGUiLz48L3hzbDphdHRyaWJ1dGU+ICAgICAgICAgICAgDQogICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iY29sZ3JvdXAiPg0KICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJjb2wiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJzdHlsZSI+d2lkdGg6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkRklGVEhfQ09OVEVOVF9XSURUSF9QQ1QiLz4lOzwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvY29sPiAtLT4NCiAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iY29sIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ic3R5bGUiPndpZHRoOiA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJEZJRlRIX0NPTlRFTlRfV0lEVEhfUENUIi8+JTs8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L2NvbD4gLS0+DQogICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImNvbCI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9InN0eWxlIj53aWR0aDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRGSUZUSF9DT05URU5UX1dJRFRIX1BDVCIvPiU7PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC9jb2w+IC0tPg0KICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJjb2wiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJzdHlsZSI+d2lkdGg6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkRklGVEhfQ09OVEVOVF9XSURUSF9QQ1QiLz4lOzwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvY29sPiAtLT4NCiAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iY29sIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ic3R5bGUiPndpZHRoOiA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJEZJRlRIX0NPTlRFTlRfV0lEVEhfUENUIi8+JTs8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L2NvbD4gLS0+DQogICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRoZWFkIj4NCiAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPlBBUlRJQ0lQQU5UX0hFQURFUl9ST1dfVEg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICBOYW1lDQogICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90aD4gLS0+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0aCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+UEFSVElDSVBBTlRfSEVBREVSX1JPV19USDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRhY3QNCiAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RoPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRoIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5QQVJUSUNJUEFOVF9IRUFERVJfUk9XX1RIPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgQWRkcmVzcw0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGg+IC0tPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPlBBUlRJQ0lQQU5UX0hFQURFUl9ST1dfVEg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICBPcmdhbmlzYXRpb24NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RoPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRoIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5QQVJUSUNJUEFOVF9IRUFERVJfUk9XX1RIPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgRGVwYXJ0bWVudA0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGg+IC0tPg0KICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90cj4gLS0+DQogICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGhlYWQ+IC0tPg0KICAgICAgICAgICAgDQogICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGJvZHkiPg0KICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSIkcGFydGljaXBhbnRzIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iLi9AdHlwZUNvZGU9J1BBUlQnIGFuZCBjZGE6ZnVuY3Rpb25Db2RlL0Bjb2RlPSdQQ1AnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRjZGFEb2N1bWVudFR5cGU9JERIX0RJU0NIQVJHRV9TVU1NQVJZX0NMSU5JQ0FMX0RPQ1VNRU5UX1RZUEVfTkFNRSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0UGFydGljaXBhbnRzVGFibGVCb2R5Um93Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0icGFydGljaXBhbnRUeXBlIj5Ob21pbmF0ZWQgUHJpbWFyeSBIZWFsdGhjYXJlIFByb3ZpZGVyIFBlcnNvbjwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXRQYXJ0aWNpcGFudHNUYWJsZUJvZHlSb3ciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJwYXJ0aWNpcGFudFR5cGUiPlVzdWFsIEdQPC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii4vQHR5cGVDb2RlPSdJUkNQJyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldFBhcnRpY2lwYW50c1RhYmxlQm9keVJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJwYXJ0aWNpcGFudFR5cGUiPlBhdGllbnQncyBOb21pbmF0ZWQgQ29udGFjdDwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0UGFydGljaXBhbnRzVGFibGVCb2R5Um93Ii8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4gICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90Ym9keT4gLS0+DQogICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90YWJsZT4gLS0+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJnZXRSZWNpcGllbnRzVGFibGUiPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9InJlY2lwaWVudHMiLz4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJ0aXRsZSI+PC94c2w6cGFyYW0+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0idGFibGVJZCI+PC94c2w6cGFyYW0+DQogICAgICAgIA0KICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iaDEiPg0KICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPnBhcnRpY2lwYW50c0hlYWRlcjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICYjMTYwOzx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkdGl0bGUiLz4NCiAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgDQogICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0YWJsZSI+DQogICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJpZCI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiR0YWJsZUlkIi8+PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPnBhcnRpY2lwYW50c1RhYmxlQ2xhc3M8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJzdW1tYXJ5Ij48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJHRpdGxlIi8+PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImNvbGdyb3VwIj4NCiAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iY29sIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ic3R5bGUiPndpZHRoOiA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJFFVQVJURVJfQ09OVEVOVF9XSURUSF9QQ1QiLz4lOzwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvY29sPiAtLT4NCiAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iY29sIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ic3R5bGUiPndpZHRoOiA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJFFVQVJURVJfQ09OVEVOVF9XSURUSF9QQ1QiLz4lOzwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvY29sPiAtLT4NCiAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iY29sIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ic3R5bGUiPndpZHRoOiA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJFFVQVJURVJfQ09OVEVOVF9XSURUSF9QQ1QiLz4lOzwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvY29sPiAtLT4NCiAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iY29sIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ic3R5bGUiPndpZHRoOiA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJFFVQVJURVJfQ09OVEVOVF9XSURUSF9QQ1QiLz4lOzwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvY29sPiAtLT4NCiAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGhlYWQiPg0KICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ciI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0aCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+UkVDSVBJRU5UX0hFQURFUl9ST1dfVEg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICBOYW1lDQogICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90aD4gLS0+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0aCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+UkVDSVBJRU5UX0hFQURFUl9ST1dfVEg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICBDb250YWN0DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90aD4gLS0+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0aCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+UkVDSVBJRU5UX0hFQURFUl9ST1dfVEg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICBBZGRyZXNzDQogICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90aD4gLS0+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0aCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+UkVDSVBJRU5UX0hFQURFUl9ST1dfVEg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICBPcmdhbmlzYXRpb24NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RoPiAtLT4NCiAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdHI+IC0tPg0KICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RoZWFkPiAtLT4NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRib2R5Ij4NCiAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iJHJlY2lwaWVudHMiPiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXRSZWNpcGllbnRzVGFibGVCb2R5Um93Ii8+DQogICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+DQogICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGJvZHk+IC0tPg0KICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGFibGU+IC0tPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJnZXRQYXJ0aWNpcGFudHNUYWJsZUJvZHlSb3ciPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9InBhcnRpY2lwYW50VHlwZSIvPg0KICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+UEFSVElDSVBBTlRfQk9EWV9ST1dfVEQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9Ii4vY2RhOmFzc29jaWF0ZWRFbnRpdHkvY2RhOmFzc29jaWF0ZWRQZXJzb24vY2RhOm5hbWUiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9InBvc2l0aW9uKCkgPiAxIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkQUtBX1NUUklORyIvPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InNob3ctbmFtZSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ibmFtZSIgc2VsZWN0PSIuIi8+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iJHBhcnRpY2lwYW50VHlwZSBhbmQgKHN0cmluZy1sZW5ndGgoJHBhcnRpY2lwYW50VHlwZSkgJmd0OyAwKSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iY29uY2F0KCcgKCcsICRwYXJ0aWNpcGFudFR5cGUsICcpJykiLz4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJiciIvPg0KICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iLi9jZGE6YXNzb2NpYXRlZEVudGl0eS9jZGE6YXNzb2NpYXRlZFBlcnNvbi9leHQ6YXNFbXBsb3ltZW50W0BjbGFzc0NvZGU9J0VNUCddL2V4dDpqb2JDb2RlL2NkYTpvcmlnaW5hbFRleHQgb3INCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4vY2RhOmFzc29jaWF0ZWRFbnRpdHkvY2RhOmFzc29jaWF0ZWRQZXJzb24vZXh0OmFzRW1wbG95bWVudFtAY2xhc3NDb2RlPSdFTVAnXS9leHQ6am9iQ29kZS9AZGlzcGxheU5hbWUiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0UHJvdmlkZXJJbmRpdmlkdWFsT2NjdXBhdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iam9iQ29kZSIgc2VsZWN0PSIuL2NkYTphc3NvY2lhdGVkRW50aXR5L2NkYTphc3NvY2lhdGVkUGVyc29uL2V4dDphc0VtcGxveW1lbnRbQGNsYXNzQ29kZT0nRU1QJ10vZXh0OmpvYkNvZGUiLz4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9Ii4vY2RhOmFzc29jaWF0ZWRFbnRpdHkvY2RhOmFzc29jaWF0ZWRQZXJzb24vZXh0OmFzUXVhbGlmaWNhdGlvbnMvZXh0OmNvZGUvY2RhOm9yaWdpbmFsVGV4dCBhbmQNCiAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCguL2NkYTphc3NvY2lhdGVkRW50aXR5L2NkYTphc3NvY2lhdGVkUGVyc29uL2V4dDphc1F1YWxpZmljYXRpb25zL2V4dDpjb2RlL2NkYTpvcmlnaW5hbFRleHQvdGV4dCgpKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0UHJvdmlkZXJJbmRpdmlkdWFsUXVhbGlmaWNhdGlvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InF1YWxpZmljYXRpb25zIiBzZWxlY3Q9Ii4vY2RhOmFzc29jaWF0ZWRFbnRpdHkvY2RhOmFzc29jaWF0ZWRQZXJzb24vZXh0OmFzUXVhbGlmaWNhdGlvbnMvZXh0OmNvZGUvY2RhOm9yaWdpbmFsVGV4dC90ZXh0KCkiLz4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iLi9jZGE6YXNzb2NpYXRlZEVudGl0eS9jZGE6YXNzb2NpYXRlZFBlcnNvbi9leHQ6YXNFbnRpdHlJZGVudGlmaWVyIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldFByb3ZpZGVySW5kaXZpZHVhbElkZW50aWZpZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImVudGl0eUlkZW50aWZpZXIiIHNlbGVjdD0iLiIvPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4NCg0KICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+UEFSVElDSVBBTlRfQk9EWV9ST1dfVEQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldENvbnRhY3REZXRhaWxzIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InBlcnNvbk9yT3JnIiBzZWxlY3Q9Ii4vY2RhOmFzc29jaWF0ZWRFbnRpdHkiLz4NCiAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4NCg0KICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+UEFSVElDSVBBTlRfQk9EWV9ST1dfVEQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJjb3VudCguL2NkYTphc3NvY2lhdGVkRW50aXR5L2NkYTphZGRyWyRzaG93UHJvdmlkZXJIb21lRGV0YWlscyA9ICd0cnVlJyBvciBub3QoY29udGFpbnMoQHVzZSwgJ0gnKSldKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImRsIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+YWRkcmVzc2RsPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSIuL2NkYTphc3NvY2lhdGVkRW50aXR5L2NkYTphZGRyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldEFkZHJlc3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImFkZHJlc3MiIHNlbGVjdD0iLiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L2RsPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iZGwiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5hZGRyZXNzZGw8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgTm90IFByb3ZpZGVkDQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvZGw+IC0tPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+UEFSVElDSVBBTlRfQk9EWV9ST1dfVEQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9Ii4vY2RhOmFzc29jaWF0ZWRFbnRpdHkvY2RhOmFzc29jaWF0ZWRQZXJzb24vZXh0OmFzRW1wbG95bWVudC9leHQ6ZW1wbG95ZXJPcmdhbml6YXRpb24vY2RhOmFzT3JnYW5pemF0aW9uUGFydE9mL2NkYTp3aG9sZU9yZ2FuaXphdGlvbiI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSIuL2NkYTpuYW1lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0ic3RyaW5nLWxlbmd0aCguKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0icG9zaXRpb24oKSA+IDEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJEFLQV9TVFJJTkciLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLiIvPjx4c2w6ZWxlbWVudCBuYW1lPSJiciIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iLi9leHQ6YXNFbnRpdHlJZGVudGlmaWVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXRQcm92aWRlck9yZ2FuaXNhdGlvbklkZW50aWZpZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJlbnRpdHlJZGVudGlmaWVyIiBzZWxlY3Q9Ii4iLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iYnIiLz4NCiAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90ZD4gLS0+DQoNCiAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPlBBUlRJQ0lQQU5UX0JPRFlfUk9XX1REPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSIuL2NkYTphc3NvY2lhdGVkRW50aXR5L2NkYTphc3NvY2lhdGVkUGVyc29uL2V4dDphc0VtcGxveW1lbnQvZXh0OmVtcGxveWVyT3JnYW5pemF0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9Ii4vY2RhOm5hbWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSJzdHJpbmctbGVuZ3RoKC4pICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSJwb3NpdGlvbigpID4gMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkQUtBX1NUUklORyIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIuIi8+PHhzbDplbGVtZW50IG5hbWU9ImJyIi8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSIuL2V4dDphc0VudGl0eUlkZW50aWZpZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldFByb3ZpZGVyT3JnYW5pc2F0aW9uSWRlbnRpZmllciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImVudGl0eUlkZW50aWZpZXIiIHNlbGVjdD0iLiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJiciIvPg0KICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgDQogICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90cj4gLS0+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJnZXRSZWNpcGllbnRzVGFibGVCb2R5Um93Ij4NCiAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRyIj4NCiAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPlJFQ0lQSUVOVF9IRUFERVJfUk9XX1REPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSIuL2NkYTppbmZvcm1hdGlvblJlY2lwaWVudC9jZGE6bmFtZSI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0icG9zaXRpb24oKSA+IDEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRBS0FfU1RSSU5HIi8+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0ic2hvdy1uYW1lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJuYW1lIiBzZWxlY3Q9Ii4iLz4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImJyIi8+DQogICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+DQogICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIuL2NkYTppbmZvcm1hdGlvblJlY2lwaWVudC9leHQ6YXNFbXBsb3ltZW50W0BjbGFzc0NvZGU9J0VNUCddL2V4dDpqb2JDb2RlL2NkYTpvcmlnaW5hbFRleHQgb3INCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4vY2RhOmluZm9ybWF0aW9uUmVjaXBpZW50L2V4dDphc0VtcGxveW1lbnRbQGNsYXNzQ29kZT0nRU1QJ10vZXh0OmpvYkNvZGUvQGRpc3BsYXlOYW1lIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldFByb3ZpZGVySW5kaXZpZHVhbE9jY3VwYXRpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImpvYkNvZGUiIHNlbGVjdD0iLi9jZGE6aW5mb3JtYXRpb25SZWNpcGllbnQvZXh0OmFzRW1wbG95bWVudFtAY2xhc3NDb2RlPSdFTVAnXS9leHQ6am9iQ29kZSIvPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iLi9jZGE6aW5mb3JtYXRpb25SZWNpcGllbnQvZXh0OmFzUXVhbGlmaWNhdGlvbnMvZXh0OmNvZGUvY2RhOm9yaWdpbmFsVGV4dCBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoLi9jZGE6aW5mb3JtYXRpb25SZWNpcGllbnQvZXh0OmFzUXVhbGlmaWNhdGlvbnMvZXh0OmNvZGUvY2RhOm9yaWdpbmFsVGV4dC90ZXh0KCkpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXRQcm92aWRlckluZGl2aWR1YWxRdWFsaWZpY2F0aW9ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0icXVhbGlmaWNhdGlvbnMiIHNlbGVjdD0iLi9jZGE6aW5mb3JtYXRpb25SZWNpcGllbnQvZXh0OmFzUXVhbGlmaWNhdGlvbnMvZXh0OmNvZGUvY2RhOm9yaWdpbmFsVGV4dC90ZXh0KCkiLz4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iLi9jZGE6aW5mb3JtYXRpb25SZWNpcGllbnQvZXh0OmFzRW50aXR5SWRlbnRpZmllciI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXRQcm92aWRlckluZGl2aWR1YWxJZGVudGlmaWVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJlbnRpdHlJZGVudGlmaWVyIiBzZWxlY3Q9Ii4iLz4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90ZD4gLS0+DQogICAgICAgICAgICANCiAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPlJFQ0lQSUVOVF9IRUFERVJfUk9XX1REPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXRDb250YWN0RGV0YWlscyI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJwZXJzb25Pck9yZyIgc2VsZWN0PSIuIi8+DQogICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90ZD4gLS0+DQogICAgICAgICAgICANCiAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPlJFQ0lQSUVOVF9IRUFERVJfUk9XX1REPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iY291bnQoLi9jZGE6YWRkclskc2hvd1Byb3ZpZGVySG9tZURldGFpbHMgPSAndHJ1ZScgb3Igbm90KGNvbnRhaW5zKEB1c2UsICdIJykpXSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkbCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmFkZHJlc3NkbDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iLi9jZGE6YWRkciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0QWRkcmVzcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iYWRkcmVzcyIgc2VsZWN0PSIuIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L2RsPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iZGwiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5hZGRyZXNzZGw8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgTm90IFByb3ZpZGVkDQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvZGw+IC0tPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+UkVDSVBJRU5UX0hFQURFUl9ST1dfVEQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9Ii4vY2RhOnJlY2VpdmVkT3JnYW5pemF0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9Ii4vY2RhOm5hbWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSJzdHJpbmctbGVuZ3RoKC4pICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSJwb3NpdGlvbigpID4gMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkQUtBX1NUUklORyIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIuIi8+PHhzbDplbGVtZW50IG5hbWU9ImJyIi8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSIuL2V4dDphc0VudGl0eUlkZW50aWZpZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldFByb3ZpZGVyT3JnYW5pc2F0aW9uSWRlbnRpZmllciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImVudGl0eUlkZW50aWZpZXIiIHNlbGVjdD0iLiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJiciIvPg0KICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4NCiAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RyPiAtLT4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgICANCiAgICA8IS0tPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0tLT4NCiAgICA8IS0tIFtFTkRdIERFVEFJTFMgVEVNUExBVEVTIC0tPg0KICAgIA0KDQoNCg0KICAgIDwhLS0gQ0RBIEJPRFkgVEVNUExBVEVTIC0tPg0KICAgIDwhLS09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PS0tPg0KICAgIA0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0icHJvY2Vzc1N0cnVjdHVyZWRCb2R5Ij4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJzdHJ1Y3R1cmVkQm9keSIvPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9InByb2Nlc3NBZG1pbmlzdHJhdGl2ZU9ic2VydmF0aW9ucyI+PC94c2w6cGFyYW0+DQogICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRwcm9jZXNzQWRtaW5pc3RyYXRpdmVPYnNlcnZhdGlvbnM9J3llcyciPg0KICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSIkc3RydWN0dXJlZEJvZHkvY2RhOmNvbXBvbmVudC9jZGE6c2VjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iKGNkYTpjb2RlL0Bjb2RlPScxMDIuMTYwODAnKSBhbmQgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNkYTpjb2RlL0Bjb2RlU3lzdGVtPScxLjIuMzYuMS4yMDAxLjEwMDEuMTAxJykgYW5kIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjZGE6dGV4dCkgYW5kIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICggKHN0cmluZy1sZW5ndGgobm9ybWFsaXplLXNwYWNlKGNkYTp0ZXh0L3RleHQoKSkpICZndDsgMCkgb3IgKGNvdW50KGNkYTp0ZXh0LyopICZndDsgMCkpIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJzZWN0aW9uIi8+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSIkc3RydWN0dXJlZEJvZHkvY2RhOmNvbXBvbmVudC9jZGE6c2VjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0ibm90KChjZGE6Y29kZS9AY29kZT0nMTAyLjE2MDgwJykgYW5kIChjZGE6Y29kZS9AY29kZVN5c3RlbT0nMS4yLjM2LjEuMjAwMS4xMDAxLjEwMScpKSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0ic2VjdGlvbiIvPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KICAgIA0KICAgIDx4c2w6dGVtcGxhdGUgbWF0Y2g9ImNkYTpjb21wb25lbnQvY2RhOm5vblhNTEJvZHkiPg0KICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0icHJvY2Vzc0F0dGFjaG1lbnQiPg0KICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImVsZW1lbnQiIHNlbGVjdD0iLiIvPg0KICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0SG9yaXpvbnRhbFNwYWNlciIvPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KICAgICAgICANCiAgICA8IS0tPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0tLT4NCiAgICA8IS0tIFtFTkRdIENEQSBCT0RZIFRFTVBMQVRFUyAtLT4NCg0KDQoNCg0KICAgIDwhLS0gQ0RBIFNFQ1RJT04gVEVNUExBVEVTIC0tPg0KICAgIDwhLS09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PS0tPg0KDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJzZWN0aW9uIj4NCiAgICAgICAgPHhzbDppZiB0ZXN0PSJjZGE6dGl0bGUiPg0KICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii4uLy4uLy4uLy4uL2NkYTpjb21wb25lbnQvY2RhOnN0cnVjdHVyZWRCb2R5Ij4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InNlY3Rpb24tdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InRpdGxlIiBzZWxlY3Q9ImNkYTp0aXRsZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InNlY3Rpb25JZCIgc2VsZWN0PSIuL0BJRCIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9Im1hcmdpbiI+bm88L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJzZWN0aW9uLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJ0aXRsZSIgc2VsZWN0PSJjZGE6dGl0bGUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJzZWN0aW9uSWQiIHNlbGVjdD0iLi9ASUQiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJtYXJnaW4iPnllczwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InNlY3Rpb24tdGV4dCIvPg0KICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iY2RhOmNvbXBvbmVudC9jZGE6c2VjdGlvbiI+DQogICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0ibmVzdGVkU2VjdGlvbiIvPg0KICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCg0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0iZ2V0U2VjdGlvblBhdGgiPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9InNlY3Rpb24iLz4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJwcmV2aW91c1NlY3Rpb25UaXRsZSIvPg0KICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkc2VjdGlvbi8uLi8uLi8uLi9jZGE6c2VjdGlvbiI+DQogICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldFNlY3Rpb25QYXRoIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InNlY3Rpb24iIHNlbGVjdD0iJHNlY3Rpb24vLi4vLi4vLi4vY2RhOnNlY3Rpb24iLz4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InByZXZpb3VzU2VjdGlvblRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkcHJldmlvdXNTZWN0aW9uVGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkc2VjdGlvbi9jZGE6dGl0bGUgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgkc2VjdGlvbi9jZGE6dGl0bGUpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNvbmNhdCgkc2VjdGlvbi9jZGE6dGl0bGUsICRTRUNUSU9OX1RJVExFX05BVklHQVRJT05fU0VQQVJBVE9SLCAkcHJldmlvdXNTZWN0aW9uVGl0bGUpIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNvbmNhdCgnVW5sYWJlbGVkIFNlY3Rpb24nLCAkU0VDVElPTl9USVRMRV9OQVZJR0FUSU9OX1NFUEFSQVRPUiwgJHByZXZpb3VzU2VjdGlvblRpdGxlKSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJHNlY3Rpb24vY2RhOnRpdGxlIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoJHNlY3Rpb24vY2RhOnRpdGxlKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkc2VjdGlvbi9jZGE6dGl0bGUiLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PlVubGFiZWxlZCBTZWN0aW9uPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJHNlY3Rpb24vY2RhOnRpdGxlIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgkc2VjdGlvbi9jZGE6dGl0bGUpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iY29uY2F0KCRzZWN0aW9uL2NkYTp0aXRsZSwgJFNFQ1RJT05fVElUTEVfTkFWSUdBVElPTl9TRVBBUkFUT1IsICRwcmV2aW91c1NlY3Rpb25UaXRsZSkiLz4gICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjb25jYXQoJ1VubGFiZWxlZCBTZWN0aW9uJywgJFNFQ1RJT05fVElUTEVfTkFWSUdBVElPTl9TRVBBUkFUT1IsICRwcmV2aW91c1NlY3Rpb25UaXRsZSkiLz4gICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgPC94c2w6dGVtcGxhdGU+ICAgIA0KICAgIA0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0ic2VjdGlvbi10aXRsZSI+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0idGl0bGUiLz4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJzZWN0aW9uSWQiLz4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJtYXJnaW4iLz4NCiAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iY29udGFpbnMoJHRpdGxlLCAkU0VDVElPTl9USVRMRV9OQVZJR0FUSU9OX1NFUEFSQVRPUikiPg0KICAgICAgICAgICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iYWN0dWFsU2VjdGlvblRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InN1YnN0cmluZy1hZnRlci1sYXN0LW9jY3VyYW5jZSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ic3RyaW5nIiBzZWxlY3Q9IiR0aXRsZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImFyZ3VtZW50IiBzZWxlY3Q9IiRTRUNUSU9OX1RJVExFX05BVklHQVRJT05fU0VQQVJBVE9SIi8+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgICAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJsZWFkSW4iPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iY29uY2F0KHN1YnN0cmluZy1iZWZvcmUoJHRpdGxlLCBjb25jYXQoJFNFQ1RJT05fVElUTEVfTkFWSUdBVElPTl9TRVBBUkFUT1IsICRhY3R1YWxTZWN0aW9uVGl0bGUpKSwgJFNFQ1RJT05fVElUTEVfTkFWSUdBVElPTl9TRVBBUkFUT1IpIi8+DQogICAgICAgICAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgICAgICAgICAgPHhzbDpjb21tZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNvbmNhdCgkbGVhZEluLCAkYWN0dWFsU2VjdGlvblRpdGxlKSIvPg0KICAgICAgICAgICAgICAgIDwveHNsOmNvbW1lbnQ+DQogICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImgxIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPm5lc3RlZFNlY3Rpb25IZWFkZXI8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iJG1hcmdpbj0neWVzJyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJzdHlsZSI+bWFyZ2luLWxlZnQ6IDIlOzwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iJHNlY3Rpb25JZCBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoJHNlY3Rpb25JZCkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkaXYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImlkIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJHNlY3Rpb25JZCIvPjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJuYW1lIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJHNlY3Rpb25JZCIvPjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJzdHlsZSI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNvbmNhdCgncG9zaXRpb246cmVsYXRpdmU7IHRvcDotJywgJEJBTk5FUl9IRUlHSFRfUFgsICdweDsnKSIvPjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGFjdHVhbFNlY3Rpb25UaXRsZSIvPiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iaDEiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+c2VjdGlvbkhlYWRlcjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIkbWFyZ2luPSd5ZXMnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9InN0eWxlIj5tYXJnaW4tbGVmdDogMiU7PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4gICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9IiRzZWN0aW9uSWQgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRzZWN0aW9uSWQpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iZGl2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJpZCI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRzZWN0aW9uSWQiLz48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ibmFtZSI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRzZWN0aW9uSWQiLz48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ic3R5bGUiPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjb25jYXQoJ3Bvc2l0aW9uOnJlbGF0aXZlOyB0b3A6LScsICRCQU5ORVJfSEVJR0hUX1BYLCAncHg7JykiLz48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiR0aXRsZSIvPg0KICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgIDwveHNsOmNob29zZT4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgICANCiAgICA8eHNsOnRlbXBsYXRlIG5hbWU9InNlY3Rpb24tdGV4dCI+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0ibWFyZ2luIi8+DQogICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkaXYiPg0KICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRtYXJnaW49J3llcyciPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+c2VjdGlvblBhZ2VXaWR0aE1pbnVzTWFyZ2luPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5zZWN0aW9uUGFnZVdpZHRoPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0ibm90KC4uLy4uLy4uLy4uL2NkYTpjb21wb25lbnQvY2RhOnN0cnVjdHVyZWRCb2R5KSI+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ic3R5bGUiPm1hcmdpbi1sZWZ0OiAyMHB4OzwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMgc2VsZWN0PSJjZGE6dGV4dCIvPg0KICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgIDwveHNsOnRlbXBsYXRlPg0KICAgIA0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0ibmVzdGVkU2VjdGlvbiI+DQogICAgICAgIA0KICAgICAgICANCiAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iY2RhOnRpdGxlIGFuZCBzdHJpbmctbGVuZ3RoKGNkYTp0aXRsZSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii4uLy4uLy4uLy4uL2NkYTpjb21wb25lbnQvY2RhOnN0cnVjdHVyZWRCb2R5Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJzZWN0aW9uLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0idGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0U2VjdGlvblBhdGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InNlY3Rpb24iIHNlbGVjdD0iLiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InNlY3Rpb25JZCIgc2VsZWN0PSIuL0BJRCIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InNlY3Rpb25JZCIgc2VsZWN0PSIuL0BJRCIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJtYXJnaW4iPm5vPC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0ic2VjdGlvbi10ZXh0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ibWFyZ2luIj5ubzwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJzZWN0aW9uLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0idGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZ2V0U2VjdGlvblBhdGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InNlY3Rpb24iIHNlbGVjdD0iLiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InNlY3Rpb25JZCIgc2VsZWN0PSIuL0BJRCIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InNlY3Rpb25JZCIgc2VsZWN0PSIuL0BJRCIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJtYXJnaW4iPnllczwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InNlY3Rpb24tdGV4dCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9Im1hcmdpbiI+eWVzPC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIuLi8uLi8uLi8uLi9jZGE6Y29tcG9uZW50L2NkYTpzdHJ1Y3R1cmVkQm9keSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0ic2VjdGlvbi10ZXh0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ibWFyZ2luIj5ubzwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJzZWN0aW9uLXRleHQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJtYXJnaW4iPnllczwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPiAgDQogICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgDQogICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSJjZGE6Y29tcG9uZW50L2NkYTpzZWN0aW9uIj4NCiAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJuZXN0ZWRTZWN0aW9uIi8+DQogICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KICAgIA0KICAgIDwhLS09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PS0tPg0KICAgIDwhLS0gW0VORF0gQ0RBIFNFQ1RJT04gVEVNUExBVEVTIC0tPg0KDQoNCiAgICANCg0KICAgIDwhLS0gQ0RBIE5BUlJBVElWRSBFTEVNRU5UIFRFTVBMQVRFUyAtLT4gICAgDQogICAgPCEtLT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09LS0+DQogICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBtYXRjaD0iY2RhOmZvb3Rub3RlIj4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJmb290bm90ZS1udW0iPg0KICAgICAgICAgICAgPHhzbDpudW1iZXIgbGV2ZWw9ImFueSIgY291bnQ9ImNkYTpmb290bm90ZSIvPg0KICAgICAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InN1cCI+DQogICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iYSI+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iaHJlZiI+I0ZfZm9vdG5vdGUtPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRmb290bm90ZS1udW0iLz48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0idGl0bGUiPmluaXRpYWxmb290bm90ZTwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGZvb3Rub3RlLW51bSIvPg0KICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L2E+IC0tPg0KICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvc3VwPiAtLT4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgICANCiAgICA8eHNsOnRlbXBsYXRlIG1hdGNoPSJjZGE6Zm9vdG5vdGUiIG1vZGU9ImZvb3Rub3RlIj4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJmb290bm90ZS1udW0iPg0KICAgICAgICAgICAgPHhzbDpudW1iZXIgbGV2ZWw9ImFueSIgY291bnQ9ImNkYTpmb290bm90ZSIvPg0KICAgICAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InAiPg0KICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImRpdiI+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iaWQiPkZfZm9vdG5vdGUtPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRmb290bm90ZS1udW0iLz48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ibmFtZSI+Rl9mb290bm90ZS08eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGZvb3Rub3RlLW51bSIvPjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJzdHlsZSI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNvbmNhdCgncG9zaXRpb246cmVsYXRpdmU7IHRvcDotJywgJEJBTk5FUl9IRUlHSFRfUFgsICdweDsnKSIvPjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3BhbiI+PHhzbDphdHRyaWJ1dGUgbmFtZT0ic3R5bGUiPmZvbnQtd2VpZ2h0OiBib2xkOzwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+WzwveHNsOnRleHQ+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRmb290bm90ZS1udW0iLz48eHNsOnRleHQ+XSA8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgIDx4c2w6YXBwbHktdGVtcGxhdGVzIHNlbGVjdD0iKnx0ZXh0KCkiLz4NCiAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgICANCiAgICA8eHNsOnRlbXBsYXRlIG1hdGNoPSJjZGE6Zm9vdG5vdGVSZWYiPg0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InRoZUZvb3Rub3RlIiBzZWxlY3Q9Ii8vY2RhOmZvb3Rub3RlW0BJRD1jdXJyZW50KCkvQElEUkVGXSIvPg0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImZvb3Rub3RlLW51bSI+DQogICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iJHRoZUZvb3Rub3RlIj4NCiAgICAgICAgICAgICAgICA8eHNsOm51bWJlciBsZXZlbD0iYW55IiBjb3VudD0iY2RhOmZvb3Rub3RlIi8+DQogICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgIA0KICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3VwIj4NCiAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJhIj4NCiAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJocmVmIj4jPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNvbmNhdCgnRl9mb290bm90ZS0nLCRmb290bm90ZS1udW0pIi8+PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9InRpdGxlIj5yZWYjPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRmb290bm90ZS1udW0iLz48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRmb290bm90ZS1udW0iLz4NCiAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC9hPiAtLT4NCiAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3N1cD4gLS0+DQogICAgPC94c2w6dGVtcGxhdGU+DQoNCiAgICA8eHNsOnRlbXBsYXRlIG1hdGNoPSJjZGE6bGlua0h0bWwiPg0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImxpbmtUYXJnZXRDb250YWluc0phdmFTY3JpcHQiPg0KICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImNvbnRhaW5zSmF2YVNjcmlwdCI+PHhzbDp3aXRoLXBhcmFtIG5hbWU9InJlZmVyZW5jZSIgc2VsZWN0PSIuL0BocmVmIj48L3hzbDp3aXRoLXBhcmFtPjwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgIDwveHNsOnZhcmlhYmxlPg0KICAgICAgICANCiAgICAgICAgPHhzbDppZiB0ZXN0PSIkbGlua1RhcmdldENvbnRhaW5zSmF2YVNjcmlwdCAhPSAndHJ1ZSciPg0KICAgICAgICANCiAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0ic3RyaW5nLWxlbmd0aCguL0BocmVmKSAmZ3Q7IDAgb3INCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCguL3RleHQoKSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImxpbmtUZXh0Ij4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0ic3RyaW5nLWxlbmd0aCguL3RleHQoKSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLi90ZXh0KCkiLz4gIA0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjb25jYXQoJ2xpbms6JywuL0BocmVmKSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+ICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgICAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJsaW5rVGFyZ2V0Ij4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0ic3RyaW5nLWxlbmd0aCguL0BocmVmKSAmZ3Q7IDEgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRzLXdpdGgoLi9AaHJlZiwgJyMnKSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJyZWZlcmVuY2VJZCIgc2VsZWN0PSJzdWJzdHJpbmctYWZ0ZXIoLi9AaHJlZiwgJyMnKSIvPiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJhdHRhY2htZW50UmVmZXJlbmNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iLy9jZGE6b2JzZXJ2YXRpb25NZWRpYS9ASUQ9JHJlZmVyZW5jZUlkIj50cnVlPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPmZhbHNlPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkYXR0YWNobWVudFJlZmVyZW5jZT0ndHJ1ZSciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIvL2NkYTpvYnNlcnZhdGlvbk1lZGlhL0BJRD0kcmVmZXJlbmNlSWQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvL2NkYTpvYnNlcnZhdGlvbk1lZGlhW0BJRD0kcmVmZXJlbmNlSWRdL2NkYTp2YWx1ZS9jZGE6cmVmZXJlbmNlL0B2YWx1ZSIvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjb25jYXQoJyMnLCAkcmVmZXJlbmNlSWQpIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Im5vdChzdGFydHMtd2l0aCguL0BocmVmLCAnIycpKSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKC4vQGhyZWYpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii4vQGhyZWYiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4gICAgDQogICAgICAgICAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJzdHJpbmctbGVuZ3RoKCRsaW5rVGFyZ2V0KT0wIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJhIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGxpbmtUZXh0Ii8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImhyZWYiPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkbGlua1RhcmdldCIvPjwveHNsOmF0dHJpYnV0ZT48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGxpbmtUZXh0Ii8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgIDwveHNsOmlmPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KICAgIA0KICAgIDx4c2w6dGVtcGxhdGUgbWF0Y2g9ImNkYTpjb250ZW50Ij4NCiAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InNwYW4iPg0KICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImFkZElEIj48eHNsOndpdGgtcGFyYW0gbmFtZT0iZWxlbWVudCIgc2VsZWN0PSIuIi8+PC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJAc3R5bGVDb2RlIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InByb2Nlc3NTdHlsZUNvZGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImNvZGUiIHNlbGVjdD0iQHN0eWxlQ29kZSIvPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IkByZXZpc2VkPSdkZWxldGUnIj4gPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMvPg0KICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3NwYW4+IC0tPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KDQogICAgPHhzbDp0ZW1wbGF0ZSBtYXRjaD0iY2RhOmJyIj4NCiAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImJyIj4NCiAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImFkZElEIj48eHNsOndpdGgtcGFyYW0gbmFtZT0iZWxlbWVudCIgc2VsZWN0PSIuIi8+PC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMvPg0KICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgIDwveHNsOnRlbXBsYXRlPg0KICAgIA0KICAgIDx4c2w6dGVtcGxhdGUgbWF0Y2g9ImNkYTpsaXN0Ij4NCiAgICAgICAgPHhzbDppZiB0ZXN0PSJjZGE6Y2FwdGlvbiBhbmQNCiAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoY2RhOmNhcHRpb24pICZndDsgMCI+DQogICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3BhbiI+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmxpc3RUYWJsZUNhcHRpb248L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNkYTpjYXB0aW9uIi8+DQogICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iQHN0eWxlQ29kZSI+DQogICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJAc3R5bGVDb2RlPSdEaXNjJyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idWwiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5nZW5lcmljdWw8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImFkZElEIj48eHNsOndpdGgtcGFyYW0gbmFtZT0iZWxlbWVudCIgc2VsZWN0PSIuIi8+PC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJzdHlsZSI+bGlzdC1zdHlsZS10eXBlOiBkaXNjOzwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iY2RhOml0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ibGkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IkBzdHlsZUNvZGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0icHJvY2Vzc1N0eWxlQ29kZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iaW5pdGlhbENzc0NsYXNzZXMiPjwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iY29kZSIgc2VsZWN0PSJAc3R5bGVDb2RlIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iQHN0eWxlQ29kZT0nQ2lyY2xlJyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idWwiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5nZW5lcmljdWw8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImFkZElEIj48eHNsOndpdGgtcGFyYW0gbmFtZT0iZWxlbWVudCIgc2VsZWN0PSIuIi8+PC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJzdHlsZSI+bGlzdC1zdHlsZS10eXBlOiBjaXJjbGU7PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSJjZGE6aXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJsaSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iQHN0eWxlQ29kZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJwcm9jZXNzU3R5bGVDb2RlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJpbml0aWFsQ3NzQ2xhc3NlcyI+PC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJjb2RlIiBzZWxlY3Q9IkBzdHlsZUNvZGUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmFwcGx5LXRlbXBsYXRlcy8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJAc3R5bGVDb2RlPSdTcXVhcmUnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ1bCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmdlbmVyaWN1bDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iYWRkSUQiPjx4c2w6d2l0aC1wYXJhbSBuYW1lPSJlbGVtZW50IiBzZWxlY3Q9Ii4iLz48L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9InN0eWxlIj5saXN0LXN0eWxlLXR5cGU6IHNxdWFyZTs8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9ImNkYTppdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImxpIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJAc3R5bGVDb2RlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InByb2Nlc3NTdHlsZUNvZGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImluaXRpYWxDc3NDbGFzc2VzIj48L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImNvZGUiIHNlbGVjdD0iQHN0eWxlQ29kZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXBwbHktdGVtcGxhdGVzLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idWwiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5nZW5lcmljdWw8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImFkZElEIj48eHNsOndpdGgtcGFyYW0gbmFtZT0iZWxlbWVudCIgc2VsZWN0PSIuIi8+PC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iY2RhOml0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ibGkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IkBzdHlsZUNvZGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0icHJvY2Vzc1N0eWxlQ29kZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iaW5pdGlhbENzc0NsYXNzZXMiPjwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iY29kZSIgc2VsZWN0PSJAc3R5bGVDb2RlIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InVsIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmdlbmVyaWN1bDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImFkZElEIj48eHNsOndpdGgtcGFyYW0gbmFtZT0iZWxlbWVudCIgc2VsZWN0PSIuIi8+PC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9ImNkYTppdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJsaSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+DQogICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgPC94c2w6dGVtcGxhdGU+DQogICANCiAgICA8eHNsOnRlbXBsYXRlIG1hdGNoPSJjZGE6bGlzdFtAbGlzdFR5cGU9J29yZGVyZWQnXSI+DQogICAgICAgIDx4c2w6aWYgdGVzdD0iY2RhOmNhcHRpb24gYW5kDQogICAgICAgICAgICBzdHJpbmctbGVuZ3RoKGNkYTpjYXB0aW9uKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InNwYW4iPg0KICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5saXN0VGFibGVDYXB0aW9uPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjZGE6Y2FwdGlvbiIvPg0KICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgPC94c2w6aWY+DQogICAgICAgIA0KICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICA8eHNsOndoZW4gdGVzdD0iQHN0eWxlQ29kZSI+DQogICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJAc3R5bGVDb2RlPSdMaXR0bGVSb21hbiciPg0KICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9Im9sIj4NCiAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+Z2VuZXJpY29sPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJhZGRJRCI+PHhzbDp3aXRoLXBhcmFtIG5hbWU9ImVsZW1lbnQiIHNlbGVjdD0iLiIvPjwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJzdHlsZSI+bGlzdC1zdHlsZS10eXBlOiBsb3dlci1yb21hbjs8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iY2RhOml0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImxpIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IkBzdHlsZUNvZGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InByb2Nlc3NTdHlsZUNvZGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImluaXRpYWxDc3NDbGFzc2VzIj48L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImNvZGUiIHNlbGVjdD0iQHN0eWxlQ29kZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXBwbHktdGVtcGxhdGVzLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KDQogICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iQHN0eWxlQ29kZT0nQmlnUm9tYW4nIj4NCiAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJvbCI+DQogICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmdlbmVyaWNvbDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iYWRkSUQiPjx4c2w6d2l0aC1wYXJhbSBuYW1lPSJlbGVtZW50IiBzZWxlY3Q9Ii4iLz48L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ic3R5bGUiPmxpc3Qtc3R5bGUtdHlwZTogdXBwZXItcm9tYW47PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9ImNkYTppdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJsaSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJAc3R5bGVDb2RlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJwcm9jZXNzU3R5bGVDb2RlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJpbml0aWFsQ3NzQ2xhc3NlcyI+PC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJjb2RlIiBzZWxlY3Q9IkBzdHlsZUNvZGUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmFwcGx5LXRlbXBsYXRlcy8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+DQogICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCg0KICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IkBzdHlsZUNvZGU9J0xpdHRsZUFscGhhJyI+DQogICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ib2wiPg0KICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5nZW5lcmljb2w8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImFkZElEIj48eHNsOndpdGgtcGFyYW0gbmFtZT0iZWxlbWVudCIgc2VsZWN0PSIuIi8+PC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9InN0eWxlIj5saXN0LXN0eWxlLXR5cGU6IGxvd2VyLWFscGhhOzwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSJjZGE6aXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ibGkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iQHN0eWxlQ29kZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0icHJvY2Vzc1N0eWxlQ29kZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iaW5pdGlhbENzc0NsYXNzZXMiPjwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iY29kZSIgc2VsZWN0PSJAc3R5bGVDb2RlIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQoNCiAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJAc3R5bGVDb2RlPSdCaWdBbHBoYSciPg0KICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9Im9sIj4NCiAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+Z2VuZXJpY29sPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJhZGRJRCI+PHhzbDp3aXRoLXBhcmFtIG5hbWU9ImVsZW1lbnQiIHNlbGVjdD0iLiIvPjwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJzdHlsZSI+bGlzdC1zdHlsZS10eXBlOiB1cHBlci1hbHBoYTs8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iY2RhOml0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImxpIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IkBzdHlsZUNvZGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InByb2Nlc3NTdHlsZUNvZGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImluaXRpYWxDc3NDbGFzc2VzIj48L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImNvZGUiIHNlbGVjdD0iQHN0eWxlQ29kZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXBwbHktdGVtcGxhdGVzLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KDQogICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJvbCI+DQogICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmdlbmVyaWNvbDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iYWRkSUQiPjx4c2w6d2l0aC1wYXJhbSBuYW1lPSJlbGVtZW50IiBzZWxlY3Q9Ii4iLz48L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9ImNkYTppdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJsaSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJAc3R5bGVDb2RlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJwcm9jZXNzU3R5bGVDb2RlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJpbml0aWFsQ3NzQ2xhc3NlcyI+PC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJjb2RlIiBzZWxlY3Q9IkBzdHlsZUNvZGUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmFwcGx5LXRlbXBsYXRlcy8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+DQogICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJvbCI+DQogICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5nZW5lcmljb2w8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJhZGRJRCI+PHhzbDp3aXRoLXBhcmFtIG5hbWU9ImVsZW1lbnQiIHNlbGVjdD0iLiIvPjwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iY2RhOml0ZW0iPg0KICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImxpIj4NCiAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IkBzdHlsZUNvZGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InByb2Nlc3NTdHlsZUNvZGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImluaXRpYWxDc3NDbGFzc2VzIj48L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImNvZGUiIHNlbGVjdD0iQHN0eWxlQ29kZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXBwbHktdGVtcGxhdGVzLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgPC94c2w6Y2hvb3NlPg0KICAgPC94c2w6dGVtcGxhdGU+DQoNCiAgICA8eHNsOnRlbXBsYXRlIG1hdGNoPSJjZGE6Y2FwdGlvbiI+DQogICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9InBhcmVudDo6Y2RhOnBhcmFncmFwaCBvciBwYXJlbnQ6OmNkYTppdGVtIj4NCiAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLiIvPg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KDQogICAgPHhzbDp0ZW1wbGF0ZSBtYXRjaD0iY2RhOnRhYmxlIj4NCiAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRhYmxlIj4NCiAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNlbGxzcGFjaW5nIj4wPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2VsbHBhZGRpbmciPjU8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJib3JkZXIiPjA8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iY29udGFpbnMoLi8vY2RhOnRyL2NkYTp0ZC9Ac3R5bGVDb2RlLCAneENvbFdpZHRoUHgnKSI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5nZW5lcmljdGFibGV3aXRoYXV0b2Zvcm1hdDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+Z2VuZXJpY3RhYmxlPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJhZGRJRCI+DQogICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImVsZW1lbnQiIHNlbGVjdD0iLiIvPg0KICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCg0KICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9ImNkYTpjYXB0aW9uIGFuZA0KICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKGNkYTpjYXB0aW9uKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ic3VtbWFyeSI+R0VORVJJQyBUQUJMRTwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImNhcHRpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmxpc3RUYWJsZUNhcHRpb248L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iY2RhOmNhcHRpb24iLz4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJzdW1tYXJ5Ij5ubyBzdW1tYXJ5PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgIDx4c2w6YXBwbHktdGVtcGxhdGVzLz4NCiAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCg0KICAgIDx4c2w6dGVtcGxhdGUgbWF0Y2g9ImNkYTp0aGVhZCI+DQogICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0aGVhZCI+DQogICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iYWRkSUQiPg0KICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJlbGVtZW50IiBzZWxlY3Q9Ii4iLz4NCiAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICA8eHNsOmFwcGx5LXRlbXBsYXRlcy8+DQogICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90aGVhZD4gLS0+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICANCiAgICA8eHNsOnRlbXBsYXRlIG1hdGNoPSJjZGE6dGJvZHkiPg0KICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGJvZHkiPg0KICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImFkZElEIj4NCiAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZWxlbWVudCIgc2VsZWN0PSIuIi8+DQogICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMvPg0KICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgIDwveHNsOnRlbXBsYXRlPg0KICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBtYXRjaD0iY2RhOnRyIj4NCiAgICAgICAgPHhzbDppZiB0ZXN0PSIuL0BJRCBhbmQgc3RyaW5nLWxlbmd0aCguL0BJRCkgJmd0OyAwIj4NCiAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkaXYiPg0KICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImlkIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iLi9ASUQiLz48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ibmFtZSI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii4vQElEIi8+PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9InN0eWxlIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iY29uY2F0KCdwb3NpdGlvbjpyZWxhdGl2ZTsgdG9wOi0nLCAkQkFOTkVSX0hFSUdIVF9QWCwgJ3B4OycpIi8+PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgPC94c2w6aWY+DQogICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ciI+DQogICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5nZW5lcmljdHI8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgIDx4c2w6YXBwbHktdGVtcGxhdGVzLz4NCiAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgIDwveHNsOnRlbXBsYXRlPg0KDQogICAgPHhzbDp0ZW1wbGF0ZSBtYXRjaD0iY2RhOnRoIj4NCiAgICAgICAgPHhzbDppZiB0ZXN0PSIuL0BJRCBhbmQNCiAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoLi9ASUQpICZndDsgMCI+DQogICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iZGl2Ij4NCiAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJpZCI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii4vQElEIi8+PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9Im5hbWUiPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIuL0BJRCIvPjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJzdHlsZSI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNvbmNhdCgncG9zaXRpb246cmVsYXRpdmU7IHRvcDotJywgJEJBTk5FUl9IRUlHSFRfUFgsICdweDsnKSIvPjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgIDwveHNsOmlmPg0KICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIuL0Bjb2xzcGFuIj4NCiAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjb2xzcGFuIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iLi9AY29sc3BhbiIvPjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIuL0Byb3dzcGFuIj4NCiAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJyb3dzcGFuIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iLi9Acm93c3BhbiIvPjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJjb2xXaWR0aFN0eWxlIj4NCiAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii4vQHN0eWxlQ29kZSBhbmQgY29udGFpbnMoLi9Ac3R5bGVDb2RlLCAneENvbFdpZHRoUHgnKSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0icHJvY2Vzc0NvbFdpZHRoUHgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJjb2RlIiBzZWxlY3Q9Ii4vQHN0eWxlQ29kZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2UvPg0KICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgIDwveHNsOnZhcmlhYmxlPg0KICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii4vQHN0eWxlQ29kZSI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9ImNvbnRhaW5zKC4vQHN0eWxlQ29kZSwgJ3J1bGUnKSBvciBjb250YWlucyguL0BzdHlsZUNvZGUsICdSdWxlJykiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0idGFibGVDZWxsUnVsZUNzc0NsYXNzZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0icHJvY2Vzc1RhYmxlQ2VsbFN0eWxlQ29kZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iY29kZSIgc2VsZWN0PSIuL0BzdHlsZUNvZGUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0icHJvY2Vzc1N0eWxlQ29kZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJpbml0aWFsQ3NzQ2xhc3NlcyI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiR0YWJsZUNlbGxSdWxlQ3NzQ2xhc3NlcyIvPjwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJjb2RlIiBzZWxlY3Q9IkBzdHlsZUNvZGUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImluaXRpYWxTdHlsZXMiIHNlbGVjdD0iJGNvbFdpZHRoU3R5bGUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJwcm9jZXNzU3R5bGVDb2RlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImNvZGUiIHNlbGVjdD0iQHN0eWxlQ29kZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iaW5pdGlhbENzc0NsYXNzZXMiPmdlbmVyaWN0aDwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJpbml0aWFsU3R5bGVzIiBzZWxlY3Q9IiRjb2xXaWR0aFN0eWxlIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5nZW5lcmljdGg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6YXBwbHktdGVtcGxhdGVzLz4NCiAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICANCiAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgICANCiAgICA8eHNsOnRlbXBsYXRlIG1hdGNoPSJjZGE6dGQiPg0KICAgICAgICA8eHNsOmlmIHRlc3Q9Ii4vQElEIGFuZA0KICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCguL0BJRCkgJmd0OyAwIj4NCiAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkaXYiPg0KICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImlkIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iLi9ASUQiLz48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ibmFtZSI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii4vQElEIi8+PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9InN0eWxlIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iY29uY2F0KCdwb3NpdGlvbjpyZWxhdGl2ZTsgdG9wOi0nLCAkQkFOTkVSX0hFSUdIVF9QWCwgJ3B4OycpIi8+PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgPC94c2w6aWY+DQogICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgIDx4c2w6aWYgdGVzdD0iLi9AY29sc3BhbiI+DQogICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY29sc3BhbiI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii4vQGNvbHNwYW4iLz48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICA8eHNsOmlmIHRlc3Q9Ii4vQHJvd3NwYW4iPg0KICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJyb3dzcGFuIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iLi9Acm93c3BhbiIvPjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJjb2xXaWR0aFN0eWxlIj4NCiAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIuL0BzdHlsZUNvZGUgYW5kIGNvbnRhaW5zKC4vQHN0eWxlQ29kZSwgJ3hDb2xXaWR0aFB4JykiPg0KICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0icHJvY2Vzc0NvbFdpZHRoUHgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImNvZGUiIHNlbGVjdD0iLi9Ac3R5bGVDb2RlIi8+DQogICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZS8+DQogICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgIDwveHNsOnZhcmlhYmxlPg0KICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIuL0BzdHlsZUNvZGUiPg0KICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iY29udGFpbnMoLi9Ac3R5bGVDb2RlLCAncnVsZScpIG9yIGNvbnRhaW5zKC4vQHN0eWxlQ29kZSwgJ1J1bGUnKSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InRhYmxlQ2VsbFJ1bGVDc3NDbGFzc2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0icHJvY2Vzc1RhYmxlQ2VsbFN0eWxlQ29kZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJjb2RlIiBzZWxlY3Q9Ii4vQHN0eWxlQ29kZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJwcm9jZXNzU3R5bGVDb2RlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iaW5pdGlhbENzc0NsYXNzZXMiPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkdGFibGVDZWxsUnVsZUNzc0NsYXNzZXMiLz48L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iY29kZSIgc2VsZWN0PSJAc3R5bGVDb2RlIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJpbml0aWFsU3R5bGVzIiBzZWxlY3Q9IiRjb2xXaWR0aFN0eWxlIi8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InByb2Nlc3NTdHlsZUNvZGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImNvZGUiIHNlbGVjdD0iQHN0eWxlQ29kZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImluaXRpYWxDc3NDbGFzc2VzIj5nZW5lcmljdGQ8L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImluaXRpYWxTdHlsZXMiIHNlbGVjdD0iJGNvbFdpZHRoU3R5bGUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmdlbmVyaWN0ZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgIDx4c2w6YXBwbHktdGVtcGxhdGVzLz4NCiAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgIDwveHNsOnRlbXBsYXRlPg0KDQogICAgPHhzbDp0ZW1wbGF0ZSBtYXRjaD0iY2RhOnJlbmRlck11bHRpTWVkaWEiPg0KICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0icHJvY2Vzc0F0dGFjaG1lbnQiPg0KICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImVsZW1lbnQiIHNlbGVjdD0iLiIvPg0KICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KDQogICAgPHhzbDp0ZW1wbGF0ZSBtYXRjaD0iY2RhOnBhcmFncmFwaCI+DQogICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJwIj4NCiAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJhZGRJRCI+DQogICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImVsZW1lbnQiIHNlbGVjdD0iLiIvPg0KICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5wYXJhZ3JhcGg8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iQHN0eWxlQ29kZSI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJwcm9jZXNzU3R5bGVDb2RlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJjb2RlIiBzZWxlY3Q9IkBzdHlsZUNvZGUiLz4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmFwcGx5LXRlbXBsYXRlcy8+DQogICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvcD4gLS0+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBtYXRjaD0iY2RhOnN1cCI+DQogICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJzdXAiPg0KICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImFkZElEIj4NCiAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZWxlbWVudCIgc2VsZWN0PSIuIi8+DQogICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMvPg0KICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgIDwveHNsOnRlbXBsYXRlPg0KDQogICAgPHhzbDp0ZW1wbGF0ZSBtYXRjaD0iY2RhOnN1YiI+DQogICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJzdWIiPg0KICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImFkZElEIj4NCiAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZWxlbWVudCIgc2VsZWN0PSIuIi8+DQogICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMvPg0KICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgIDwveHNsOnRlbXBsYXRlPg0KICAgDQogICAgPCEtLT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09LS0+DQogICAgPCEtLSBbRU5EXSBDREEgTkFSUkFUSVZFIEVMRU1FTlQgVEVNUExBVEVTIC0tPg0KDQoNCiANCiANCiAgICA8IS0tIFNUWUxFIENPREUgVEVNUExBVEVTIC0tPiAgICANCiAgICA8IS0tPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0tLT4NCg0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0icHJvY2Vzc1N0eWxlQ29kZSI+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0iY29kZSIvPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9ImluaXRpYWxDc3NDbGFzc2VzIi8+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0iaW5pdGlhbFN0eWxlcyIvPg0KICAgICAgICANCiAgICAgICAgPCEtLSBTdHlsZXMgLS0+DQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iY29sb3VyU3R5bGVzIj4NCiAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJjb250YWlucygkY29kZSwgJ3hGZ0NvbG91cicpIG9yDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5zKCRjb2RlLCAneEJnQ29sb3VyJykiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0icHJvY2Vzc0NvbG91clN0eWxlQ29kZSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iY29kZSIgc2VsZWN0PSIkY29kZSIvPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2UvPg0KICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICAgICAgDQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZm9udFNpemVQeFN0eWxlIj4NCiAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJjb250YWlucygkY29kZSwgJ3hGb250U2l6ZVB4JykiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0icHJvY2Vzc0ZvbnRTaXplUHgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImNvZGUiIHNlbGVjdD0iJGNvZGUiLz4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlLz4NCiAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgIA0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImZvbnRTaXplRW1TdHlsZSI+DQogICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iY29udGFpbnMoJGNvZGUsICd4Rm9udFNpemVFbScpIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InByb2Nlc3NGb250U2l6ZUVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJjb2RlIiBzZWxlY3Q9IiRjb2RlIi8+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZS8+DQogICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgIDwveHNsOnZhcmlhYmxlPg0KICAgICAgICANCiAgICAgICAgPHhzbDppZiB0ZXN0PSIoc3RyaW5nLWxlbmd0aCgkaW5pdGlhbFN0eWxlcykgJmd0OyAwKSBvcg0KICAgICAgICAgICAgICAgICAgICAgIChzdHJpbmctbGVuZ3RoKCRjb2xvdXJTdHlsZXMpICZndDsgMCkgb3INCiAgICAgICAgICAgICAgICAgICAgICAoc3RyaW5nLWxlbmd0aCgkZm9udFNpemVQeFN0eWxlKSAmZ3Q7IDApIG9yDQogICAgICAgICAgICAgICAgICAgICAgKHN0cmluZy1sZW5ndGgoJGZvbnRTaXplRW1TdHlsZSkgJmd0OyAwKSI+DQogICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJzdHlsZSI+DQogICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InRyaW0iPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ic3RyaW5nIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iY29uY2F0KCRpbml0aWFsU3R5bGVzLCAnICcsICRjb2xvdXJTdHlsZXMsICcgJywgJGZvbnRTaXplUHhTdHlsZSwgJyAnLCAkZm9udFNpemVFbVN0eWxlKSIvPjwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgIDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgPC94c2w6aWY+DQogICAgICAgIA0KICAgICAgICA8IS0tIENsYXNzZXMgLS0+DQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iYm9sZENsYXNzIj4NCiAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJjb250YWlucygkY29kZSwgJ0JvbGQnKSI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5ib2xkPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlLz4NCiAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgIA0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9Iml0YWxpY0NsYXNzIj4NCiAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJjb250YWlucygkY29kZSwgJ0l0YWxpYycpIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0Pml0YWxpYzwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZS8+DQogICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgIDwveHNsOnZhcmlhYmxlPg0KICAgICAgICANCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJ1bmRlcmxpbmVDbGFzcyI+DQogICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iY29udGFpbnMoJGNvZGUsICdVbmRlcmxpbmUnKSI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD51bmRlcmxpbmU8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2UvPg0KICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICAgICAgDQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZW1waGFzaXNDbGFzcyI+DQogICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iY29udGFpbnMoJGNvZGUsICdFbXBoYXNpcycpIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PmVtcGhhc2lzPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlLz4NCiAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgIA0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InhGaXhlZENsYXNzIj4NCiAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJjb250YWlucygkY29kZSwgJ3hGaXhlZCcpIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PnhGaXhlZDwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZS8+DQogICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgIDwveHNsOnZhcmlhYmxlPg0KICAgICAgICANCiAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPg0KICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InRyaW0iPg0KICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJzdHJpbmciPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjb25jYXQoJGluaXRpYWxDc3NDbGFzc2VzLCAnICcsICRib2xkQ2xhc3MsICcgJywgJGl0YWxpY0NsYXNzLCAnICcsICR1bmRlcmxpbmVDbGFzcywgJyAnLCAkZW1waGFzaXNDbGFzcywgJyAnLCAkeEZpeGVkQ2xhc3MpIi8+PC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgIDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgDQogICAgICAgIDwhLS0gcHJlIGVsZW1lbnQgLS0+DQogICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9ImNvbnRhaW5zKCRjb2RlLCAneFByZScpIj4NCiAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0icHJlIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMvPg0KICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMvPg0KICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJwcm9jZXNzVGFibGVDZWxsU3R5bGVDb2RlIj4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJjb2RlIi8+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0iaW5pdGlhbENzc0NsYXNzZXMiLz4NCiAgICAgICAgDQogICAgICAgIDwhLS0gQ2xhc3NlcyAtLT4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJsUnVsZUNsYXNzIj4NCiAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJjb250YWlucygkY29kZSwgJ0xydWxlJykiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+THJ1bGU8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2UvPg0KICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICAgICAgDQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iclJ1bGVDbGFzcyI+DQogICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iY29udGFpbnMoJGNvZGUsICdScnVsZScpIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PlJydWxlPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlLz4NCiAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgIA0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InRvcHJ1bGVDbGFzcyI+DQogICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iY29udGFpbnMoJGNvZGUsICdUb3BydWxlJykiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+dG9wcnVsZTwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZS8+DQogICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgIDwveHNsOnZhcmlhYmxlPg0KDQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iYm90cnVsZUNsYXNzIj4NCiAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJjb250YWlucygkY29kZSwgJ0JvdHJ1bGUnKSI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5ib3RydWxlPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlLz4NCiAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgIA0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InRhYmxlQ2VsbENsYXNzZXMiPg0KICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIkaW5pdGlhbENzc0NsYXNzZXMgYW5kIHN0cmluZy1sZW5ndGgoJGluaXRpYWxDc3NDbGFzc2VzKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkaW5pdGlhbENzc0NsYXNzZXMiLz48eHNsOnRleHQ+IDwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJzdHJpbmctbGVuZ3RoKCRsUnVsZUNsYXNzKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGxSdWxlQ2xhc3MiLz48eHNsOnRleHQ+IDwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT5ub0xydWxlIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9InN0cmluZy1sZW5ndGgoJHJSdWxlQ2xhc3MpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkclJ1bGVDbGFzcyIvPjx4c2w6dGV4dD4gPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPm5vUnJ1bGUgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgDQogICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0ic3RyaW5nLWxlbmd0aCgkdG9wcnVsZUNsYXNzKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJHRvcHJ1bGVDbGFzcyIvPjx4c2w6dGV4dD4gPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPm5vVG9wcnVsZSA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICANCiAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJzdHJpbmctbGVuZ3RoKCRib3RydWxlQ2xhc3MpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkYm90cnVsZUNsYXNzIi8+PHhzbDp0ZXh0PiA8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+bm9Cb3RydWxlIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJ0cmltIj4NCiAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJzdHJpbmciPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkdGFibGVDZWxsQ2xhc3NlcyIvPjwveHNsOndpdGgtcGFyYW0+DQogICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgPC94c2w6dGVtcGxhdGU+DQoNCiAgICA8eHNsOnRlbXBsYXRlIG5hbWU9InByb2Nlc3NDb2xvdXJTdHlsZUNvZGUiPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9ImNvZGUiLz4NCiAgICAgICAgDQogICAgICAgIDwhLS0gSXNvbGF0ZSB4RmdDb2xvdXIgc3R5bGVjb2RlIC0tPg0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImZnQ29sb3VyU3R5bGVDb2RlU3RhcnQiIHNlbGVjdD0ic3Vic3RyaW5nLWFmdGVyKCRjb2RlLCAneEZnQ29sb3VyJykiLz4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJmZ0NvbG91ckhleENvZGUiPg0KICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9ImNvbnRhaW5zKCRmZ0NvbG91clN0eWxlQ29kZVN0YXJ0LCAnICcpIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9InN1YnN0cmluZy1iZWZvcmUoJGZnQ29sb3VyU3R5bGVDb2RlU3RhcnQsICcgJykiLz4NCiAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGZnQ29sb3VyU3R5bGVDb2RlU3RhcnQiLz4NCiAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgIDwveHNsOnZhcmlhYmxlPg0KDQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0idmFsaWRGZ0NvbG91ckhleENvZGUiPjx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJ2YWxpZGF0YXRlQ29sb3VyU3R5bGVDb2RlVmFsdWUiPjx4c2w6d2l0aC1wYXJhbSBuYW1lPSJzdHlsZUNvZGVWYWx1ZSIgc2VsZWN0PSIkZmdDb2xvdXJIZXhDb2RlIi8+PC94c2w6Y2FsbC10ZW1wbGF0ZT48L3hzbDp2YXJpYWJsZT4NCiAgICAgICAgDQogICAgICAgIDwhLS0gSXNvbGF0ZSB4QmdDb2xvdXIgc3R5bGVjb2RlIC0tPg0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImJnQ29sb3VyU3R5bGVDb2RlU3RhcnQiIHNlbGVjdD0ic3Vic3RyaW5nLWFmdGVyKCRjb2RlLCAneEJnQ29sb3VyJykiLz4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJiZ0NvbG91ckhleENvZGUiPg0KICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9ImNvbnRhaW5zKCRiZ0NvbG91clN0eWxlQ29kZVN0YXJ0LCAnICcpIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9InN1YnN0cmluZy1iZWZvcmUoJGJnQ29sb3VyU3R5bGVDb2RlU3RhcnQsICcgJykiLz4NCiAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGJnQ29sb3VyU3R5bGVDb2RlU3RhcnQiLz4NCiAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgIDwveHNsOnZhcmlhYmxlPg0KICAgICAgICANCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJ2YWxpZEJnQ29sb3VySGV4Q29kZSI+PHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InZhbGlkYXRhdGVDb2xvdXJTdHlsZUNvZGVWYWx1ZSI+PHhzbDp3aXRoLXBhcmFtIG5hbWU9InN0eWxlQ29kZVZhbHVlIiBzZWxlY3Q9IiRiZ0NvbG91ckhleENvZGUiLz48L3hzbDpjYWxsLXRlbXBsYXRlPjwveHNsOnZhcmlhYmxlPg0KICAgICAgICANCiAgICAgICAgPCEtLSBnZW5lcmF0ZSBzdHlsZSB2YWx1ZSAtLT4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJjb2xvdXJTdHlsZXMiPg0KICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiR2YWxpZEZnQ29sb3VySGV4Q29kZSA9ICd0cnVlJyBhbmQgJHZhbGlkQmdDb2xvdXJIZXhDb2RlID0gJ3RydWUnIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PmJhY2tncm91bmQ6ICM8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGJnQ29sb3VySGV4Q29kZSIvPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+OzwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4gY29sb3I6ICM8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGZnQ29sb3VySGV4Q29kZSIvPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+OzwveHNsOnRleHQ+ICAgIA0KICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiR2YWxpZEZnQ29sb3VySGV4Q29kZSA9ICdmYWxzZScgYW5kICR2YWxpZEJnQ29sb3VySGV4Q29kZSA9J3RydWUnIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PmJhY2tncm91bmQ6ICM8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGJnQ29sb3VySGV4Q29kZSIvPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+OzwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJHZhbGlkRmdDb2xvdXJIZXhDb2RlID0gJ3RydWUnIGFuZCAkdmFsaWRCZ0NvbG91ckhleENvZGUgPSdmYWxzZSciPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+IGNvbG9yOiAjPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRmZ0NvbG91ckhleENvZGUiLz4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0Pjs8L3hzbDp0ZXh0PiAgICANCiAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlLz4NCiAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJ0cmltIj4NCiAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJzdHJpbmciPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkY29sb3VyU3R5bGVzIi8+PC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgICANCiAgICA8eHNsOnRlbXBsYXRlIG5hbWU9InByb2Nlc3NGb250U2l6ZVB4Ij4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJjb2RlIi8+DQogICAgICAgIA0KICAgICAgICA8IS0tIElzb2xhdGUgeEZvbnRTaXplIHN0eWxlY29kZSAtLT4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJmb250U2l6ZVN0eWxlQ29kZVN0YXJ0IiBzZWxlY3Q9InN1YnN0cmluZy1hZnRlcigkY29kZSwgJ3hGb250U2l6ZVB4JykiLz4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJmb250U2l6ZSI+DQogICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iY29udGFpbnMoJGZvbnRTaXplU3R5bGVDb2RlU3RhcnQsICcgJykiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0ic3Vic3RyaW5nLWJlZm9yZSgkZm9udFNpemVTdHlsZUNvZGVTdGFydCwgJyAnKSIvPg0KICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZm9udFNpemVTdHlsZUNvZGVTdGFydCIvPg0KICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgIA0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InZhbGlkUHhGb250U2l6ZSI+PHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InZhbGlkYXRhdGVOdW1lcmljVmFsdWUiPjx4c2w6d2l0aC1wYXJhbSBuYW1lPSJ2YWx1ZSIgc2VsZWN0PSIkZm9udFNpemUiLz48L3hzbDpjYWxsLXRlbXBsYXRlPjwveHNsOnZhcmlhYmxlPg0KICAgICAgICANCiAgICAgICAgPCEtLSBnZW5lcmF0ZSBzdHlsZSB2YWx1ZSAtLT4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJmb250U2l6ZVB4U3R5bGUiPg0KICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiR2YWxpZFB4Rm9udFNpemUgPSAndHJ1ZSciPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+Zm9udC1zaXplOiA8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGZvbnRTaXplIi8+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5weDs8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2UvPg0KICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InRyaW0iPg0KICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InN0cmluZyI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRmb250U2l6ZVB4U3R5bGUiLz48L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KICAgIA0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0icHJvY2Vzc0NvbFdpZHRoUHgiPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9ImNvZGUiLz4NCiAgICAgICAgDQogICAgICAgIDwhLS0gSXNvbGF0ZSB4Q29sV2lkdGggc3R5bGVjb2RlIC0tPg0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImNvbFdpZHRoU3R5bGVDb2RlU3RhcnQiIHNlbGVjdD0ic3Vic3RyaW5nLWFmdGVyKCRjb2RlLCAneENvbFdpZHRoUHgnKSIvPg0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImNvbFdpZHRoIj4NCiAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJjb250YWlucygkY29sV2lkdGhTdHlsZUNvZGVTdGFydCwgJyAnKSI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJzdWJzdHJpbmctYmVmb3JlKCRjb2xXaWR0aFN0eWxlQ29kZVN0YXJ0LCAnICcpIi8+DQogICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRjb2xXaWR0aFN0eWxlQ29kZVN0YXJ0Ii8+DQogICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICAgICAgDQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0idmFsaWRDb2xXaWR0aCI+PHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InZhbGlkYXRhdGVOdW1lcmljVmFsdWUiPjx4c2w6d2l0aC1wYXJhbSBuYW1lPSJ2YWx1ZSIgc2VsZWN0PSIkY29sV2lkdGgiLz48L3hzbDpjYWxsLXRlbXBsYXRlPjwveHNsOnZhcmlhYmxlPg0KICAgICAgICANCiAgICAgICAgPCEtLSBnZW5lcmF0ZSBzdHlsZSB2YWx1ZSAtLT4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJjb2xXaWR0aFN0eWxlIj4NCiAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkdmFsaWRDb2xXaWR0aCA9ICd0cnVlJyI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD53aWR0aDogPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRjb2xXaWR0aCIvPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+cHg7PC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PiB0YWJsZS1sYXlvdXQ6IGF1dG87PC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlLz4NCiAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJ0cmltIj4NCiAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJzdHJpbmciPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkY29sV2lkdGhTdHlsZSIvPjwveHNsOndpdGgtcGFyYW0+DQogICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJwcm9jZXNzRm9udFNpemVFbSI+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0iY29kZSIvPg0KICAgICAgICANCiAgICAgICAgPCEtLSBJc29sYXRlIHhGb250U2l6ZSBzdHlsZWNvZGUgLS0+DQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZm9udFNpemVTdHlsZUNvZGVTdGFydCIgc2VsZWN0PSJzdWJzdHJpbmctYWZ0ZXIoJGNvZGUsICd4Rm9udFNpemVFbScpIi8+DQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZm9udFNpemUiPg0KICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9ImNvbnRhaW5zKCRmb250U2l6ZVN0eWxlQ29kZVN0YXJ0LCAnICcpIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9InN1YnN0cmluZy1iZWZvcmUoJGZvbnRTaXplU3R5bGVDb2RlU3RhcnQsICcgJykiLz4NCiAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGZvbnRTaXplU3R5bGVDb2RlU3RhcnQiLz4NCiAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgIDwveHNsOnZhcmlhYmxlPg0KICAgICAgICANCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJ2YWxpZEVtRm9udFNpemUiPjx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJ2YWxpZGF0YXRlTnVtZXJpY1ZhbHVlIj48eHNsOndpdGgtcGFyYW0gbmFtZT0idmFsdWUiIHNlbGVjdD0iJGZvbnRTaXplIi8+PC94c2w6Y2FsbC10ZW1wbGF0ZT48L3hzbDp2YXJpYWJsZT4NCiAgICAgICAgDQogICAgICAgIDwhLS0gZ2VuZXJhdGUgc3R5bGUgdmFsdWUgLS0+DQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZm9udFNpemVFbVN0eWxlIj4NCiAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkdmFsaWRFbUZvbnRTaXplID0gJ3RydWUnIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PmZvbnQtc2l6ZTogPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRmb250U2l6ZSIvPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+ZW07PC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlLz4NCiAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJ0cmltIj4NCiAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJzdHJpbmciPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZm9udFNpemVFbVN0eWxlIi8+PC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgICANCiAgICA8eHNsOnRlbXBsYXRlIG5hbWU9InZhbGlkYXRhdGVDb2xvdXJTdHlsZUNvZGVWYWx1ZSI+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0ic3R5bGVDb2RlVmFsdWUiLz4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJ2YWxpZEhleENvbG91ckNoYXJhY3RlcnMiPjAxMjM0NTY3ODlBQkNERUZhYmNkZWY8L3hzbDp2YXJpYWJsZT4gICAgICAgIA0KICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJzdHJpbmctbGVuZ3RoKCRzdHlsZUNvZGVWYWx1ZSkgPSA2Ij4NCiAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9InN0cmluZy1sZW5ndGgodHJhbnNsYXRlKCRzdHlsZUNvZGVWYWx1ZSwgJHZhbGlkSGV4Q29sb3VyQ2hhcmFjdGVycywgJycpKSA9IDAiPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIndHJ1ZSciLz48L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSInZmFsc2UnIi8+ICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOm90aGVyd2lzZT48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJ2ZhbHNlJyIvPjwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KICAgIA0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0idmFsaWRhdGF0ZU51bWVyaWNWYWx1ZSI+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0idmFsdWUiLz4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJ2YWxpZE51bWVyaWNDaGFyYWN0ZXJzIj4wMTIzNDU2Nzg5PC94c2w6dmFyaWFibGU+ICAgICAgICANCiAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0ic3RyaW5nLWxlbmd0aCh0cmFuc2xhdGUoJHZhbHVlLCAkdmFsaWROdW1lcmljQ2hhcmFjdGVycywgJycpKSA9IDAiPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIndHJ1ZSciLz48L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IidmYWxzZSciLz4gICAgICAgIA0KICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPCEtLT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09LS0+DQogICAgPCEtLSBbRU5EXSBTVFlMRSBDT0RFIFRFTVBMQVRFUyAtLT4NCg0KDQoNCg0KICAgIDwhLS0gQVRUQUNITUVOVCBURU1QTEFURVMgLS0+ICAgIA0KICAgIDwhLS09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PS0tPg0KICAgIA0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0icHJvY2Vzc0F0dGFjaG1lbnQiPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9ImVsZW1lbnQiLz4NCiAgICAgICAgDQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0icmVmZXJlbmNlT2JqZWN0SWQiIHNlbGVjdD0iJGVsZW1lbnQvQHJlZmVyZW5jZWRPYmplY3QiLz4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJtZWRpYVR5cGUiPg0KICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii8vY2RhOm9ic2VydmF0aW9uTWVkaWFbQElEPSRyZWZlcmVuY2VPYmplY3RJZF0vY2RhOnZhbHVlL0BtZWRpYVR5cGUiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLy9jZGE6b2JzZXJ2YXRpb25NZWRpYVtASUQ9JHJlZmVyZW5jZU9iamVjdElkXS9jZGE6dmFsdWUvQG1lZGlhVHlwZSIvPg0KICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+dGV4dC9wbGFpbjwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0ibGlua1RhcmdldENvbnRhaW5zSmF2YVNjcmlwdCI+DQogICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iY29udGFpbnNKYXZhU2NyaXB0Ij4NCiAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0icmVmZXJlbmNlIiBzZWxlY3Q9Ii8vY2RhOm9ic2VydmF0aW9uTWVkaWFbQElEPSRyZWZlcmVuY2VPYmplY3RJZF0vY2RhOnZhbHVlL2NkYTpyZWZlcmVuY2UvQHZhbHVlIi8+ICAgICAgICANCiAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgIDwveHNsOnZhcmlhYmxlPg0KICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkbWVkaWFUeXBlPSdhcHBsaWNhdGlvbi9wZGYnIG9yDQogICAgICAgICAgICAgICAgJG1lZGlhVHlwZT0ndGV4dC9ydGYnIG9yDQogICAgICAgICAgICAgICAgJG1lZGlhVHlwZT0nYXBwbGljYXRpb24vcnRmJyBvcg0KICAgICAgICAgICAgICAgICRtZWRpYVR5cGU9J3RleHQvcGxhaW4nIG9yDQogICAgICAgICAgICAgICAgJG1lZGlhVHlwZT0ndGV4dC9odG1sJyBvcg0KICAgICAgICAgICAgICAgICRtZWRpYVR5cGU9J2FwcGxpY2F0aW9uL3hodG1sK3htbCcgb3INCiAgICAgICAgICAgICAgICAkbWVkaWFUeXBlPSdhcHBsaWNhdGlvbi94bWwnIG9yDQogICAgICAgICAgICAgICAgJG1lZGlhVHlwZT0naW1hZ2UvdGlmZiciPg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iLy9jZGE6b2JzZXJ2YXRpb25NZWRpYVtASUQ9JHJlZmVyZW5jZU9iamVjdElkXS9jZGE6dmFsdWUvY2RhOnJlZmVyZW5jZS9AdmFsdWUgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbGlua1RhcmdldENvbnRhaW5zSmF2YVNjcmlwdCA9ICdmYWxzZScgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKC8vY2RhOm9ic2VydmF0aW9uTWVkaWFbQElEPSRyZWZlcmVuY2VPYmplY3RJZF0vY2RhOnZhbHVlL2NkYTpyZWZlcmVuY2UvQHZhbHVlKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iYSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iYWRkSUQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJlbGVtZW50IiBzZWxlY3Q9Ii4iLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJocmVmIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLy9jZGE6b2JzZXJ2YXRpb25NZWRpYVtASUQ9JHJlZmVyZW5jZU9iamVjdElkXS9jZGE6dmFsdWUvY2RhOnJlZmVyZW5jZS9AdmFsdWUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJjZGE6Y2FwdGlvbiBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aChjZGE6Y2FwdGlvbikgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNkYTpjYXB0aW9uIi8+ICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkbWVkaWFUeXBlPSdhcHBsaWNhdGlvbi9wZGYnIj5QREYgZG9jdW1lbnQ8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRtZWRpYVR5cGU9J3RleHQvcnRmJyBvciAkbWVkaWFUeXBlPSdhcHBsaWNhdGlvbi9ydGYnIj5SVEYgZG9jdW1lbnQ8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRtZWRpYVR5cGU9J3RleHQvcGxhaW4nIj5UZXh0IGRvY3VtZW50PC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkbWVkaWFUeXBlPSd0ZXh0L2h0bWwnIj5IVE1MIGRvY3VtZW50PC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkbWVkaWFUeXBlPSdhcHBsaWNhdGlvbi94aHRtbCt4bWwnIj5YSFRNTCBkb2N1bWVudDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJG1lZGlhVHlwZT0nYXBwbGljYXRpb24veG1sJyI+WE1MIGRvY3VtZW50PC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkbWVkaWFUeXBlPSdpbWFnZS90aWZmJyI+VElGRiBkb2N1bWVudDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT5Eb2N1bWVudCB3aXRoIHVua25vd24gdHlwZTwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9IiRtZWRpYVR5cGU9J2ltYWdlL2dpZicgb3IgJG1lZGlhVHlwZT0naW1hZ2UvanBlZycgb3IgJG1lZGlhVHlwZT0naW1hZ2UvcG5nJyBvciAkbWVkaWFUeXBlPSdpbWFnZS9ibXAnIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIvL2NkYTpvYnNlcnZhdGlvbk1lZGlhW0BJRD0kcmVmZXJlbmNlT2JqZWN0SWRdL2NkYTp2YWx1ZS9jZGE6cmVmZXJlbmNlL0B2YWx1ZSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICRsaW5rVGFyZ2V0Q29udGFpbnNKYXZhU2NyaXB0ID0gJ2ZhbHNlJyBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoLy9jZGE6b2JzZXJ2YXRpb25NZWRpYVtASUQ9JHJlZmVyZW5jZU9iamVjdElkXS9jZGE6dmFsdWUvY2RhOnJlZmVyZW5jZS9AdmFsdWUpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGFibGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9InN1bW1hcnkiPklNQUdFIEFUVEFDSE1FTlQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImFkZElEIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImVsZW1lbnQiIHNlbGVjdD0iLiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRib2R5Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iYWxpZ24iPmNlbnRlcjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iaW1nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ic3JjIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvL2NkYTpvYnNlcnZhdGlvbk1lZGlhW0BJRD0kcmVmZXJlbmNlT2JqZWN0SWRdL2NkYTp2YWx1ZS9jZGE6cmVmZXJlbmNlL0B2YWx1ZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9InN0eWxlIj5wYWRkaW5nLWJvdHRvbTowLjVlbTs8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImFsdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iY2RhOmNhcHRpb24gYW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoY2RhOmNhcHRpb24pICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjZGE6Y2FwdGlvbiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+SW1hZ2UgQXR0YWNobWVudDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC9pbWc+IC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RyPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iYWxpZ24iPmNlbnRlcjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9ImNkYTpjYXB0aW9uIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aChjZGE6Y2FwdGlvbikgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjZGE6Y2FwdGlvbiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT5JbWFnZSBBdHRhY2htZW50PC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90ZD4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90cj4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3Rib2R5PiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90YWJsZT4gLS0+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJyZW5kZXJMb2dvIj4NCiAgICAgICAgPHhzbDppZiB0ZXN0PSIvL2NkYTpvYnNlcnZhdGlvbk1lZGlhW0BJRD0nTE9HTyddL2NkYTp2YWx1ZVtAbWVkaWFUeXBlPSdpbWFnZS9wbmcnIG9yIEBtZWRpYVR5cGU9J2ltYWdlL2dpZicgb3IgQG1lZGlhVHlwZT0naW1hZ2UvanBlZyddL2NkYTpyZWZlcmVuY2UvQHZhbHVlIj4NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJsb2dvVGFyZ2V0Q29udGFpbnNKYXZhU2NyaXB0Ij4NCiAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iY29udGFpbnNKYXZhU2NyaXB0Ij4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InJlZmVyZW5jZSIgc2VsZWN0PSIvL2NkYTpvYnNlcnZhdGlvbk1lZGlhW0BJRD0nTE9HTyddL2NkYTp2YWx1ZVtAbWVkaWFUeXBlPSdpbWFnZS9wbmcnIG9yIEBtZWRpYVR5cGU9J2ltYWdlL2dpZicgb3IgQG1lZGlhVHlwZT0naW1hZ2UvanBlZyddL2NkYTpyZWZlcmVuY2UvQHZhbHVlIi8+ICAgICAgICANCiAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgICAgICANCiAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iJGxvZ29UYXJnZXRDb250YWluc0phdmFTY3JpcHQgPSAnZmFsc2UnIj4NCiAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iaW1nIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iaWQiPkxPR088L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImFsdCI+bG9nbzwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ic3JjIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIvL2NkYTpvYnNlcnZhdGlvbk1lZGlhW0BJRD0nTE9HTyddL2NkYTp2YWx1ZS9AbWVkaWFUeXBlPSdpbWFnZS9wbmcnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii8vY2RhOm9ic2VydmF0aW9uTWVkaWFbQElEPSdMT0dPJ10vY2RhOnZhbHVlW0BtZWRpYVR5cGU9J2ltYWdlL3BuZyddL2NkYTpyZWZlcmVuY2UvQHZhbHVlIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iLy9jZGE6b2JzZXJ2YXRpb25NZWRpYVtASUQ9J0xPR08nXS9jZGE6dmFsdWUvQG1lZGlhVHlwZT0naW1hZ2UvZ2lmJyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIvL2NkYTpvYnNlcnZhdGlvbk1lZGlhW0BJRD0nTE9HTyddL2NkYTp2YWx1ZVtAbWVkaWFUeXBlPSdpbWFnZS9naWYnXS9jZGE6cmVmZXJlbmNlL0B2YWx1ZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii8vY2RhOm9ic2VydmF0aW9uTWVkaWFbQElEPSdMT0dPJ10vY2RhOnZhbHVlL0BtZWRpYVR5cGU9J2ltYWdlL2pwZWcnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii8vY2RhOm9ic2VydmF0aW9uTWVkaWFbQElEPSdMT0dPJ10vY2RhOnZhbHVlW0BtZWRpYVR5cGU9J2ltYWdlL2pwZWcnXS9jZGE6cmVmZXJlbmNlL0B2YWx1ZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvaW1nPiAtLT4NCiAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICA8L3hzbDppZj4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgICANCiAgICA8IS0tPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0tLT4NCiAgICA8IS0tIFtFTkRdIEFUVEFDSE1FTlQgVEVNUExBVEVTIC0tPg0KICAgIA0KICAgIA0KDQoNCiAgICA8IS0tIFNUUlVDVFVSRSBURU1QTEFURVMgLS0+ICAgIA0KICAgIDwhLS09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PS0tPg0KIA0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0iYWRkQ1NTIj4NCiAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InN0eWxlIj4NCiAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9InR5cGUiPnRleHQvY3NzPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ibWVkaWEiPmFsbDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgIDwhLS0gQ1NTIGNsYXNzZXMgLS0+DQogICAgICAgICAgICANCiAgICAgICAgICAgIC5uYnNwU3BhbiB7DQogICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDRweDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLnBhZ2VXaWR0aCB7IA0KICAgICAgICAgICAgICAgIG1pbi13aWR0aDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRNSU5JTVVNX0NPTlRFTlRfV0lEVEhfUFgiLz5weDsNCiAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkRlVMTF9DT05URU5UX1dJRFRIX1BYIi8+cHg7DQogICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5wYWdlV2lkdGhXaXRoTGVmdE1hcmdpbiB7IA0KICAgICAgICAgICAgICAgIG1pbi13aWR0aDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRNSU5JTVVNX0NPTlRFTlRfV0lEVEhfUFgiLz5weDsNCiAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkRlVMTF9DT05URU5UX1dJRFRIX1BYICsgJExFRlRfTUFSR0lOX1dJRFRIX1BYIi8+cHg7DQogICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC5oYWxmUGFnZVdpZHRoIHsgDQogICAgICAgICAgICAgICAgd2lkdGg6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkSEFMRl9DT05URU5UX1dJRFRIX1BYIi8+cHg7IA0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgLnF1YXJ0ZXJQYWdlV2lkdGggeyANCiAgICAgICAgICAgICAgICB3aWR0aDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRRVUFSVEVSX0NPTlRFTlRfV0lEVEhfUFgiLz5weDsgDQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5zZWN0aW9uUGFnZVdpZHRoIHsNCiAgICAgICAgICAgICAgICB3aWR0aDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRGVUxMX0NPTlRFTlRfV0lEVEhfUENUIi8+JTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLnNlY3Rpb25QYWdlV2lkdGhNaW51c01hcmdpbiB7DQogICAgICAgICAgICAgICAgd2lkdGg6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkRlVMTF9DT05URU5UX1dJRFRIX1BDVCAtIDIiLz4lOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAuZ2VuZXJpY3RhYmxlIHsNCiAgICAgICAgICAgICAgICB3aWR0aDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRGVUxMX0NPTlRFTlRfV0lEVEhfUENUIi8+JTsNCiAgICAgICAgICAgICAgICBib3JkZXItc3BhY2luZzogMHB4OyANCiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHg7DQogICAgICAgICAgICAgICAgYm9yZGVyLXNwYWNpbmc6IDBweDsNCiAgICAgICAgICAgICAgICBlbXB0eS1jZWxsczogc2hvdzsNCiAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBTT0xJRCAjRUVFRUVFOw0KICAgICAgICAgICAgICAgIHRhYmxlLWxheW91dDogZml4ZWQ7DQogICAgICAgICAgICAgICAgd29yZC13cmFwOiBicmVhay13b3JkOw0KICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNEREREREQ7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC5nZW5lcmljdGFibGV3aXRoYXV0b2Zvcm1hdCB7DQogICAgICAgICAgICAgICAgd2lkdGg6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkRlVMTF9DT05URU5UX1dJRFRIX1BDVCIvPiU7DQogICAgICAgICAgICAgICAgYm9yZGVyLXNwYWNpbmc6IDBweDsgDQogICAgICAgICAgICAgICAgcGFkZGluZzogMHB4Ow0KICAgICAgICAgICAgICAgIGJvcmRlci1zcGFjaW5nOiAwcHg7DQogICAgICAgICAgICAgICAgZW1wdHktY2VsbHM6IHNob3c7DQogICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggU09MSUQgI0VFRUVFRTsNCiAgICAgICAgICAgICAgICB0YWJsZS1sYXlvdXQ6IGF1dG87DQogICAgICAgICAgICAgICAgd29yZC13cmFwOiBicmVhay13b3JkOw0KICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNEREREREQ7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC5nZW5lcmljdWwgew0KICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDE1cHg7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5nZW5lcmljb2wgew0KICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDE1cHg7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5kb2N1bWVudFRpdGxlVGFibGUgew0KICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDE1cHg7DQogICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMTJweDsNCiAgICAgICAgICAgICAgICBtaW4td2lkdGg6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkTUlOSU1VTV9DT05URU5UX1dJRFRIX1BYIi8+cHg7DQogICAgICAgICAgICAgICAgbWF4LXdpZHRoOiA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJEZVTExfQ09OVEVOVF9XSURUSF9QWCIvPnB4Ow0KICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAuZG9jdW1lbnRUaXRsZVRhYmxlQXV0aG9yRGV0YWlsc1RkIHsNCiAgICAgICAgICAgICAgICB3aWR0aDogNjAlOw0KICAgICAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5kb2N1bWVudFRpdGxlVGFibGVMb2dvVGQgew0KICAgICAgICAgICAgICAgIHdpZHRoOiA0MCU7DQogICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IHRvcDsNCiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiByaWdodDsNCiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHg7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5kb2N1bWVudFRpdGxlQXV0aG9yRGV0YWlsc1RhYmxlIHsNCiAgICAgICAgICAgICAgICBib3JkZXItc3BhY2luZzogMHB4OyANCiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHg7DQogICAgICAgICAgICAgICAgYm9yZGVyLXNwYWNpbmc6IDBweDsNCiAgICAgICAgICAgICAgICBlbXB0eS1jZWxsczogc2hvdzsNCiAgICAgICAgICAgICAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7DQogICAgICAgICAgICAgICAgdGFibGUtbGF5b3V0OiBmaXhlZDsNCiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLmRvY3VtZW50VGl0bGVBdXRob3JEZXRhaWxzVGFibGVUaCB7DQogICAgICAgICAgICAgICAgcGFkZGluZy10b3A6IDBweDsNCiAgICAgICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogMHB4Ow0KICAgICAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDBweDsNCiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsNCiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0Ow0KICAgICAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7DQogICAgICAgICAgICAgICAgd29yZC13cmFwOiBicmVhay13b3JkOyANCiAgICAgICAgICAgICAgICB3aWR0aDogMjAlOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAuZG9jdW1lbnRUaXRsZUF1dGhvckRldGFpbHNUYWJsZVRkIHsNCiAgICAgICAgICAgICAgICBwYWRkaW5nLXRvcDogMHB4Ow0KICAgICAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAwcHg7DQogICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA1cHg7DQogICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDsNCiAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wOw0KICAgICAgICAgICAgICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDsgDQogICAgICAgICAgICAgICAgd2lkdGg6IDgwJTsNCiAgICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC5nZW5lcmljdHIgew0KICAgICAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7DQogICAgICAgICAgICAgfQ0KICAgICAgICAgICAgIA0KICAgICAgICAgICAgIC5nZW5lcmljdGQgew0KICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6I0ZGRkZGRjsNCiAgICAgICAgICAgICAgICBib3JkZXItdG9wOiAxcHggU09MSUQgI0VFRUVFRTsNCiAgICAgICAgICAgICAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICB9DQogICAgICAgICAgICAgDQogICAgICAgICAgICAgLmdlbmVyaWN0aCB7DQogICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiAxcHg7DQogICAgICAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAxcHg7DQogICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6I0RERERERDsNCiAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxMXB4Ow0KICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsNCiAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDsNCiAgICAgICAgICAgICAgICAgd29yZC13cmFwOiBicmVhay13b3JkOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICANCiAgICAgICAgICAgIHVsIHsNCiAgICAgICAgICAgICAgICBwYWRkaW5nLXRvcDogMHB4Ow0KICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDBweDsNCiAgICAgICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogMHB4Ow0KICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDBweDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgb2wgew0KICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiAwcHg7DQogICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMHB4Ow0KICAgICAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAwcHg7DQogICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMHB4Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAueEZpeGVkIHsNCiAgICAgICAgICAgICAgICBmb250LWZhbWlseTptb25vc3BhY2U7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC51bmRlcmxpbmUgew0KICAgICAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAubm91bmRlcmxpbmUgew0KICAgICAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLmJvbGQgew0KICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAuZW1waGFzaXMgew0KICAgICAgICAgICAgICAgIGZvbnQtdmFyaWFudDogc21hbGwtY2FwczsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLml0YWxpYyB7DQogICAgICAgICAgICAgICAgZm9udC1zdHlsZTogaXRhbGljOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAuTHJ1bGUgew0KICAgICAgICAgICAgICAgIGJvcmRlci1sZWZ0OiAxcHggU09MSUQgIzAwMDAwMDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLlJydWxlIHsNCiAgICAgICAgICAgICAgICBib3JkZXItcmlnaHQ6IDFweCBTT0xJRCAjMDAwMDAwOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAuYm90cnVsZSB7DQogICAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IFNPTElEICMwMDAwMDA7DQogICAgICAgICAgICB9DQogICAgICAgICAgICAudG9wcnVsZSB7DQogICAgICAgICAgICAgICAgYm9yZGVyLXRvcDogMXB4IFNPTElEICMwMDAwMDA7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC5ub0xydWxlIHsNCiAgICAgICAgICAgICAgICBib3JkZXItbGVmdDogMXB4IFNPTElEICNFRUVFRUU7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC5ub1JydWxlIHsNCiAgICAgICAgICAgICAgICBib3JkZXItcmlnaHQ6IDFweCBTT0xJRCAjRUVFRUVFOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAubm9Cb3RydWxlIHsNCiAgICAgICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggU09MSUQgI0VFRUVFRTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLm5vVG9wcnVsZSB7DQogICAgICAgICAgICAgICAgYm9yZGVyLXRvcDogMXB4IFNPTElEICNFRUVFRUU7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC5wYXJhZ3JhcGggew0KICAgICAgICAgICAgICAgIGJvcmRlci1zcGFjaW5nOiAwcHg7IA0KICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBweDsNCiAgICAgICAgICAgICAgICBib3JkZXItc3BhY2luZzogMHB4Ow0KICAgICAgICAgICAgICAgIGVtcHR5LWNlbGxzOiBzaG93Ow0KICAgICAgICAgICAgICAgIGJvcmRlcjogMHB4IFNPTElEICNFRUVFRUU7ICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC5ob3Jpem9udGFsc3BhY2VyIHsNCiAgICAgICAgICAgICAgICBoZWlnaHQ6IDE1cHg7DQogICAgICAgICAgICAgICAgYm9yZGVyLXN0eWxlOiBub25lOw0KICAgICAgICAgICAgICAgIGJvcmRlci13aWR0aDogMXB4Ow0KICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogI0ZGRkZGRjsNCiAgICAgICAgICAgICAgICBtaW4td2lkdGg6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkTUlOSU1VTV9DT05URU5UX1dJRFRIX1BYIi8+cHg7DQogICAgICAgICAgICAgICAgbWF4LXdpZHRoOiA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJEZVTExfQ09OVEVOVF9XSURUSF9QWCArICRMRUZUX01BUkdJTl9XSURUSF9QWCIvPnB4Ow0KICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlOyAgICAgICAgICAgIA0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAuaGkgew0KICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogOXB4Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAuPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRQUk9WSURFUl9JTkRJVklEVUFMX0lERU5USUZJRVJfQ1NTX0NMQVNTIi8+IHsNCiAgICAgICAgICAgICAgICBmb250LXNpemU6IDlweDsNCiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMjBweDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkUFJPVklERVJfSU5ESVZJRFVBTF9RVUFMSUZJQ0FUSU9OU19DU1NfQ0xBU1MiLz4gew0KICAgICAgICAgICAgZm9udC1zaXplOiA5cHg7DQogICAgICAgICAgICBtYXJnaW4tbGVmdDogMjBweDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkUFJPVklERVJfSU5ESVZJRFVBTF9PQ0NVUEFUSU9OX0NTU19DTEFTUyIvPiB7DQogICAgICAgICAgICBmb250LXNpemU6IDlweDsNCiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAyMHB4Ow0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAuPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRQUk9WSURFUl9PUkdBTklTQVRJT05fSURFTlRJRklFUl9DU1NfQ0xBU1MiLz4gew0KICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogOXB4Ow0KICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAyMHB4Ow0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAuPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRQUk9WSURFUl9ERVZJQ0VfSURFTlRJRklFUl9DU1NfQ0xBU1MiLz4gew0KICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogOXB4Ow0KICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAyMHB4Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAuZG9jdW1lbnRpbmRpY2F0b3Igew0KICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlOw0KICAgICAgICAgICAgICAgIG1heC13aWR0aDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRGVUxMX0NPTlRFTlRfV0lEVEhfUFgiLz5weDsNCiAgICAgICAgICAgICAgICBtaW4td2lkdGg6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkTUlOSU1VTV9DT05URU5UX1dJRFRIX1BYIi8+cHg7DQogICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOw0KICAgICAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7DQogICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5kb2N1bWVudGluZGljYXRvcmNvbG91cnMgew0KICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICM1NTU7DQogICAgICAgICAgICAgICAgY29sb3I6ICNGRkZGRkY7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC5hZGRyZXNzZGwgew0KICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZTsNCiAgICAgICAgICAgICAgICBtYXJnaW46IDBweDsNCiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHg7DQogICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLmFkZHJlc3NkdCB7DQogICAgICAgICAgICAgICAgbWFyZ2luOiAwcHg7DQogICAgICAgICAgICAgICAgcGFkZGluZzogMHB4Ow0KICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7DQogICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC5hZGRyZXNzZGQgew0KICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZTsNCiAgICAgICAgICAgICAgICBtYXJnaW46IDBweDsNCiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHg7DQogICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLmNvbnRhY3RkZXRhaWxzdWwgew0KICAgICAgICAgICAgICAgIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTsNCiAgICAgICAgICAgICAgICBtYXJnaW46IDBweDsNCiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHg7DQogICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAwOw0KICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC5jb250YWN0ZGV0YWlsc2xpIHsNCiAgICAgICAgICAgICAgICBtYXJnaW46IDBweDsNCiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHg7DQogICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLmNvbnRhY3RkZXRhaWxzZGwgew0KICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZTsNCiAgICAgICAgICAgICAgICBtYXJnaW46IDBweDsNCiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHg7DQogICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLmNvbnRhY3RkZXRhaWxzZHQgew0KICAgICAgICAgICAgICAgIG1hcmdpbjogMHB4Ow0KICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBweDsNCiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0Ow0KICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAuY29udGFjdGRldGFpbHNkZCB7DQogICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lOw0KICAgICAgICAgICAgICAgIG1hcmdpbjogMHB4Ow0KICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBweDsNCiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0Ow0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAuc3BlY2lhbHRpZXN1bCB7DQogICAgICAgICAgICAgICAgbGlzdC1zdHlsZS10eXBlOiBub25lOw0KICAgICAgICAgICAgICAgIG1hcmdpbjogMHB4Ow0KICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBweDsNCiAgICAgICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDA7DQogICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLnNwZWNpYWx0aWVzbGkgew0KICAgICAgICAgICAgICAgIG1hcmdpbjogMHB4Ow0KICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBweDsNCiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAuQkFOTkVSIHsNCiAgICAgICAgICAgICAgICB0b3A6IDBweDsNCiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwMDAwOw0KICAgICAgICAgICAgICAgIGNvbG9yOiAjRkZGRkZGOw0KICAgICAgICAgICAgICAgIG1heC13aWR0aDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRGVUxMX0NPTlRFTlRfV0lEVEhfUFgiLz5weDsNCiAgICAgICAgICAgICAgICBtaW4td2lkdGg6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkTUlOSU1VTV9DT05URU5UX1dJRFRIX1BYIi8+cHg7DQogICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7DQogICAgICAgICAgICAgICAgei1pbmRleDogMTAwMDA7DQogICAgICAgICAgICAgICAgcG9zaXRpb246IGZpeGVkOw0KICAgICAgICAgICAgICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDsNCiAgICAgICAgICAgICAgICBoZWlnaHQ6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkQkFOTkVSX0hFSUdIVF9QWCIvPnB4Ow0KICAgICAgICAgICAgICAgIF9wb3NpdGlvbjphYnNvbHV0ZTsNCiAgICAgICAgICAgICAgICBfdG9wOmV4cHJlc3Npb24oMCsoKGU9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCk/ZTpkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCkrJ3B4Jyk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5CQU5ORVJfQkFDSyB7DQogICAgICAgICAgICAgICAgdG9wOiAwcHg7DQogICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDAwMDsNCiAgICAgICAgICAgICAgICBjb2xvcjogI0ZGRkZGRjsNCiAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkRlVMTF9DT05URU5UX1dJRFRIX1BYIi8+cHg7DQogICAgICAgICAgICAgICAgbWluLXdpZHRoOiA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJE1JTklNVU1fQ09OVEVOVF9XSURUSF9QWCIvPnB4Ow0KICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlOw0KICAgICAgICAgICAgICAgIHotaW5kZXg6IDEwMDAwOw0KICAgICAgICAgICAgICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDsNCiAgICAgICAgICAgICAgICBoZWlnaHQ6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkQkFOTkVSX0hFSUdIVF9QWCIvPnB4Ow0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAuY2xlYXJmaXg6YWZ0ZXIge2NvbnRlbnQ6ICIuIjsgZGlzcGxheTogYmxvY2s7IGhlaWdodDogMDsgY2xlYXI6IGJvdGg7IHZpc2liaWxpdHk6IGhpZGRlbjt9DQogICAgICAgICAgICAuY2xlYXJmaXgge2Rpc3BsYXk6IGlubGluZS1ibG9jazt9DQogICAgICAgICAgICAvKiBIaWRlcyBmcm9tIElFLW1hYyBcKi8NCiAgICAgICAgICAgICogaHRtbCAuY2xlYXJmaXgge2hlaWdodDogMSU7fQ0KICAgICAgICAgICAgLmNsZWFyZml4IHtkaXNwbGF5OiBibG9jazt9DQogICAgICAgICAgICAvKiBFbmQgaGlkZSBmcm9tIElFLW1hYyAqLw0KICAgICAgICAgICAgDQogICAgICAgICAgICAuQkFOTkVSX0RPQ1VNRU5UX1RJVExFX0RJViB7DQogICAgICAgICAgICAgICAgcGFkZGluZy10b3A6IDE1cHg7DQogICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IHRvcDsNCiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogICAgICAgICAgICAgICAgbWFyZ2luIDBweDsNCiAgICAgICAgICAgICAgICBmb250LXNpemU6IDE4cHg7DQogICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IEhlbHZldGljYTsNCiAgICAgICAgICAgICAgICBjb2xvcjogI0ZGRkZGRjsNCiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsNCiAgICAgICAgICAgICAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5CQU5ORVJfRE9DVU1FTlRfREFURV9ESVYgew0KICAgICAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7DQogICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOw0KICAgICAgICAgICAgICAgIG1hcmdpbiAwcHg7DQogICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4Ow0KICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBIZWx2ZXRpY2E7DQogICAgICAgICAgICAgICAgY29sb3I6ICNGRkZGRkY7DQogICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC5CQU5ORVJfUEFUSUVOVF9ERVRBSUxTX0RJViB7DQogICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAxNXB4Ow0KICAgICAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDE1cHg7DQogICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IHRvcDsNCiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0Ow0KICAgICAgICAgICAgICAgIG92ZXJmbG93OiBhdXRvOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAuYmFubmVyRGwgew0KICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlOw0KICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLmJhbm5lckR0IHsNCiAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmU7DQogICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4Ow0KICAgICAgICAgICAgICAgIGNvbG9yOiAjQ0NDQ0NDOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAuYmFubmVyRGQgew0KICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwcHg7DQogICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lOw0KICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDsNCiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDMwcHg7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC5hdXRob3JPcmdhbmlzYXRpb25DbGFzcyB7DQogICAgICAgICAgICAgICAgZm9udC1zaXplOiAyNnB4Ow0KICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBIZWx2ZXRpY2E7DQogICAgICAgICAgICAgICAgY29sb3I6ICMwMDAwMDA7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5zcGFjZWRTZWN0aW9uIHsgIA0KICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDBweDsNCiAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAwcHg7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC5kZXRhaWxzSGFsZlRhYmxlSGVhZGVyRGl2IHsNCiAgICAgICAgICAgICAgICBmb250LXN0eWxlOiBpdGFsaWM7DQogICAgICAgICAgICAgICAgY29sb3I6ICMwMDAwMDA7DQogICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7DQogICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogM3B4Ow0KICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlOw0KICAgICAgICAgICAgICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLmRldGFpbHNIYWxmVGFibGUgew0KICAgICAgICAgICAgICAgIHRhYmxlLWxheW91dDogZml4ZWQ7DQogICAgICAgICAgICAgICAgd2lkdGg6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkRlVMTF9DT05URU5UX1dJRFRIX1BDVCIvPiU7DQogICAgICAgICAgICAgICAgc3BhY2luZzogMHB4Ow0KICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBweDsNCiAgICAgICAgICAgICAgICBib3JlcjogMHB4Ow0KICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDE1cHg7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC5kZXRhaWxzSGFsZlRhYmxlVGggew0KICAgICAgICAgICAgICAgIHdpZHRoOiA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJERFVEFJTFNfSEFMRl9UQUJMRV9USF9XSURUSF9QQ1QiLz4lOw0KICAgICAgICAgICAgICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDsNCiAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wOw0KICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5kZXRhaWxzSGFsZlRhYmxlVGhTcGFuIHsNCiAgICAgICAgICAgICAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7DQogICAgICAgICAgICAgICAgZm9udC1zdHlsZTogbm9ybWFsOw0KICAgICAgICAgICAgICAgIGNvbG9yOiAjNzI3MjcyOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAuZGV0YWlsc0hhbGZUYWJsZVRkIHsNCiAgICAgICAgICAgICAgICB3aWR0aDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRERVRBSUxTX0hBTEZfVEFCTEVfVERfV0lEVEhfUENUIi8+JTsNCiAgICAgICAgICAgICAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7DQogICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IHRvcDsNCiAgICAgICAgICAgICAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5pZGVudGlmaWVyIHsNCiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMjBweDsgDQogICAgICAgICAgICAgICAgZm9udC1zaXplOiA5cHg7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC5kZXRhaWxzVGFibGUgew0KICAgICAgICAgICAgICAgIHRhYmxlLWxheW91dDogZml4ZWQ7DQogICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDBweDsNCiAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAwcHg7DQogICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMHB4Ow0KICAgICAgICAgICAgICAgIGJvcmRlci10b3A6IDBweDsNCiAgICAgICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggU09MSUQgIzAwMDAwMDsNCiAgICAgICAgICAgICAgICB3aWR0aDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRGVUxMX0NPTlRFTlRfV0lEVEhfUENUIi8+JTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLmRldGFpbHNUYWJsZVRyIHsNCiAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAuZGV0YWlsc1RhYmxlVGQgew0KICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6I0YxRjFGMTsNCiAgICAgICAgICAgICAgICB3aWR0aDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRIQUxGX0NPTlRFTlRfV0lEVEhfUENUIi8+JTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLmRldGFpbHNUYWJsZVRoIHsNCiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiNGMUYxRjE7DQogICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLnNlY3Rpb25IZWFkZXIgew0KICAgICAgICAgICAgICAgIHdpZHRoOiA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJEZVTExfQ09OVEVOVF9XSURUSF9QQ1QiLz4lOw0KICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTdweDsNCiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsNCiAgICAgICAgICAgICAgICBjb2xvcjogIzAwMDAwMDsNCiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA1cHg7DQogICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMHB4Ow0KICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBTT0xJRCAjMDAwMDAwOzsNCiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHg7DQogICAgICAgICAgICAgICAgd29yZC13cmFwOiBicmVhay13b3JkOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAubmVzdGVkU2VjdGlvbkhlYWRlciB7DQogICAgICAgICAgICAgICAgd2lkdGg6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkRlVMTF9DT05URU5UX1dJRFRIX1BDVCAtIDIiLz4lOw0KICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTdweDsNCiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsNCiAgICAgICAgICAgICAgICBjb2xvcjogIzAwMDAwMDsNCiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA1cHg7DQogICAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IFNPTElEICMwMDAwMDA7Ow0KICAgICAgICAgICAgICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLnBhcnRpY2lwYW50c0hlYWRlciB7DQogICAgICAgICAgICAgICAgZm9udC1zaXplOiAxN3B4Ow0KICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOw0KICAgICAgICAgICAgICAgIGNvbG9yOiAjMDAwMDAwOw0KICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDVweDsNCiAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAwcHg7DQogICAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IFNPTElEICMwMDAwMDA7DQogICAgICAgICAgICAgICAgcGFkZGluZzogMHB4Ow0KICAgICAgICAgICAgICAgIG1pbi13aWR0aDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRNSU5JTVVNX0NPTlRFTlRfV0lEVEhfUFggLSAoJExFRlRfTUFSR0lOX1dJRFRIX1BYICsgJFJJR0hUX01BUkdJTl9XSURUSF9QWCkiLz5weDsNCiAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkRlVMTF9DT05URU5UX1dJRFRIX1BYIC0gKCRMRUZUX01BUkdJTl9XSURUSF9QWCArICRSSUdIVF9NQVJHSU5fV0lEVEhfUFgpIi8+cHg7DQogICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkTEVGVF9NQVJHSU5fV0lEVEhfUFgiLz5weDsNCiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkUklHSFRfTUFSR0lOX1dJRFRIX1BYIi8+cHgNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgLmxpc3RUYWJsZUNhcHRpb24gew0KICAgICAgICAgICAgICAgIGZvbnQtc3R5bGU6IGl0YWxpYzsNCiAgICAgICAgICAgICAgICBjb2xvcjogIzcyNzI3MjsNCiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsNCiAgICAgICAgICAgICAgICBmb250LXNpemU6IDEycHg7DQogICAgICAgICAgICAgICAgcGFkZGluZzogNXB4IDVweCA1cHggMHB4Ow0KICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC5wYXJ0aWNpcGFudHNUYWJsZUNsYXNzIHsNCiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHg7DQogICAgICAgICAgICAgICAgYm9yZGVyLXNwYWNpbmc6IDBweDsNCiAgICAgICAgICAgICAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlOw0KICAgICAgICAgICAgICAgIHRhYmxlLWxheW91dDogZml4ZWQ7DQogICAgICAgICAgICAgICAgd29yZC13cmFwOiBicmVhay13b3JkOw0KICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDE1cHg7DQogICAgICAgICAgICAgICAgbWluLXdpZHRoOiA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJE1JTklNVU1fQ09OVEVOVF9XSURUSF9QWCAtICgkTEVGVF9NQVJHSU5fV0lEVEhfUFggKyAkUklHSFRfTUFSR0lOX1dJRFRIX1BYKSIvPnB4Ow0KICAgICAgICAgICAgICAgIG1heC13aWR0aDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRGVUxMX0NPTlRFTlRfV0lEVEhfUFggLSAoJExFRlRfTUFSR0lOX1dJRFRIX1BYICsgJFJJR0hUX01BUkdJTl9XSURUSF9QWCkiLz5weDsNCiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRMRUZUX01BUkdJTl9XSURUSF9QWCIvPnB4Ow0KICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRSSUdIVF9NQVJHSU5fV0lEVEhfUFgiLz5weA0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAuUEFSVElDSVBBTlRfSEVBREVSX1JPV19USCB7DQogICAgICAgICAgICAgICAgcGFkZGluZy10b3A6IDFweDsNCiAgICAgICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogMXB4Ow0KICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6I0RERERERDsNCiAgICAgICAgICAgICAgICBmb250LXNpemU6IDExcHg7DQogICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7DQogICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAxNXB4Ow0KICAgICAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDE1cHg7DQogICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDsNCiAgICAgICAgICAgICAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLlBBUlRJQ0lQQU5UX0JPRFlfUk9XX1REIHsNCiAgICAgICAgICAgICAgICBib3JkZXItdG9wOiAxcHggU09MSUQgI0VFRUVFRTsNCiAgICAgICAgICAgICAgICBwYWRkaW5nOiA1cHggMTVweCA1cHggMTVweDsNCiAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wOw0KICAgICAgICAgICAgICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLlJFQ0lQSUVOVF9IRUFERVJfUk9XX1RIIHsNCiAgICAgICAgICAgICAgICBwYWRkaW5nLXRvcDogMXB4Ow0KICAgICAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAxcHg7DQogICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjojREREREREOw0KICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTFweDsNCiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsNCiAgICAgICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDE1cHg7DQogICAgICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMTVweDsNCiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0Ow0KICAgICAgICAgICAgICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAuUkVDSVBJRU5UX0hFQURFUl9ST1dfVEQgew0KICAgICAgICAgICAgICAgIGJvcmRlci10b3A6IDFweCBTT0xJRCAjRUVFRUVFOw0KICAgICAgICAgICAgICAgIHBhZGRpbmc6IDVweCAxNXB4IDVweCAxNXB4Ow0KICAgICAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7DQogICAgICAgICAgICAgICAgd29yZC13cmFwOiBicmVhay13b3JkOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICA8IS0tIFNwZWNpZmljIGVsZW1lbnRzIC0tPg0KICAgICAgICAgICAgYm9keSB7IA0KICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDsNCiAgICAgICAgICAgICAgICBmb250LWZhbWlseTogVmVyZGFuYSwgSGVsdmV0aWNhLCBTYW5zLVNlcmlmOw0KICAgICAgICAgICAgICAgIHBhZGRpbmc7IDBweDsNCiAgICAgICAgICAgICAgICBjb2xvcjogIzAwMDAwMDsNCiAgICAgICAgICAgICAgICBtYXJnaW46IDBweDsNCiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHg7DQogICAgICAgICAgICAgICAgbWluLXdpZHRoOiA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJE1JTklNVU1fQ09OVEVOVF9XSURUSF9QWCIvPnB4Ow0KICAgICAgICAgICAgICAgIG1heC13aWR0aDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRGVUxMX0NPTlRFTlRfV0lEVEhfUFgiLz5weDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgcHJlIHsNCiAgICAgICAgICAgICAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7DQogICAgICAgICAgICAgICAgd2hpdGUtc3BhY2U6IHByZS13cmFwOw0KICAgICAgICAgICAgICAgIG1hcmdpbjowcHg7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIHAuZGl2IHsNCiAgICAgICAgICAgICAgICB3aWR0aDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRGVUxMX0NPTlRFTlRfV0lEVEhfUFgiLz5weDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgYTpsaW5rIHsgDQogICAgICAgICAgICAgICAgY29sb3I6IGJsdWU7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIGE6dmlzaXRlZCB7IA0KICAgICAgICAgICAgICAgIGNvbG9yOiBibHVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICBhOmhvdmVyIHsNCiAgICAgICAgICAgICAgICBjb2xvcjogcmVkOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICBhOmFjdGl2ZSB7DQogICAgICAgICAgICAgICAgY29sb3I6IHJlZDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgYS5hZ2VMaW5rIHsNCiAgICAgICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIGEuYWdlTGluazpsaW5rIHsgDQogICAgICAgICAgICBjb2xvcjogI0ZGRkZGRjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgYS5hZ2VMaW5rOnZpc2l0ZWQgeyANCiAgICAgICAgICAgIGNvbG9yOiAjRkZGRkZGOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICBhI2FnZUxpbms6aG92ZXIgew0KICAgICAgICAgICAgY29sb3I6ICNGRkZGRkY7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIGEjYWdlTGluazphY3RpdmUgew0KICAgICAgICAgICAgY29sb3I6ICNGRkZGRkY7DQogICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICA8IS0tIEVsZW1lbnRzIHdpdGggaWQgYXR0cmlidXRlcyAtLT4NCiAgICAgICAgICAgIGRpdiNMT0dPIHsNCiAgICAgICAgICAgICAgICB3aWR0aDogNDAwcHg7DQogICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDBweDsNCiAgICAgICAgICAgICAgICBjbGlwOiByZWN0KDBweCwgNDAwcHgsIDEwMHB4LCAwcHgpOw0KICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47DQogICAgICAgICAgICAgICAgcGFkZGluZzogMHB4Ow0KICAgICAgICAgICAgfSAgICAgICAgICAgIA0KICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tICA8L3N0eWxlIHRleHQ9InRleHQvY3NzIiBtZWRpYT0iYWxsIj4gLS0+DQogICAgICAgIA0KICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3R5bGUiPg0KICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0idHlwZSI+dGV4dC9jc3M8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJtZWRpYSI+c2NyZWVuPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgPCEtLSBDU1MgY2xhc3NlcyAtLT4NCiAgICAgICAgICAgIC5zaG93SGlkZUhlYWRlckRldGFpbHNCdXR0b25UYWJsZVJvdyB7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5zcGFjZVRvU2Nyb2xsVG9Gb290bm90ZXNEaXYgeyANCiAgICAgICAgICAgICAgICBtaW4td2lkdGg6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkTUlOSU1VTV9DT05URU5UX1dJRFRIX1BYIC0gKCRSSUdIVF9NQVJHSU5fV0lEVEhfUFggKyAkTEVGVF9NQVJHSU5fV0lEVEhfUFgpIi8+cHg7DQogICAgICAgICAgICAgICAgbWF4LXdpZHRoOiA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJEZVTExfQ09OVEVOVF9XSURUSF9QWCAtICgkUklHSFRfTUFSR0lOX1dJRFRIX1BYICsgJExFRlRfTUFSR0lOX1dJRFRIX1BYKSIvPnB4Ow0KICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAuREVUQUlMUyB7DQogICAgICAgICAgICAgICAgbWluLXdpZHRoOiA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJE1JTklNVU1fQ09OVEVOVF9XSURUSF9QWCAtICgkUklHSFRfTUFSR0lOX1dJRFRIX1BYICsgJExFRlRfTUFSR0lOX1dJRFRIX1BYKSIvPnB4Ow0KICAgICAgICAgICAgICAgIG1heC13aWR0aDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRGVUxMX0NPTlRFTlRfV0lEVEhfUFggLSAoJFJJR0hUX01BUkdJTl9XSURUSF9QWCArICRMRUZUX01BUkdJTl9XSURUSF9QWCkiLz5weDsNCiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTsNCiAgICAgICAgICAgICAgICBtYXJnaW46IDBweDsgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgYm90dG9tOiAwcHg7IA0KICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICNGRkZGRkY7DQogICAgICAgICAgICAgICAgcGFkZGluZzogMHB4IDBweCAwcHggMHB4Ow0KICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJExFRlRfTUFSR0lOX1dJRFRIX1BYIi8+cHg7DQogICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJFJJR0hUX01BUkdJTl9XSURUSF9QWCIvPnB4Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICA8IS0tIEVsZW1lbnRzIHdpdGggaWQgYXR0cmlidXRlcyAtLT4NCiAgICAgICAgICAgIGRpdiNST09UIHsNCiAgICAgICAgICAgICAgICBwb3NpdGlvbjphYnNvbHV0ZTsNCiAgICAgICAgICAgICAgICBtaW4td2lkdGg6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkTUlOSU1VTV9DT05URU5UX1dJRFRIX1BYIi8+cHg7DQogICAgICAgICAgICAgICAgbWF4LXdpZHRoOiA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJEZVTExfVklFV1BPUlRfV0lEVEhfUFgiLz5weDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLkNPTlRFTlQgew0KICAgICAgICAgICAgICAgIG1pbi13aWR0aDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRNSU5JTVVNX0NPTlRFTlRfV0lEVEhfUFgiLz5weDsNCiAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkRlVMTF9DT05URU5UX1dJRFRIX1BYIi8+cHg7DQogICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7DQogICAgICAgICAgICAgICAgbWFyZ2luOiAwcHg7ICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGJvdHRvbTogMHB4OyANCiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAjRkZGRkZGOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAuQk9EWSB7DQogICAgICAgICAgICAgICAgbWluLXdpZHRoOiA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJE1JTklNVU1fQ09OVEVOVF9XSURUSF9QWCIvPnB4Ow0KICAgICAgICAgICAgICAgIG1heC13aWR0aDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRGVUxMX0NPTlRFTlRfV0lEVEhfUFggLSAoJExFRlRfTUFSR0lOX1dJRFRIX1BYICsgJFJJR0hUX01BUkdJTl9XSURUSF9QWCkiLz5weDsNCiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTsNCiAgICAgICAgICAgICAgICBtYXJnaW46IDBweDsgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgYm90dG9tOiAwcHg7IA0KICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICNGRkZGRkY7DQogICAgICAgICAgICAgICAgcGFkZGluZzogMHB4IDBweCAwcHggMHB4Ow0KICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJExFRlRfTUFSR0lOX1dJRFRIX1BYIi8+cHg7DQogICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJFJJR0hUX01BUkdJTl9XSURUSF9QWCIvPnB4Ow0KICAgICAgICAgICAgfQ0KICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tICA8L3N0eWxlIHRleHQ9InRleHQvY3NzIiBtZWRpYT0ic2NyZWVuIj4gLS0+DQogICAgICAgIA0KICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3R5bGUiPg0KICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0idHlwZSI+dGV4dC9jc3M8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJtZWRpYSI+cHJpbnQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAuQkFOTkVSIHsNCiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC5CQU5ORVJfQkFDSyB7DQogICAgICAgICAgICB0b3A6IDBweDsNCiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDAwMDA7DQogICAgICAgICAgICBjb2xvcjogI0ZGRkZGRjsNCiAgICAgICAgICAgIG1heC13aWR0aDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRGVUxMX0NPTlRFTlRfV0lEVEhfUFgiLz5weDsNCiAgICAgICAgICAgIG1pbi13aWR0aDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRNSU5JTVVNX0NPTlRFTlRfV0lEVEhfUFgiLz5weDsNCiAgICAgICAgICAgIHdpZHRoOiAxMDAlOw0KICAgICAgICAgICAgei1pbmRleDogMTAwMDA7DQogICAgICAgICAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7DQogICAgICAgICAgICBoZWlnaHQ6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkQkFOTkVSX0hFSUdIVF9QWCIvPnB4Ow0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgPCEtLQ0KICAgICAgICAgICAgLkJBTk5FUiB7DQogICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTsgICAgICAgICAgICANCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLkJBTk5FUl9CQUNLIHsNCiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgLS0+DQogICAgICAgICAgICANCiAgICAgICAgICAgIDwhLS0gQ1NTIGNsYXNzZXMgLS0+DQogICAgICAgICAgICAuc2hvd0hpZGVIZWFkZXJEZXRhaWxzQnV0dG9uVGFibGVSb3cgeyANCiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAuc3BhY2VUb1Njcm9sbFRvRm9vdG5vdGVzRGl2IHsgDQogICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSAgPC9zdHlsZSB0ZXh0PSJ0ZXh0L2NzcyIgbWVkaWE9InByaW50Ij4gLS0+DQogICA8L3hzbDp0ZW1wbGF0ZT4NCiANCiAgICA8eHNsOnRlbXBsYXRlIG5hbWU9ImdldEhvcml6b250YWxTcGFjZXIiPg0KICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iZGl2Ij4NCiAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5ob3Jpem9udGFsc3BhY2VyPC94c2w6YXR0cmlidXRlPg0KICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgIDwveHNsOnRlbXBsYXRlPg0KICAgIA0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0iZ2V0Rm9vdG5vdGVzVGFibGUiPg0KICAgICAgICA8eHNsOmlmIHRlc3Q9ImNvdW50KC8vY2RhOmZvb3Rub3RlKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImgxIj4NCiAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+cGFydGljaXBhbnRzSGVhZGVyPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIEZvb3Rub3Rlcw0KICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0YWJsZSI+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPnBhcnRpY2lwYW50c1RhYmxlQ2xhc3M8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ic3VtbWFyeSI+Rk9PVE5PVEVTX1RBQkxFPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9InN0eWxlIj50YWJsZS1sYXlvdXQ6IGZpeGVkOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0Ym9keSI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGQiPjx4c2w6YXBwbHktdGVtcGxhdGVzIG1vZGU9ImZvb3Rub3RlIiBzZWxlY3Q9Ii4vL2NkYTpmb290bm90ZSIvPjwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90cj4gLS0+DQogICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3Rib2R5PiAtLT4NCiAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90YWJsZT4gLS0+ICAgICAgICAgICAgDQogICAgICAgIDwveHNsOmlmPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJnZXRTcGFjZVRvU2Nyb2xsVG9Gb290bm90ZXNEaXYiPg0KICAgICAgICA8eHNsOmlmIHRlc3Q9ImNvdW50KC8vY2RhOmZvb3Rub3RlKSAmZ3Q7IDAgb3INCiAgICAgICAgICAgICAgICAgICAgICAobm90KCRwYXRpZW50QWdlPSdERUNFQVNFRCcpIGFuZCBub3QoJHBhdGllbnRBZ2U9J0FHRSBVTktOT1dOJykgYW5kIHN0cmluZy1sZW5ndGgoJHBhdGllbnRDb2RlZEFnZSkgPSAwKSI+DQogICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iZGl2Ij4NCiAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+c3BhY2VUb1Njcm9sbFRvRm9vdG5vdGVzRGl2PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9InN0eWxlIj5oZWlnaHQ6MTUwMHB4OyBiYWNrZ3JvdW5kOiNGRkZGRkY7IGNvbG9yOiNGRkZGRkY7PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJwcmludE5CU1BzIj48eHNsOndpdGgtcGFyYW0gbmFtZT0ibnVtYmVyIj4xPC94c2w6d2l0aC1wYXJhbT48L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L2Rpdj4gLS0+DQogICAgICAgIDwveHNsOmlmPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KICAgIA0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0iZ2V0U3RhcnRPZkRvY3VtZW50SW5kaWNhdG9yIj4NCiAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldERvY3VtZW50SW5kaWNhdG9yIj4NCiAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJpbmRpY2F0b3JUZXh0Ij5TVEFSVCBPRiBET0NVTUVOVDwveHNsOndpdGgtcGFyYW0+DQogICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJnZXRSZW5kZXJpbmdTcGVjaWZpY2F0aW9uSW5jb21wYXRpYmlsaXR5V2FybmluZyI+DQogICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXREb2N1bWVudEluZGljYXRvciI+DQogICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iaW5kaWNhdG9yVGV4dCI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRDREFfUkVOREVSSU5HX1NQRUNJRklDQVRJT05fSU5DT01QQVRJQklMSVRZX1dBUk5JTkciLz48L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InBhZGRpbmdCb3R0b20iPjA8L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InBhZGRpbmdUb3AiPjA8L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImJhY2tncm91bmRDb2xvdXIiPkZGRkZGRjwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0idGV4dENvbG91ciI+MDAwMDAwPC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJib3JkZXJDb2xvdXIiPjAwMDAwMDwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZm9udFNpemUiPjE0PC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgICANCiAgICA8eHNsOnRlbXBsYXRlIG5hbWU9ImdldEFkbWluaXN0cmF0aXZlRGV0YWlsc0luZGljYXRvciI+DQogICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXREb2N1bWVudEluZGljYXRvciI+DQogICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iaW5kaWNhdG9yVGV4dCI+QURNSU5JU1RSQVRJVkUgREVUQUlMUzwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ibWFyZ2luVG9wIj4xMDwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ibWFyZ2luQm90dG9tIj4xMDwveHNsOndpdGgtcGFyYW0+DQogICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJnZXRFbmRPZkRvY3VtZW50SW5kaWNhdG9yIj4NCiAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldERvY3VtZW50SW5kaWNhdG9yIj4NCiAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJpbmRpY2F0b3JUZXh0Ij5FTkQgT0YgRE9DVU1FTlQ8L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJnZXRTdHlsZVNoZWV0VmVyc2lvbkluZGljYXRvciI+DQogICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXREb2N1bWVudEluZGljYXRvciI+DQogICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iaW5kaWNhdG9yVGV4dCIgc2VsZWN0PSIkVkVSU0lPTl9OT1RFIi8+DQogICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iYmFja2dyb3VuZENvbG91ciI+I0ZGRkZGRjwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZm9udFNpemUiPjg8L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KICAgIA0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0iZ2V0RG9jdW1lbnRJbmRpY2F0b3IiPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9ImluZGljYXRvclRleHQiLz4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJtYXJnaW5Ub3AiLz4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJtYXJnaW5Cb3R0b20iLz4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJwYWRkaW5nVG9wIi8+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0icGFkZGluZ0JvdHRvbSIvPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9ImJhY2tncm91bmRDb2xvdXIiLz4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJ0ZXh0Q29sb3VyIi8+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0iYm9yZGVyQ29sb3VyIi8+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0iZm9udFNpemUiPjwveHNsOnBhcmFtPg0KICAgICAgICANCiAgICAgICAgPHhzbDppZiB0ZXN0PSIkaW5kaWNhdG9yVGV4dCBhbmQNCiAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRpbmRpY2F0b3JUZXh0KSAmZ3Q7IDAiPg0KICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImRpdiI+DQogICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIoc3RyaW5nLWxlbmd0aCgkYmFja2dyb3VuZENvbG91cikgJmd0OyAwKSBvciAoc3RyaW5nLWxlbmd0aCgkdGV4dENvbG91cikgJmd0OyAwKSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZG9jdW1lbnRpbmRpY2F0b3I8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRvY3VtZW50aW5kaWNhdG9yIGRvY3VtZW50aW5kaWNhdG9yY29sb3VyczwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJzdHlsZSI+Ym9yZGVyOiAwcHggU09MSUQgIzAwMDAwMDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJG1hcmdpblRvcCBhbmQgc3RyaW5nLWxlbmd0aCgkbWFyZ2luVG9wKSAmZ3Q7IDAiPm1hcmdpbi10b3A6IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkbWFyZ2luVG9wIi8+cHg7PC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPm1hcmdpbi10b3A6IDBweDs8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJG1hcmdpbkJvdHRvbSBhbmQgc3RyaW5nLWxlbmd0aCgkbWFyZ2luQm90dG9tKSAmZ3Q7IDAiPm1hcmdpbi1ib3R0b206IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkbWFyZ2luQm90dG9tIi8+cHg7PC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPm1hcmdpbi1ib3R0b206IDBweDs8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJHBhZGRpbmdCb3R0b20gYW5kIHN0cmluZy1sZW5ndGgoJHBhZGRpbmdCb3R0b20pICZndDsgMCI+cGFkZGluZy1ib3R0b206IDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkcGFkZGluZ0JvdHRvbSIvPnB4OzwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT5wYWRkaW5nLWJvdHRvbTogMHB4OzwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkcGFkZGluZ1RvcCBhbmQgc3RyaW5nLWxlbmd0aCgkcGFkZGluZ1RvcCkgJmd0OyAwIj5wYWRkaW5nLXRvcDogPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRwYWRkaW5nVG9wIi8+cHg7PC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPnBhZGRpbmctdG9wOiAwcHg7PC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0ic3RyaW5nLWxlbmd0aCgkYmFja2dyb3VuZENvbG91cikgJmd0OyAwIj5iYWNrZ3JvdW5kOiAjPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRiYWNrZ3JvdW5kQ29sb3VyIi8+OzwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9InN0cmluZy1sZW5ndGgoJHRleHRDb2xvdXIpICZndDsgMCI+Y29sb3I6ICM8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJHRleHRDb2xvdXIiLz47PC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0ic3RyaW5nLWxlbmd0aCgkZm9udFNpemUpICZndDsgMCI+Zm9udC1zaXplOiA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGZvbnRTaXplIi8+cHg7PC94c2w6aWY+DQogICAgICAgICAgICAgICAgPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0ic3RyaW5nLWxlbmd0aCgkYm9yZGVyQ29sb3VyKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImRpdiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ic3R5bGUiPnBhZGRpbmc6IDBweDsgbWFyZ2luOiAwcHg7IGJvcmRlcjogMnB4IFNPTElEICM8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGJvcmRlckNvbG91ciIvPjs8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRpbmRpY2F0b3JUZXh0Ii8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvZGl2PiAtLT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGluZGljYXRvclRleHQiLz4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC9kaXY+IC0tPg0KICAgICAgICA8L3hzbDppZj4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgICANCiAgICA8eHNsOnRlbXBsYXRlIG5hbWU9ImdldEFkZHJlc3NEZXRhaWxzUm93cyI+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0icGVyc29uT3JPcmciLz4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJpc1BhdGllbnQiIC8+DQogICAgICAgICAgICAgICAgDQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0icGVyc29uT3JPcmdBZGRyZXNzIiBzZWxlY3Q9IiRwZXJzb25Pck9yZy9jZGE6YWRkciIvPg0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InBlcnNvbk9yT3JnT3JnQWRkcmVzcyINCiAgICAgICAgICAgIHNlbGVjdD0iJHBlcnNvbk9yT3JnL2NkYTphc3NpZ25lZFBlcnNvbi9leHQ6YXNFbXBsb3ltZW50L2V4dDplbXBsb3llck9yZ2FuaXphdGlvbi9jZGE6YXNPcmdhbml6YXRpb25QYXJ0T2YvY2RhOndob2xlT3JnYW5pemF0aW9uL2NkYTphZGRyIi8+DQogICAgICAgICAgICAgICAgDQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0idXNlT3JnQWRkcmVzcyIgc2VsZWN0PSJjb3VudCgkcGVyc29uT3JPcmdPcmdBZGRyZXNzKSAmZ3Q7IDAgYW5kIGNvdW50KCRwZXJzb25Pck9yZ0FkZHJlc3MpID0gMCIvPg0KICAgICAgICANCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJhZGRyZXNzUm93cyIgc2VsZWN0PSIkcGVyc29uT3JPcmcvY2RhOmFzc2lnbmVkUGVyc29uL2V4dDphc0VtcGxveW1lbnQvZXh0OmVtcGxveWVyT3JnYW5pemF0aW9uL2NkYTphc09yZ2FuaXphdGlvblBhcnRPZi9jZGE6d2hvbGVPcmdhbml6YXRpb24vY2RhOmFkZHJbJHVzZU9yZ0FkZHJlc3MgYW5kICgkaXNQYXRpZW50ID0gJ3RydWUnIG9yICRzaG93UHJvdmlkZXJIb21lRGV0YWlscyA9ICd0cnVlJyBvciBub3QoY29udGFpbnMoQHVzZSwgJ0gnKSkpXSANCiAgICAgICAgICAgIHwgJHBlcnNvbk9yT3JnL2NkYTphZGRyW25vdCgkdXNlT3JnQWRkcmVzcykgYW5kICgkaXNQYXRpZW50ID0gJ3RydWUnIG9yICRzaG93UHJvdmlkZXJIb21lRGV0YWlscyA9ICd0cnVlJyBvciBub3QoY29udGFpbnMoQHVzZSwgJ0gnKSkpXSIvPg0KICAgICAgICANCiAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iY291bnQoJGFkZHJlc3NSb3dzKSAmZ3Q7IDAiPiAgICAgIA0KICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSIkYWRkcmVzc1Jvd3MiPiAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRoIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJzcGFuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaFNwYW48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0ic3RyaW5nLWxlbmd0aCguL0B1c2UpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldEFkZHJlc3NVc2VEZXNjcmlwdG9yIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImNvZGUiIHNlbGVjdD0iLi9AdXNlIj48L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWRkcmVzcw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gDQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InNob3ctYWRkcmVzcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJhZGRyZXNzIiBzZWxlY3Q9Ii4iLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L3RkPiAtLT4gDQogICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90cj4gLS0+DQogICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+ICAgICAgICAgICANCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJzcGFuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoU3BhbjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBZGRyZXNzDQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdHNwYW4+IC0tPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiAgPCEtLSA8L3RoPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIE5vdCBQcm92aWRlZA0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdGQ+IC0tPiANCiAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvdHI+IC0tPiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4gICAgICAgICAgICANCiAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KICAgIA0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0iZ2V0Q29udGFjdERldGFpbHNSb3dzIj4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJwZXJzb25Pck9yZyIvPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9ImlzUGF0aWVudCIgLz4NCiAgICAgICAgDQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0icGVyc29uT3JPcmdDb250YWN0cyIgc2VsZWN0PSIkcGVyc29uT3JPcmcvY2RhOnRlbGVjb20iLz4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJwZXJzb25Pck9yZ09yZ0NvbnRhY3RzIg0KICAgICAgICAgICAgc2VsZWN0PSIkcGVyc29uT3JPcmcvY2RhOmFzc2lnbmVkUGVyc29uL2V4dDphc0VtcGxveW1lbnQvZXh0OmVtcGxveWVyT3JnYW5pemF0aW9uL2NkYTphc09yZ2FuaXphdGlvblBhcnRPZi9jZGE6d2hvbGVPcmdhbml6YXRpb24vY2RhOnRlbGVjb20iLz4NCiAgICAgICAgDQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0idXNlT3JnQ29udGFjdHMiIHNlbGVjdD0iY291bnQoJHBlcnNvbk9yT3JnT3JnQ29udGFjdHMpICZndDsgMCBhbmQgY291bnQoJHBlcnNvbk9yT3JnQ29udGFjdHMpID0gMCIvPg0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImNvbnRhY3RSb3dzIiBzZWxlY3Q9IiRwZXJzb25Pck9yZy9jZGE6YXNzaWduZWRQZXJzb24vZXh0OmFzRW1wbG95bWVudC9leHQ6ZW1wbG95ZXJPcmdhbml6YXRpb24vY2RhOmFzT3JnYW5pemF0aW9uUGFydE9mL2NkYTp3aG9sZU9yZ2FuaXphdGlvbi9jZGE6dGVsZWNvbVskdXNlT3JnQ29udGFjdHMgYW5kICgkaXNQYXRpZW50ID0gJ3RydWUnIG9yICRzaG93UHJvdmlkZXJIb21lRGV0YWlscyA9ICd0cnVlJyBvciBub3QoY29udGFpbnMoQHVzZSwgJ0gnKSkpXSANCiAgICAgICAgICAgIHwgJHBlcnNvbk9yT3JnL2NkYTp0ZWxlY29tW25vdCgkdXNlT3JnQ29udGFjdHMpIGFuZCAoJGlzUGF0aWVudCA9ICd0cnVlJyBvciAkc2hvd1Byb3ZpZGVySG9tZURldGFpbHMgPSAndHJ1ZScgb3Igbm90KGNvbnRhaW5zKEB1c2UsICdIJykpKV0iLz4NCiAgICAgICAgICAgICAgDQogICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9ImNvdW50KCRjb250YWN0Um93cykgJmd0OyAwIj4gICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9IiRjb250YWN0Um93cyI+ICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InRyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0aCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3BhbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5kZXRhaWxzSGFsZlRhYmxlVGhTcGFuPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0ic3RhcnRzLXdpdGgoLi9AdmFsdWUsICd0ZWw6JykgIj5QaG9uZTwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0ic3RhcnRzLXdpdGgoLi9AdmFsdWUsICdmYXg6JykgIj5GQVg8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9InN0YXJ0cy13aXRoKC4vQHZhbHVlLCAnbWFpbHRvOicpICI+RW1haWw8L3hzbDp3aGVuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+Q29udGFjdCBkZXRhaWxzPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiANCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJ0ZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0ic2hvdy10ZWxlY29tIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InRlbGVjb20iIHNlbGVjdD0iLiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiANCiAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idHIiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmRldGFpbHNIYWxmVGFibGVUaDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJzcGFuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+ZGV0YWlsc0hhbGZUYWJsZVRoU3BhbjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb250YWN0IERldGFpbHMNCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90c3Bhbj4gLS0+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+ICA8IS0tIDwvdGg+IC0tPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idGQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgTm90IFByb3ZpZGVkDQogICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90ZD4gLS0+IA0KICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC90cj4gLS0+ICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPiAgICAgICAgICAgIA0KICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgIA0KICAgICAgICANCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgICAgICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJnZXRDb250YWN0RGV0YWlscyI+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0icGVyc29uT3JPcmciLz4NCiAgICAgICAgDQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0idGVsUm93cyIgc2VsZWN0PSIkcGVyc29uT3JPcmcvY2RhOnRlbGVjb21bc3RhcnRzLXdpdGgoQHZhbHVlLCAndGVsOicpIGFuZCAoJHNob3dQcm92aWRlckhvbWVEZXRhaWxzID0gJ3RydWUnIG9yIG5vdChjb250YWlucyhAdXNlLCAnSCcpKSldIi8+DQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZmF4Um93cyIgc2VsZWN0PSIkcGVyc29uT3JPcmcvY2RhOnRlbGVjb21bc3RhcnRzLXdpdGgoQHZhbHVlLCAnZmF4OicpIGFuZCAoJHNob3dQcm92aWRlckhvbWVEZXRhaWxzID0gJ3RydWUnIG9yIG5vdChjb250YWlucyhAdXNlLCAnSCcpKSldIi8+DQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZW1haWxSb3dzIiBzZWxlY3Q9IiRwZXJzb25Pck9yZy9jZGE6dGVsZWNvbVtzdGFydHMtd2l0aChAdmFsdWUsICdtYWlsdG86JykgYW5kICgkc2hvd1Byb3ZpZGVySG9tZURldGFpbHMgPSAndHJ1ZScgb3Igbm90KGNvbnRhaW5zKEB1c2UsICdIJykpKV0iLz4NCiAgICAgICAgDQogICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9ImNvdW50KCR0ZWxSb3dzKSArIGNvdW50KCRmYXhSb3dzKSArIGNvdW50KCRlbWFpbFJvd3MpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkbCI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5jb250YWN0ZGV0YWlsc2RsPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSJjb3VudCgkdGVsUm93cykgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmNvbnRhY3RkZXRhaWxzZHQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgUGhvbmU6DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImRkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+Y29udGFjdGRldGFpbHNkZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idWwiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+Y29udGFjdGRldGFpbHN1bDwveHNsOmF0dHJpYnV0ZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSIkdGVsUm93cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ibGkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJzaG93LXRlbGVjb20iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0idGVsZWNvbSIgc2VsZWN0PSIuIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvZGQ+IC0tPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iY291bnQoJGZheFJvd3MpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iZHQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5jb250YWN0ZGV0YWlsc2R0PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZhY3NpbWlsZSBtYWNoaW5lOg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmNvbnRhY3RkZXRhaWxzZGQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9InVsIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmNvbnRhY3RkZXRhaWxzdWw8L3hzbDphdHRyaWJ1dGU+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iJGZheFJvd3MiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ibGkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJzaG93LXRlbGVjb20iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0idGVsZWNvbSIgc2VsZWN0PSIuIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50PiA8IS0tIDwvZGQ+IC0tPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iY291bnQoJGVtYWlsUm93cykgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPmNvbnRhY3RkZXRhaWxzZHQ8L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRW1haWw6DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImRkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+Y29udGFjdGRldGFpbHNkZDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0idWwiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+Y29udGFjdGRldGFpbHN1bDwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9IiRlbWFpbFJvd3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImxpIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InNob3ctdGVsZWNvbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJ0ZWxlY29tIiBzZWxlY3Q9Ii4iLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC9kZD4gLS0+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L2RsPiAtLT4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOm90aGVyd2lzZT5Ob3QgUHJvdmlkZWQ8L3hzbDpvdGhlcndpc2U+DQogICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgDQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPCEtLT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09LS0+DQogICAgPCEtLSBbRU5EXSBTVFJVQ1RVUkUgVEVNUExBVEVTIC0tPg0KDQoNCg0KDQogICAgPCEtLSBVVElMSVRZIFRFTVBMQVRFUyAtLT4gICAgDQogICAgPCEtLT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09LS0+DQogICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJ1Y3VtVW5pdENvZGVUb1VuaXROYW1lIj4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJ1Y3VtVW5pdCIvPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9ImRlZmF1bHROYW1lIi8+DQogICAgICAgIA0KICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkdWN1bVVuaXQgPSAnYSciPg0KICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4geWVhcnM8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkdWN1bVVuaXQgPSAnbW8nIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+IG1vbnRoczwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiR1Y3VtVW5pdCA9ICd3ayciPg0KICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4gd2Vla3M8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkdWN1bVVuaXQgPSAnZCciPg0KICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4gZGF5czwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiR1Y3VtVW5pdCA9ICdoJyI+DQogICAgICAgICAgICAgICAgPHhzbDp0ZXh0PiBob3VyczwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiR1Y3VtVW5pdCA9ICdtaW4nIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+IG1pbnV0ZXM8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkdWN1bVVuaXQgPSAncyciPg0KICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4gc2Vjb25kczwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRkZWZhdWx0TmFtZSIvPg0KICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgPC94c2w6dGVtcGxhdGU+DQoNCiAgICA8eHNsOnRlbXBsYXRlIG5hbWU9InVjdW1Vbml0Q29kZVRvVW5pdE5hbWVTaG9ydEZvcm0iPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9InVjdW1Vbml0Ii8+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0iZGVmYXVsdE5hbWUiLz4NCiAgICAgICAgDQogICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiR1Y3VtVW5pdCA9ICdhJyI+DQogICAgICAgICAgICAgICAgPHhzbDp0ZXh0Pnk8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkdWN1bVVuaXQgPSAnbW8nIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+bTwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiR1Y3VtVW5pdCA9ICd3ayciPg0KICAgICAgICAgICAgICAgIDx4c2w6dGV4dD53PC94c2w6dGV4dD4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJHVjdW1Vbml0ID0gJ2QnIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+ZDwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiR1Y3VtVW5pdCA9ICdoJyI+DQogICAgICAgICAgICAgICAgPHhzbDp0ZXh0Pmg8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkdWN1bVVuaXQgPSAnbWluJyI+DQogICAgICAgICAgICAgICAgPHhzbDp0ZXh0Pm1pbjwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiR1Y3VtVW5pdCA9ICdzJyI+DQogICAgICAgICAgICAgICAgPHhzbDp0ZXh0PnM8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZGVmYXVsdE5hbWUiLz4NCiAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KICAgIA0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0ic2hvdy1uYW1lIj4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJuYW1lIi8+DQogICAgICAgIA0KICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0idHJpbSI+DQogICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ic3RyaW5nIj4NCiAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRuYW1lL2NkYTpmYW1pbHkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9IiRuYW1lL2NkYTpwcmVmaXgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0ic3RyaW5nLWxlbmd0aCguL3RleHQoKSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii4vdGV4dCgpIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4gPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9IiRuYW1lL2NkYTpnaXZlbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSJzdHJpbmctbGVuZ3RoKC4vdGV4dCgpKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLi90ZXh0KCkiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PiA8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+DQogICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9IiRuYW1lL2NkYTpmYW1pbHkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0ic3RyaW5nLWxlbmd0aCguL3RleHQoKSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii4vdGV4dCgpIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4gPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSIkbmFtZS9jZGE6c3VmZml4Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9InN0cmluZy1sZW5ndGgoLi90ZXh0KCkpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIuL3RleHQoKSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+IDwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJG5hbWUiLz4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgIDwveHNsOndpdGgtcGFyYW0+DQogICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICANCiAgICA8eHNsOnRlbXBsYXRlIG5hbWU9InNob3ctcGF0aWVudC1uYW1lIj4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJuYW1lIi8+DQogICAgICAgIA0KICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0idHJpbSI+DQogICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ic3RyaW5nIj4NCiAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRuYW1lL2NkYTpmYW1pbHkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9IiRuYW1lL2NkYTpwcmVmaXgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0ic3RyaW5nLWxlbmd0aCguL3RleHQoKSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii4vdGV4dCgpIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4gPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9IiRuYW1lL2NkYTpnaXZlbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSJzdHJpbmctbGVuZ3RoKC4vdGV4dCgpKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLi90ZXh0KCkiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PiA8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSIkbmFtZS9jZGE6ZmFtaWx5Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9InN0cmluZy1sZW5ndGgoLi90ZXh0KCkpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0idG9VcHBlckNhc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJkYXRhIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii4vdGV4dCgpIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+IDwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJzdHJpbmctbGVuZ3RoKC4vQG51bGxGbGF2b3IpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoRmFtaWx5IG5hbWUgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InNob3ctbnVsbC1mbGF2b3ItdmFsdWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJudWxsRmxhdm9yVmFsdWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLi9AbnVsbEZsYXZvciIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9IiRuYW1lL2NkYTpzdWZmaXgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0ic3RyaW5nLWxlbmd0aCguL3RleHQoKSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii4vdGV4dCgpIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4gPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkbmFtZSIvPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgPC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgIA0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0iZ2V0QWRkcmVzcyI+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0iYWRkcmVzcyIvPg0KICAgICAgICA8eHNsOmlmIHRlc3Q9Im5vdChjb250YWlucygkYWRkcmVzcy9AdXNlLCAnSCcpKSBvciAkc2hvd1Byb3ZpZGVySG9tZURldGFpbHMgPSAndHJ1ZSciPg0KICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRhZGRyZXNzL0BudWxsRmxhdm9yPSdOQSciPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iZHQiPjx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj5hZGRyZXNzZHQ8L3hzbDphdHRyaWJ1dGU+Tm8gRml4ZWQgQWRkcmVzczwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImR0Ij48eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+YWRkcmVzc2R0PC94c2w6YXR0cmlidXRlPjx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXRBZGRyZXNzVXNlRGVzY3JpcHRvciI+PHhzbDp3aXRoLXBhcmFtIG5hbWU9ImNvZGUiIHNlbGVjdD0iLi9AdXNlIi8+PC94c2w6Y2FsbC10ZW1wbGF0ZT48eHNsOnRleHQ+OjwveHNsOnRleHQ+PHhzbDplbGVtZW50IG5hbWU9ImJyIi8+PC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImRkIj48eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+YWRkcmVzc2RkPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0ic2hvdy1hZGRyZXNzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iYWRkcmVzcyIgc2VsZWN0PSIuIi8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KDQogICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+DQogICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgPC94c2w6aWY+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJzaG93LW51bGwtZmxhdm9yLXZhbHVlIj4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJudWxsRmxhdm9yVmFsdWUiLz4NCiAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJG51bGxGbGF2b3JWYWx1ZT0nTkknIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+bm8gaW5mb3JtYXRpb248L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkbnVsbEZsYXZvclZhbHVlPSdJTlYnIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+aW52YWxpZDwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRudWxsRmxhdm9yVmFsdWU9J0RFUiciPg0KICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5kZXJpdmVkPC94c2w6dGV4dD4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJG51bGxGbGF2b3JWYWx1ZT0nTklORiciPg0KICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5uZWdhdGl2ZSBpbmZpbml0eTwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRudWxsRmxhdm9yVmFsdWU9J1BJTkYnIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+cG9zaXRpdmUgaW5maW5pdHk8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkbnVsbEZsYXZvclZhbHVlPSdVTkMnIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+dW4tZW5jb2RlZDwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRudWxsRmxhdm9yVmFsdWU9J01TSyciPg0KICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5tYXNrZWQ8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkbnVsbEZsYXZvclZhbHVlPSdOQSciPg0KICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5ub3QgYXBwbGljYWJsZTwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRudWxsRmxhdm9yVmFsdWU9J1VOSyciPg0KICAgICAgICAgICAgICAgIDx4c2w6dGV4dD51bmtub3duPC94c2w6dGV4dD4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJG51bGxGbGF2b3JWYWx1ZT0nQVNLVSciPg0KICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5hc2tlZCBidXQgdW5rbm93bjwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRudWxsRmxhdm9yVmFsdWU9J05BViciPg0KICAgICAgICAgICAgICAgIDx4c2w6dGV4dD50ZW1wb3JhcmlseSB1bmF2YWlsYWJsZTwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRudWxsRmxhdm9yVmFsdWU9J05BU0snIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+bm90IGFza2VkPC94c2w6dGV4dD4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJG51bGxGbGF2b3JWYWx1ZT0nUVMnIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+c3VmZmljaWVudCBxdWFudGl0eTwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRudWxsRmxhdm9yVmFsdWU9J1RSQyciPg0KICAgICAgICAgICAgICAgIDx4c2w6dGV4dD50cmFjZTwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRudWxsRmxhdm9yVmFsdWU9J05QJyI+DQogICAgICAgICAgICAgICAgPHhzbDp0ZXh0Pm5vdCBwcmVzZW50PC94c2w6dGV4dD4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgIDwveHNsOmNob29zZT4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgICANCiAgICA8eHNsOnRlbXBsYXRlIG5hbWU9InNob3ctYWRkcmVzcyI+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0iYWRkcmVzcyIvPg0KICAgICAgICA8eHNsOmlmIHRlc3Q9IiRhZGRyZXNzIj4NCiAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJzdHJpbmctbGVuZ3RoKCRhZGRyZXNzL0BudWxsRmxhdm9yKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0ic2hvdy1udWxsLWZsYXZvci12YWx1ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ibnVsbEZsYXZvclZhbHVlIiBzZWxlY3Q9IiRhZGRyZXNzL0BudWxsRmxhdm9yIj48L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iJGFkZHJlc3MvY2RhOnVuaXRJRCBhbmQgc3RyaW5nLWxlbmd0aCgkYWRkcmVzcy9jZGE6dW5pdElEKT4wIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjb25jYXQoJ1VuaXQgTnVtYmVyOiAnLCAkYWRkcmVzcy9jZGE6dW5pdElEKSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImJyIi8+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9IiRhZGRyZXNzL2NkYTp1bml0VHlwZSBhbmQgc3RyaW5nLWxlbmd0aCgkYWRkcmVzcy9jZGE6dW5pdFR5cGUpPjAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNvbmNhdCgnVW5pdCBUeXBlOiAnLCAkYWRkcmVzcy9jZGE6dW5pdFR5cGUpIi8+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iYnIiLz4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iJGFkZHJlc3MvY2RhOmRlbGl2ZXJ5QWRkcmVzc0xpbmUgYW5kIHN0cmluZy1sZW5ndGgoJGFkZHJlc3MvY2RhOmRlbGl2ZXJ5QWRkcmVzc0xpbmUpPjAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9IiRhZGRyZXNzL2NkYTpkZWxpdmVyeUFkZHJlc3NMaW5lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9InN0cmluZy1sZW5ndGgoLi90ZXh0KCkpPjAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIuL3RleHQoKT0nQ2FyZSBQTyciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5Qb3N0YWwgRGVsaXZlcnkgVHlwZTogQ2FyZS1vZiBQb3N0IE9mZmljZSAvIFBvc3RlIFJlc3RhbnRlPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iYnIiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iLi90ZXh0KCk9J0NNQSciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5Qb3N0YWwgRGVsaXZlcnkgVHlwZTogQ29tbXVuaXR5IE1haWwgQWdlbnQ8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJiciIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIuL3RleHQoKT0nQ01CJyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PlBvc3RhbCBEZWxpdmVyeSBUeXBlOiBDb21tdW5pdHkgTWFpbCBCYWc8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJiciIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIuL3RleHQoKT0nR1BPJyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PlBvc3RhbCBEZWxpdmVyeSBUeXBlOiBCb3ggR2VuZXJhbCBQb3N0IE9mZmljZSBCb3g8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJiciIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIuL3RleHQoKT0nTG9ja2VkIEJhZyciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5Qb3N0YWwgRGVsaXZlcnkgVHlwZTogTG9ja2VkIE1haWwgQmFnIFNlcnZpY2U8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJiciIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIuL3RleHQoKT0nUE8gQm94JyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PlBvc3RhbCBEZWxpdmVyeSBUeXBlOiBQb3N0IE9mZmljZSBCb3g8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJiciIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIuL3RleHQoKT0nTVMnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+UG9zdGFsIERlbGl2ZXJ5IFR5cGU6IE1haWwgU2VydmljZTwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImJyIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Ii4vdGV4dCgpPSdQcml2YXRlIEJhZyciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5Qb3N0YWwgRGVsaXZlcnkgVHlwZTogUHJpdmF0ZSBNYWlsIEJhZyBTZXJ2aWNlPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iYnIiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iLi90ZXh0KCk9J1JTRCciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5Qb3N0YWwgRGVsaXZlcnkgVHlwZTogUm9hZHNpZGUgRGVsaXZlcnk8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJiciIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIuL3RleHQoKT0nUk1CJyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PlBvc3RhbCBEZWxpdmVyeSBUeXBlOiBSb2Fkc2lkZSBNYWlsIEJveC9CYWc8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJiciIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIuL3RleHQoKT0nUk1TJyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PlBvc3RhbCBEZWxpdmVyeSBUeXBlOiBSb2Fkc2lkZSBNYWlsIFNlcnZpY2U8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJiciIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjb25jYXQoJ1Bvc3RhbCBEZWxpdmVyeSBOdW1iZXI6ICcsIC4vdGV4dCgpKSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJiciIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9IiRhZGRyZXNzL2NkYTphZGRpdGlvbmFsTG9jYXRvciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iJGFkZHJlc3MvY2RhOmFkZGl0aW9uYWxMb2NhdG9yW3N0cmluZy1sZW5ndGgodGV4dCgpKSAmZ3Q7IDBdIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9InBvc2l0aW9uKCkgJmd0OyAxIj48eHNsOnRleHQ+LCA8L3hzbDp0ZXh0PjwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIuIi8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iY291bnQoJGFkZHJlc3MvY2RhOnN0cmVldEFkZHJlc3NMaW5lW3N0cmluZy1sZW5ndGgodGV4dCgpKSAmZ3Q7IDBdKSAmZ3Q7IDAgb3INCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoJGFkZHJlc3MvY2RhOmhvdXNlTnVtYmVyIGFuZCBzdHJpbmctbGVuZ3RoKCRhZGRyZXNzL2NkYTpob3VzZU51bWJlcikgJmd0OyAwKSBvcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICgkYWRkcmVzcy9jZGE6c3RyZWV0TmFtZSBhbmQgc3RyaW5nLWxlbmd0aCgkYWRkcmVzcy9jZGE6c3RyZWV0TmFtZSkgJmd0OyAwKSBvcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICgkYWRkcmVzcy9jZGE6c3RyZWV0TmFtZVR5cGUgYW5kIHN0cmluZy1sZW5ndGgoJGFkZHJlc3MvY2RhOnN0cmVldE5hbWVUeXBlKSAmZ3Q7IDApIG9yDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKCRhZGRyZXNzL2NkYTpkaXJlY3Rpb24gYW5kIHN0cmluZy1sZW5ndGgoJGFkZHJlc3MvY2RhOmRpcmVjdGlvbikgJmd0OyAwKSBvcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICgkYWRkcmVzcy9jZGE6Y2l0eSBhbmQgc3RyaW5nLWxlbmd0aCgkYWRkcmVzcy9jZGE6Y2l0eSkgJmd0OyAwKSBvcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICgkYWRkcmVzcy9jZGE6c3RhdGUgYW5kIHN0cmluZy1sZW5ndGgoJGFkZHJlc3MvY2RhOnN0YXRlKSAmZ3Q7IDApIG9yDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKCRhZGRyZXNzL2NkYTpwb3N0YWxDb2RlIGFuZCBzdHJpbmctbGVuZ3RoKCRhZGRyZXNzL2NkYTpwb3N0YWxDb2RlKSAmZ3Q7IDApIG9yDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKCRhZGRyZXNzL2NkYTpjb3VudHJ5IGFuZCBzdHJpbmctbGVuZ3RoKCRhZGRyZXNzL2NkYTpjb3VudHJ5KSAmZ3Q7IDApIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+LCA8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9IiRhZGRyZXNzL2NkYTpzdHJlZXRBZGRyZXNzTGluZSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iJGFkZHJlc3MvY2RhOnN0cmVldEFkZHJlc3NMaW5lW3N0cmluZy1sZW5ndGgodGV4dCgpKSAmZ3Q7IDBdIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9InBvc2l0aW9uKCkgJmd0OyAxIj48eHNsOnRleHQ+LCA8L3hzbDp0ZXh0PjwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIuIi8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iKCRhZGRyZXNzL2NkYTpob3VzZU51bWJlciBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRhZGRyZXNzL2NkYTpob3VzZU51bWJlcikgJmd0OyAwKSBvcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICgkYWRkcmVzcy9jZGE6c3RyZWV0TmFtZSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRhZGRyZXNzL2NkYTpzdHJlZXROYW1lKSAmZ3Q7IDApIG9yDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKCRhZGRyZXNzL2NkYTpzdHJlZXROYW1lVHlwZSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRhZGRyZXNzL2NkYTpzdHJlZXROYW1lVHlwZSkgJmd0OyAwKSBvcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICgkYWRkcmVzcy9jZGE6ZGlyZWN0aW9uIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoJGFkZHJlc3MvY2RhOmRpcmVjdGlvbikgJmd0OyAwKSBvcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICgkYWRkcmVzcy9jZGE6Y2l0eSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRhZGRyZXNzL2NkYTpjaXR5KSAmZ3Q7IDApIG9yDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKCRhZGRyZXNzL2NkYTpzdGF0ZSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRhZGRyZXNzL2NkYTpzdGF0ZSkgJmd0OyAwKSBvcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICgkYWRkcmVzcy9jZGE6cG9zdGFsQ29kZSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRhZGRyZXNzL2NkYTpwb3N0YWxDb2RlKSAmZ3Q7IDApIG9yDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKCRhZGRyZXNzL2NkYTpjb3VudHJ5IGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoJGFkZHJlc3MvY2RhOmNvdW50cnkpICZndDsgMCkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4sIDwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iJGFkZHJlc3MvY2RhOmhvdXNlTnVtYmVyIGFuZCBzdHJpbmctbGVuZ3RoKCRhZGRyZXNzL2NkYTpob3VzZU51bWJlcikgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkYWRkcmVzcy9jZGE6aG91c2VOdW1iZXIiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkYWRkcmVzcy9jZGE6c3RyZWV0TmFtZSBhbmQgc3RyaW5nLWxlbmd0aCgkYWRkcmVzcy9jZGE6c3RyZWV0TmFtZSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PiA8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iKCRhZGRyZXNzL2NkYTpkaXJlY3Rpb24gYW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRhZGRyZXNzL2NkYTpkaXJlY3Rpb24pICZndDsgMCkgb3INCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgkYWRkcmVzcy9jZGE6Y2l0eSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoJGFkZHJlc3MvY2RhOmNpdHkpICZndDsgMCkgb3INCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgkYWRkcmVzcy9jZGE6c3RhdGUgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRhZGRyZXNzL2NkYTpzdGF0ZSkgJmd0OyAwKSBvcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCRhZGRyZXNzL2NkYTpwb3N0YWxDb2RlIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgkYWRkcmVzcy9jZGE6cG9zdGFsQ29kZSkgJmd0OyAwKSBvcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCRhZGRyZXNzL2NkYTpjb3VudHJ5IGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgkYWRkcmVzcy9jZGE6Y291bnRyeSkgJmd0OyAwKSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+LCA8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9IiRhZGRyZXNzL2NkYTpzdHJlZXROYW1lIGFuZCBzdHJpbmctbGVuZ3RoKCRhZGRyZXNzL2NkYTpzdHJlZXROYW1lKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRhZGRyZXNzL2NkYTpzdHJlZXROYW1lIi8+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iKCRhZGRyZXNzL2NkYTpzdHJlZXROYW1lVHlwZSBhbmQgc3RyaW5nLWxlbmd0aCgkYWRkcmVzcy9jZGE6c3RyZWV0TmFtZVR5cGUpICZndDsgMCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgKCRhZGRyZXNzL2NkYTpkaXJlY3Rpb24gYW5kIHN0cmluZy1sZW5ndGgoJGFkZHJlc3MvY2RhOmRpcmVjdGlvbikgJmd0OyAwKSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4gPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9IigkYWRkcmVzcy9jZGE6ZGlyZWN0aW9uIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgkYWRkcmVzcy9jZGE6ZGlyZWN0aW9uKSAmZ3Q7IDApIG9yDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoJGFkZHJlc3MvY2RhOmNpdHkgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRhZGRyZXNzL2NkYTpjaXR5KSAmZ3Q7IDApIG9yDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoJGFkZHJlc3MvY2RhOnN0YXRlIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgkYWRkcmVzcy9jZGE6c3RhdGUpICZndDsgMCkgb3INCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgkYWRkcmVzcy9jZGE6cG9zdGFsQ29kZSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoJGFkZHJlc3MvY2RhOnBvc3RhbENvZGUpICZndDsgMCkgb3INCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgkYWRkcmVzcy9jZGE6Y291bnRyeSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoJGFkZHJlc3MvY2RhOmNvdW50cnkpICZndDsgMCkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PiwgPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIkYWRkcmVzcy9jZGE6c3RyZWV0TmFtZVR5cGUgYW5kIHN0cmluZy1sZW5ndGgoJGFkZHJlc3MvY2RhOnN0cmVldE5hbWVUeXBlKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkYWRkcmVzcy9jZGE6c3RyZWV0TmFtZVR5cGUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRhZGRyZXNzL2NkYTpkaXJlY3Rpb24gYW5kIHN0cmluZy1sZW5ndGgoJGFkZHJlc3MvY2RhOmRpcmVjdGlvbikgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4gPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9IigkYWRkcmVzcy9jZGE6Y2l0eSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRhZGRyZXNzL2NkYTpjaXR5KSAmZ3Q7IDApIG9yDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCRhZGRyZXNzL2NkYTpzdGF0ZSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRhZGRyZXNzL2NkYTpzdGF0ZSkgJmd0OyAwKSBvcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgkYWRkcmVzcy9jZGE6cG9zdGFsQ29kZSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRhZGRyZXNzL2NkYTpwb3N0YWxDb2RlKSAmZ3Q7IDApIG9yDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCRhZGRyZXNzL2NkYTpjb3VudHJ5IGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoJGFkZHJlc3MvY2RhOmNvdW50cnkpICZndDsgMCkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4sIDwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIkYWRkcmVzcy9jZGE6ZGlyZWN0aW9uIGFuZCBzdHJpbmctbGVuZ3RoKCRhZGRyZXNzL2NkYTpkaXJlY3Rpb24pICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRhZGRyZXNzL2NkYTpkaXJlY3Rpb24iLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9IigkYWRkcmVzcy9jZGE6Y2l0eSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgkYWRkcmVzcy9jZGE6Y2l0eSkgJmd0OyAwKSBvcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoJGFkZHJlc3MvY2RhOnN0YXRlIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRhZGRyZXNzL2NkYTpzdGF0ZSkgJmd0OyAwKSBvcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoJGFkZHJlc3MvY2RhOnBvc3RhbENvZGUgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoJGFkZHJlc3MvY2RhOnBvc3RhbENvZGUpICZndDsgMCkgb3INCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCRhZGRyZXNzL2NkYTpjb3VudHJ5IGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRhZGRyZXNzL2NkYTpjb3VudHJ5KSAmZ3Q7IDApIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PiwgPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSJzdHJpbmctbGVuZ3RoKCRhZGRyZXNzL2NkYTpjaXR5KT4wIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkYWRkcmVzcy9jZGE6Y2l0eSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIoJGFkZHJlc3MvY2RhOnN0YXRlIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoJGFkZHJlc3MvY2RhOnN0YXRlKSAmZ3Q7IDApIG9yDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKCRhZGRyZXNzL2NkYTpwb3N0YWxDb2RlIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoJGFkZHJlc3MvY2RhOnBvc3RhbENvZGUpICZndDsgMCkgb3INCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoJGFkZHJlc3MvY2RhOmNvdW50cnkgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgkYWRkcmVzcy9jZGE6Y291bnRyeSkgJmd0OyAwKSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PiwgPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSJzdHJpbmctbGVuZ3RoKCRhZGRyZXNzL2NkYTpzdGF0ZSk+MCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGFkZHJlc3MvY2RhOnN0YXRlIi8+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9IigkYWRkcmVzcy9jZGE6cG9zdGFsQ29kZSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRhZGRyZXNzL2NkYTpwb3N0YWxDb2RlKSAmZ3Q7IDApIG9yDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKCRhZGRyZXNzL2NkYTpjb3VudHJ5IGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoJGFkZHJlc3MvY2RhOmNvdW50cnkpICZndDsgMCkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4sIDwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0ic3RyaW5nLWxlbmd0aCgkYWRkcmVzcy9jZGE6cG9zdGFsQ29kZSk+MCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGFkZHJlc3MvY2RhOnBvc3RhbENvZGUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iKCRhZGRyZXNzL2NkYTpjb3VudHJ5IGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoJGFkZHJlc3MvY2RhOmNvdW50cnkpICZndDsgMCkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4sIDwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0ic3RyaW5nLWxlbmd0aCgkYWRkcmVzcy9jZGE6Y291bnRyeSk+MCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGFkZHJlc3MvY2RhOmNvdW50cnkiLz4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICA8L3hzbDppZj4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgICANCiAgICA8eHNsOnRlbXBsYXRlIG5hbWU9InNob3ctdGVsZWNvbSI+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0idGVsZWNvbSIvPg0KICAgICAgICANCiAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJHRlbGVjb20gYW5kIHN0cmluZy1sZW5ndGgoJHRlbGVjb20vQHZhbHVlKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iY29udGFpbnMoJHRlbGVjb20vQHZhbHVlLCAnOicpIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0idmFsdWUiIHNlbGVjdD0ic3Vic3RyaW5nLWFmdGVyKCR0ZWxlY29tL0B2YWx1ZSwgJzonKSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSIkdmFsdWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkdmFsdWUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkdGVsZWNvbS9AdmFsdWUiLz4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9InN0cmluZy1sZW5ndGgoLi9AdXNlKSAmZ3Q7IDAiPjx4c2w6dGV4dD4gPC94c2w6dGV4dD4oPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImdldFRlbGVjb21Vc2VEZXNjcmlwdG9ycyI+PHhzbDp3aXRoLXBhcmFtIG5hbWU9ImNvZGVzIiBzZWxlY3Q9Ii4vQHVzZSIvPjwveHNsOmNhbGwtdGVtcGxhdGU+KTwveHNsOmlmPg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJzdHJpbmctbGVuZ3RoKCR0ZWxlY29tL0BudWxsRmxhdm9yKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJzaG93LW51bGwtZmxhdm9yLXZhbHVlIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9Im51bGxGbGF2b3JWYWx1ZSIgc2VsZWN0PSIkdGVsZWNvbS9AbnVsbEZsYXZvciI+PC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgPC94c2w6Y2hvb3NlPiAgICAgICAgICAgICAgICANCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJnZXRUZWxlY29tVXNlRGVzY3JpcHRvcnMiPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9ImNvZGVzIiAvPg0KICAgICAgICANCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJuZXdsaXN0IiBzZWxlY3Q9ImNvbmNhdChub3JtYWxpemUtc3BhY2UoJGNvZGVzKSwgJyAnKSIgLz4gDQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iZmlyc3QiIHNlbGVjdD0ic3Vic3RyaW5nLWJlZm9yZSgkbmV3bGlzdCwgJyAnKSIgLz4gDQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0icmVtYWluaW5nIiBzZWxlY3Q9InN1YnN0cmluZy1hZnRlcigkbmV3bGlzdCwgJyAnKSIgLz4gDQogICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXRUZWxlY29tVXNlRGVzY3JpcHRvciI+DQogICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iY29kZSI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRmaXJzdCIvPjwveHNsOndpdGgtcGFyYW0+DQogICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+IA0KICAgICAgICA8eHNsOmlmIHRlc3Q9IiRyZW1haW5pbmciPg0KICAgICAgICAgICAgPHhzbDp0ZXh0PiwgPC94c2w6dGV4dD4NCiAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXRUZWxlY29tVXNlRGVzY3JpcHRvcnMiPg0KICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJjb2RlcyIgc2VsZWN0PSIkcmVtYWluaW5nIiAvPiANCiAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgIDwveHNsOmlmPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KICAgIA0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0iZ2V0VGVsZWNvbVVzZURlc2NyaXB0b3IiPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9ImNvZGUiLz4NCiAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJGNvZGU9J0gnIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+SG9tZTwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRjb2RlPSdIUCciPg0KICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5QcmltYXJ5IEhvbWU8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkY29kZT0nSFYnIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+VmFjYXRpb24gSG9tZTwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRjb2RlPSdXUCciPg0KICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5Xb3JrcGxhY2U8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkY29kZT0nQVMnIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+QW5zd2VyaW5nIFNlcnZpY2U8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkY29kZT0nRUMnIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+RW1lcmdlbmN5IENvbnRhY3Q8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkY29kZT0nTUMnIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+TW9iaWxlIENvbnRhY3Q8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkY29kZT0nUEcnIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+UGFnZXI8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5Vbmtub3duIFVzYWdlPC94c2w6dGV4dD4NCiAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJnZXRBZGRyZXNzVXNlRGVzY3JpcHRvciI+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0iY29kZSIvPg0KICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkY29kZT0nV1AnIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+V29yayBQbGFjZTwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRjb2RlPSdQU1QnIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+UG9zdGFsIEFkZHJlc3M8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkY29kZT0nVE1QJyI+DQogICAgICAgICAgICAgICAgPHhzbDp0ZXh0PlRlbXBvcmFyeSBBZGRyZXNzPC94c2w6dGV4dD4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJGNvZGU9J0gnIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+SG9tZSBBZGRyZXNzPC94c2w6dGV4dD4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+QWRkcmVzczwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgIDwveHNsOmNob29zZT4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCg0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0ic2hvdy1kYXRlIj4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJkYXRldGltZSIvPiAgICAgICANCiAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InRyaW0iPg0KICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InN0cmluZyI+ICAgIA0KICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0ibm90KCRkYXRldGltZSkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImZvcm1hdERhdGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJkYXRlIiBzZWxlY3Q9IkB2YWx1ZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4gPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZm9ybWF0RGF0ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImRhdGUiIHNlbGVjdD0iJGRhdGV0aW1lL0B2YWx1ZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4gPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgIDwveHNsOndpdGgtcGFyYW0+DQogICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJzaG93LXRpbWUiPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9ImRhdGV0aW1lIi8+DQogICAgICAgIA0KICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0idHJpbSI+DQogICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ic3RyaW5nIj4gICAgDQogICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJub3QoJGRhdGV0aW1lKSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZm9ybWF0RGF0ZVRpbWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJkYXRlIiBzZWxlY3Q9IkB2YWx1ZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4gPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZm9ybWF0RGF0ZVRpbWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImRhdGUiIHNlbGVjdD0iJGRhdGV0aW1lL0B2YWx1ZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4gPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgIDwveHNsOndpdGgtcGFyYW0+DQogICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJmb3JtYXREYXRlVGltZSI+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0iZGF0ZSIvPg0KICAgICAgICANCiAgICAgICAgPCEtLSBkYXkgLS0+DQogICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9InN1YnN0cmluZyAoJGRhdGUsIDcsIDEpPScwJyI+DQogICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9InN1YnN0cmluZyAoJGRhdGUsIDgsIDEpIi8+PHhzbDp0ZXh0PiA8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJzdHJpbmctbGVuZ3RoKHN1YnN0cmluZyAoJGRhdGUsIDcsIDEpKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJzdWJzdHJpbmcgKCRkYXRlLCA3LCAyKSIvPjx4c2w6dGV4dD4gPC94c2w6dGV4dD4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOm90aGVyd2lzZS8+DQogICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgPCEtLSBtb250aCAtLT4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJtb250aCIgc2VsZWN0PSJzdWJzdHJpbmcgKCRkYXRlLCA1LCAyKSIvPg0KICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkbW9udGg9JzAxJyI+DQogICAgICAgICAgICAgICAgPHhzbDp0ZXh0PkphbjwveHNsOnRleHQ+PHhzbDp0ZXh0PiA8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkbW9udGg9JzAyJyI+DQogICAgICAgICAgICAgICAgPHhzbDp0ZXh0PkZlYjwveHNsOnRleHQ+PHhzbDp0ZXh0PiA8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkbW9udGg9JzAzJyI+DQogICAgICAgICAgICAgICAgPHhzbDp0ZXh0Pk1hcjwveHNsOnRleHQ+PHhzbDp0ZXh0PiA8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkbW9udGg9JzA0JyI+DQogICAgICAgICAgICAgICAgPHhzbDp0ZXh0PkFwcjwveHNsOnRleHQ+PHhzbDp0ZXh0PiA8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkbW9udGg9JzA1JyI+DQogICAgICAgICAgICAgICAgPHhzbDp0ZXh0Pk1heTwveHNsOnRleHQ+PHhzbDp0ZXh0PiA8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkbW9udGg9JzA2JyI+DQogICAgICAgICAgICAgICAgPHhzbDp0ZXh0Pkp1bjwveHNsOnRleHQ+PHhzbDp0ZXh0PiA8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkbW9udGg9JzA3JyI+DQogICAgICAgICAgICAgICAgPHhzbDp0ZXh0Pkp1bDwveHNsOnRleHQ+PHhzbDp0ZXh0PiA8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkbW9udGg9JzA4JyI+DQogICAgICAgICAgICAgICAgPHhzbDp0ZXh0PkF1ZzwveHNsOnRleHQ+PHhzbDp0ZXh0PiA8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkbW9udGg9JzA5JyI+DQogICAgICAgICAgICAgICAgPHhzbDp0ZXh0PlNlcDwveHNsOnRleHQ+PHhzbDp0ZXh0PiA8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkbW9udGg9JzEwJyI+DQogICAgICAgICAgICAgICAgPHhzbDp0ZXh0Pk9jdDwveHNsOnRleHQ+PHhzbDp0ZXh0PiA8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkbW9udGg9JzExJyI+DQogICAgICAgICAgICAgICAgPHhzbDp0ZXh0Pk5vdjwveHNsOnRleHQ+PHhzbDp0ZXh0PiA8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkbW9udGg9JzEyJyI+DQogICAgICAgICAgICAgICAgPHhzbDp0ZXh0PkRlYzwveHNsOnRleHQ+PHhzbDp0ZXh0PiA8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICA8IS0tIHllYXIgLS0+DQogICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJzdWJzdHJpbmcgKCRkYXRlLCAxLCA0KSIvPg0KICAgICAgICA8IS0tIHRpbWUgLS0+DQogICAgICAgIDx4c2w6aWYgdGVzdD0ic3RyaW5nLWxlbmd0aCgkZGF0ZSkgPiA4Ij4NCiAgICAgICAgICAgIDx4c2w6dGV4dD4gPC94c2w6dGV4dD4NCiAgICAgICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0idGltZSI+DQogICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9InN1YnN0cmluZygkZGF0ZSw5LDYpIi8+DQogICAgICAgICAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICAgICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iaGgiPg0KICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJzdWJzdHJpbmcoJHRpbWUsMSwyKSIvPg0KICAgICAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9Im1tIj4NCiAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0ic3Vic3RyaW5nKCR0aW1lLDMsMikiLz4NCiAgICAgICAgICAgIDwveHNsOnZhcmlhYmxlPg0KICAgICAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJzcyI+DQogICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9InN1YnN0cmluZygkdGltZSw1LDIpIi8+DQogICAgICAgICAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0ic3RyaW5nLWxlbmd0aCgkaGgpJmd0OzEiPg0KICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkaGgiLz4NCiAgICAgICAgICAgICAgICA8eHNsOmlmDQogICAgICAgICAgICAgICAgICAgIHRlc3Q9InN0cmluZy1sZW5ndGgoJG1tKSZndDsxIGFuZCBub3QoY29udGFpbnMoJG1tLCctJykpIGFuZCBub3QgKGNvbnRhaW5zKCRtbSwnKycpKSI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD46PC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRtbSIvPg0KICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgIDwveHNsOmlmPg0KICAgICAgICA8IS0tIHRpbWUgem9uZSAtLT4NCiAgICAgICAgPHhzbDppZiB0ZXN0PSIoY29udGFpbnMoJGRhdGUsJysnKSBhbmQgc3RyaW5nLWxlbmd0aChzdWJzdHJpbmctYWZ0ZXIoJGRhdGUsJysnKSkgPSA0KSBvcg0KICAgICAgICAgICAgICAgICAgICAgIChjb250YWlucygkZGF0ZSwnLScpIGFuZCBzdHJpbmctbGVuZ3RoKHN1YnN0cmluZy1hZnRlcigkZGF0ZSwnLScpKSA9IDQpIj4NCiAgICAgICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0idHpvbiI+DQogICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJjb250YWlucygkZGF0ZSwnKycpIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4rPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJzdWJzdHJpbmctYWZ0ZXIoJGRhdGUsICcrJykiLz4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9ImNvbnRhaW5zKCRkYXRlLCctJykiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0Pi08L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9InN1YnN0cmluZy1hZnRlcigkZGF0ZSwgJy0nKSIvPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgIDwveHNsOnZhcmlhYmxlPg0KICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSJzdHJpbmctbGVuZ3RoKCR0em9uKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkdHpvbiIvPg0KICAgICAgICAgICAgPC94c2w6aWY+DQogICAgICAgIDwveHNsOmlmPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJmb3JtYXREYXRlIj4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJkYXRlIi8+DQogICAgICAgIA0KICAgICAgICA8IS0tIGRheSAtLT4NCiAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0ic3Vic3RyaW5nICgkZGF0ZSwgNywgMSk9JzAnIj4NCiAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0ic3Vic3RyaW5nICgkZGF0ZSwgOCwgMSkiLz48eHNsOnRleHQ+IDwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9InN0cmluZy1sZW5ndGgoc3Vic3RyaW5nICgkZGF0ZSwgNywgMSkpICZndDsgMCI+DQogICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9InN1YnN0cmluZyAoJGRhdGUsIDcsIDIpIi8+PHhzbDp0ZXh0PiA8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlLz4NCiAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICA8IS0tIG1vbnRoIC0tPg0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9Im1vbnRoIiBzZWxlY3Q9InN1YnN0cmluZyAoJGRhdGUsIDUsIDIpIi8+DQogICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRtb250aD0nMDEnIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+SmFuPC94c2w6dGV4dD48eHNsOnRleHQ+IDwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRtb250aD0nMDInIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+RmViPC94c2w6dGV4dD48eHNsOnRleHQ+IDwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRtb250aD0nMDMnIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+TWFyPC94c2w6dGV4dD48eHNsOnRleHQ+IDwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRtb250aD0nMDQnIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+QXByPC94c2w6dGV4dD48eHNsOnRleHQ+IDwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRtb250aD0nMDUnIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+TWF5PC94c2w6dGV4dD48eHNsOnRleHQ+IDwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRtb250aD0nMDYnIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+SnVuPC94c2w6dGV4dD48eHNsOnRleHQ+IDwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRtb250aD0nMDcnIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+SnVsPC94c2w6dGV4dD48eHNsOnRleHQ+IDwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRtb250aD0nMDgnIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+QXVnPC94c2w6dGV4dD48eHNsOnRleHQ+IDwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRtb250aD0nMDknIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+U2VwPC94c2w6dGV4dD48eHNsOnRleHQ+IDwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRtb250aD0nMTAnIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+T2N0PC94c2w6dGV4dD48eHNsOnRleHQ+IDwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRtb250aD0nMTEnIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+Tm92PC94c2w6dGV4dD48eHNsOnRleHQ+IDwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRtb250aD0nMTInIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+RGVjPC94c2w6dGV4dD48eHNsOnRleHQ+IDwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgIDwhLS0geWVhciAtLT4NCiAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9InN1YnN0cmluZyAoJGRhdGUsIDEsIDQpIi8+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJnZXRQcm92aWRlckluZGl2aWR1YWxJZGVudGlmaWVyIj4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJlbnRpdHlJZGVudGlmaWVyIi8+DQogICAgICAgIDx4c2w6aWYgdGVzdD0iJHByb3ZpZGVySW5kaXZpZHVhbElkZW50aWZpZXJEaXNwbGF5PSd0cnVlJyBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAkZW50aXR5SWRlbnRpZmllciBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAkZW50aXR5SWRlbnRpZmllci9AY2xhc3NDb2RlIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICRlbnRpdHlJZGVudGlmaWVyL0BjbGFzc0NvZGU9J0lERU5UJyBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAkZW50aXR5SWRlbnRpZmllci9leHQ6aWQgYW5kDQogICAgICAgICAgICAgICAgICAgICAgbm90KCRlbnRpdHlJZGVudGlmaWVyL2V4dDppZC9AZGlzcGxheWJsZT0nZmFsc2UnKSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAkZW50aXR5SWRlbnRpZmllci9leHQ6aWQvQHJvb3QgYW5kDQogICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgkZW50aXR5SWRlbnRpZmllci9leHQ6aWQvQHJvb3QpICZndDsgMCI+DQogICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICA8IS0tIEhJIFNlcnZpY2U6IEhQSS1JIC0tPg0KICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJzdGFydHMtd2l0aCgkZW50aXR5SWRlbnRpZmllci9leHQ6aWQvQHJvb3QsICcxLjIuMzYuMS4yMDAxLjEwMDMuMC4nKSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGVudGl0eUlkZW50aWZpZXIvZXh0OmlkL0Bhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSdIUEktSScgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRlbnRpdHlJZGVudGlmaWVyL2V4dDphc3NpZ25pbmdHZW9ncmFwaGljQXJlYS9AY2xhc3NDb2RlPSdQTEMnIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZW50aXR5SWRlbnRpZmllci9leHQ6YXNzaWduaW5nR2VvZ3JhcGhpY0FyZWEvZXh0Om5hbWU9J05hdGlvbmFsIElkZW50aWZpZXInIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJpZGVudGlmaWVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJzdWJzdHJpbmctYWZ0ZXIoJGVudGl0eUlkZW50aWZpZXIvZXh0OmlkL0Byb290LCAnMS4yLjM2LjEuMjAwMS4xMDAzLjAuJykiLz4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkaXYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkUFJPVklERVJfSU5ESVZJRFVBTF9JREVOVElGSUVSX0NTU19DTEFTUyIvPjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5bSFBJLUk6IDwveHNsOnRleHQ+PHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImZvcm1hdEhJIj48eHNsOndpdGgtcGFyYW0gbmFtZT0iaGlWYWx1ZSI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRpZGVudGlmaWVyIi8+PC94c2w6d2l0aC1wYXJhbT48L3hzbDpjYWxsLXRlbXBsYXRlPjx4c2w6dGV4dD5dPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgIDwhLS0gSWRlbnRpZmllcnMgT3RoZXIgdGhhbiBISSBTZXJ2aWNlIGUuZy4gTVJOLCBNZWRpY2FyZSBQcm92aWRlciBOdW1iZXIsIGV0Yy4gLS0+DQogICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXROb25ISVNlcnZpY2VQcm92aWRlcklkZW50aWZpZXJEaXYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImVudGl0eUlkZW50aWZpZXIiIHNlbGVjdD0iJGVudGl0eUlkZW50aWZpZXIiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJwcm92aWRlcklkZW50aWZpZXJUeXBlIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJFBST1ZJREVSX0lORElWSURVQUxfSURFTlRJRklFUl9DU1NfQ0xBU1MiLz48L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgPC94c2w6aWY+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJnZXRQcm92aWRlckluZGl2aWR1YWxRdWFsaWZpY2F0aW9ucyI+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0icXVhbGlmaWNhdGlvbnMiLz4NCiAgICAgICAgPHhzbDppZiB0ZXN0PSJzdHJpbmctbGVuZ3RoKCRxdWFsaWZpY2F0aW9ucykgJmd0OyAwIj4NCiAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iZGl2Ij4NCiAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkUFJPVklERVJfSU5ESVZJRFVBTF9RVUFMSUZJQ0FUSU9OU19DU1NfQ0xBU1MiLz48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJiIj48eHNsOnRleHQ+UXVhbGlmaWNhdGlvbnM6IDwveHNsOnRleHQ+PC94c2w6ZWxlbWVudD48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJHF1YWxpZmljYXRpb25zIi8+DQogICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgPC94c2w6aWY+DQogICAgPC94c2w6dGVtcGxhdGU+DQoNCiAgICA8eHNsOnRlbXBsYXRlIG5hbWU9ImdldFByb3ZpZGVySW5kaXZpZHVhbE9jY3VwYXRpb24iPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9ImpvYkNvZGUiLz4NCiAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJGpvYkNvZGUvY2RhOm9yaWdpbmFsVGV4dCBhbmQgc3RyaW5nLWxlbmd0aCgkam9iQ29kZS9jZGE6b3JpZ2luYWxUZXh0KSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkaXYiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRQUk9WSURFUl9JTkRJVklEVUFMX09DQ1VQQVRJT05fQ1NTX0NMQVNTIi8+PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iYiI+PHhzbDp0ZXh0Pk9jY3VwYXRpb246IDwveHNsOnRleHQ+PC94c2w6ZWxlbWVudD48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGpvYkNvZGUvY2RhOm9yaWdpbmFsVGV4dC90ZXh0KCkiLz4NCiAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iJGpvYkNvZGUvQGRpc3BsYXlOYW1lIGFuZCBzdHJpbmctbGVuZ3RoKCRqb2JDb2RlL0BkaXNwbGF5TmFtZSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImRpdiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRQUk9WSURFUl9JTkRJVklEVUFMX09DQ1VQQVRJT05fQ1NTX0NMQVNTIi8+PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImIiPjx4c2w6dGV4dD5PY2N1cGF0aW9uOiA8L3hzbDp0ZXh0PjwveHNsOmVsZW1lbnQ+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRqb2JDb2RlL0BkaXNwbGF5TmFtZSIvPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJnZXRQcm92aWRlckRldmljZUlkZW50aWZpZXIiPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9ImVudGl0eUlkZW50aWZpZXIiLz4NCiAgICAgICAgPHhzbDppZiB0ZXN0PSIkcHJvdmlkZXJEZXZpY2VJZGVudGlmaWVyRGlzcGxheT0ndHJ1ZScgYW5kDQogICAgICAgICAgICAgICAgICAgICAgJGVudGl0eUlkZW50aWZpZXIgYW5kDQogICAgICAgICAgICAgICAgICAgICAgJGVudGl0eUlkZW50aWZpZXIvQGNsYXNzQ29kZSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAkZW50aXR5SWRlbnRpZmllci9AY2xhc3NDb2RlPSdJREVOVCcgYW5kDQogICAgICAgICAgICAgICAgICAgICAgJGVudGl0eUlkZW50aWZpZXIvZXh0OmlkIGFuZA0KICAgICAgICAgICAgICAgICAgICAgIG5vdCgkZW50aXR5SWRlbnRpZmllci9leHQ6aWQvQGRpc3BsYXlibGU9J2ZhbHNlJykgYW5kDQogICAgICAgICAgICAgICAgICAgICAgJGVudGl0eUlkZW50aWZpZXIvZXh0OmlkL0Byb290IGFuZA0KICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoJGVudGl0eUlkZW50aWZpZXIvZXh0OmlkL0Byb290KSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgIDwhLS0gTUhSOiBQQUktRCAtLT4NCiAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9InN0YXJ0cy13aXRoKCRlbnRpdHlJZGVudGlmaWVyL2V4dDppZC9Acm9vdCwgJzEuMi4zNi4xLjIwMDEuMTAwNy4yMC4nKSBhbmQNCiAgICAgICAgICAgICAgICAgICAgJGVudGl0eUlkZW50aWZpZXIvZXh0OmlkL0Bhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSdQQUktRCciPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImlkZW50aWZpZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9InN1YnN0cmluZy1hZnRlcigkZW50aXR5SWRlbnRpZmllci9leHQ6aWQvQHJvb3QsICcxLjIuMzYuMS4yMDAxLjEwMDcuMjAuJykiLz4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkaXYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkUFJPVklERVJfREVWSUNFX0lERU5USUZJRVJfQ1NTX0NMQVNTIi8+PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PltQQUktRDogPC94c2w6dGV4dD48eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZm9ybWF0SEkiPjx4c2w6d2l0aC1wYXJhbSBuYW1lPSJoaVZhbHVlIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGlkZW50aWZpZXIiLz48L3hzbDp3aXRoLXBhcmFtPjwveHNsOmNhbGwtdGVtcGxhdGU+PHhzbDp0ZXh0Pl08L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICA8L3hzbDppZj4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgICANCiAgICA8eHNsOnRlbXBsYXRlIG5hbWU9ImdldFByb3ZpZGVyT3JnYW5pc2F0aW9uSWRlbnRpZmllciI+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0iZW50aXR5SWRlbnRpZmllciIvPg0KICAgICAgICANCiAgICAgICAgPHhzbDppZiB0ZXN0PSIkcHJvdmlkZXJPcmdhbmlzYXRpb25JZGVudGlmaWVyRGlzcGxheT0ndHJ1ZScgYW5kDQogICAgICAgICAgICAgICAgICAgICAgJGVudGl0eUlkZW50aWZpZXIgYW5kDQogICAgICAgICAgICAgICAgICAgICAgJGVudGl0eUlkZW50aWZpZXIvQGNsYXNzQ29kZSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAkZW50aXR5SWRlbnRpZmllci9AY2xhc3NDb2RlPSdJREVOVCcgYW5kDQogICAgICAgICAgICAgICAgICAgICAgJGVudGl0eUlkZW50aWZpZXIvZXh0OmlkIGFuZA0KICAgICAgICAgICAgICAgICAgICAgIG5vdCgkZW50aXR5SWRlbnRpZmllci9leHQ6aWQvQGRpc3BsYXlibGU9J2ZhbHNlJykgYW5kDQogICAgICAgICAgICAgICAgICAgICAgJGVudGl0eUlkZW50aWZpZXIvZXh0OmlkL0Byb290IGFuZA0KICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoJGVudGl0eUlkZW50aWZpZXIvZXh0OmlkL0Byb290KSAmZ3Q7IDAiPg0KICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgPCEtLSBISSBTZXJ2aWNlOiBIUEktTyAtLT4NCiAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0ic3RhcnRzLXdpdGgoJGVudGl0eUlkZW50aWZpZXIvZXh0OmlkL0Byb290LCAnMS4yLjM2LjEuMjAwMS4xMDAzLjAuJykgYW5kDQogICAgICAgICAgICAgICAgICAgICRlbnRpdHlJZGVudGlmaWVyL2V4dDppZC9AYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0nSFBJLU8nIGFuZA0KICAgICAgICAgICAgICAgICAgICAkZW50aXR5SWRlbnRpZmllci9leHQ6YXNzaWduaW5nR2VvZ3JhcGhpY0FyZWEvQGNsYXNzQ29kZT0nUExDJyBhbmQNCiAgICAgICAgICAgICAgICAgICAgJGVudGl0eUlkZW50aWZpZXIvZXh0OmFzc2lnbmluZ0dlb2dyYXBoaWNBcmVhL2V4dDpuYW1lPSdOYXRpb25hbCBJZGVudGlmaWVyJyI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iaWRlbnRpZmllciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0ic3Vic3RyaW5nLWFmdGVyKCRlbnRpdHlJZGVudGlmaWVyL2V4dDppZC9Acm9vdCwgJzEuMi4zNi4xLjIwMDEuMTAwMy4wLicpIi8+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOnZhcmlhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iZGl2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJFBST1ZJREVSX09SR0FOSVNBVElPTl9JREVOVElGSUVSX0NTU19DTEFTUyIvPjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5bSFBJLU86IDwveHNsOnRleHQ+PHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImZvcm1hdEhJIj48eHNsOndpdGgtcGFyYW0gbmFtZT0iaGlWYWx1ZSI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRpZGVudGlmaWVyIi8+PC94c2w6d2l0aC1wYXJhbT48L3hzbDpjYWxsLXRlbXBsYXRlPjx4c2w6dGV4dD5dPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgIDwhLS0gTUhSOiBQQUktTyAtLT4NCiAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0ic3RhcnRzLXdpdGgoJGVudGl0eUlkZW50aWZpZXIvZXh0OmlkL0Byb290LCAnMS4yLjM2LjEuMjAwMS4xMDA3LjEuJykgYW5kDQogICAgICAgICAgICAgICAgICAgICRlbnRpdHlJZGVudGlmaWVyL2V4dDppZC9AYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0nUEFJLU8nIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJpZGVudGlmaWVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJzdWJzdHJpbmctYWZ0ZXIoJGVudGl0eUlkZW50aWZpZXIvZXh0OmlkL0Byb290LCAnMS4yLjM2LjEuMjAwMS4xMDA3LjEuJykiLz4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkaXYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkUFJPVklERVJfT1JHQU5JU0FUSU9OX0lERU5USUZJRVJfQ1NTX0NMQVNTIi8+PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PltQQUktTzogPC94c2w6dGV4dD48eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iZm9ybWF0SEkiPjx4c2w6d2l0aC1wYXJhbSBuYW1lPSJoaVZhbHVlIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGlkZW50aWZpZXIiLz48L3hzbDp3aXRoLXBhcmFtPjwveHNsOmNhbGwtdGVtcGxhdGU+PHhzbDp0ZXh0Pl08L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgPCEtLSBJZGVudGlmaWVycyBPdGhlciB0aGFuIEhJIFNlcnZpY2UgZS5nLiBGYWNpbGl0eSBJZGVudGlmaWVyIGV0Yy4gLS0+DQogICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXROb25ISVNlcnZpY2VQcm92aWRlcklkZW50aWZpZXJEaXYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImVudGl0eUlkZW50aWZpZXIiIHNlbGVjdD0iJGVudGl0eUlkZW50aWZpZXIiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJwcm92aWRlcklkZW50aWZpZXJUeXBlIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJFBST1ZJREVSX09SR0FOSVNBVElPTl9JREVOVElGSUVSX0NTU19DTEFTUyIvPjwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICA8L3hzbDppZj4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgICANCiAgICA8eHNsOnRlbXBsYXRlIG5hbWU9ImdldE5vbkhJU2VydmljZVByb3ZpZGVySWRlbnRpZmllckRpdiI+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0iZW50aXR5SWRlbnRpZmllciIvPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9InByb3ZpZGVySWRlbnRpZmllclR5cGUiLz4NCiAgICAgICAgDQogICAgICAgIDx4c2w6aWYgdGVzdD0iJGVudGl0eUlkZW50aWZpZXIvZXh0OmNvZGUgYW5kDQogICAgICAgICAgICAkZW50aXR5SWRlbnRpZmllci9leHQ6Y29kZS9AY29kZSBhbmQNCiAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoJGVudGl0eUlkZW50aWZpZXIvZXh0OmNvZGUvQGNvZGUpICZndDsgMCBhbmQNCiAgICAgICAgICAgICRlbnRpdHlJZGVudGlmaWVyL2V4dDpjb2RlL0Bjb2RlU3lzdGVtIGFuZA0KICAgICAgICAgICAgJGVudGl0eUlkZW50aWZpZXIvZXh0OmNvZGUvQGNvZGVTeXN0ZW09JzIuMTYuODQwLjEuMTEzODgzLjEyLjIwMyciPg0KICAgICAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJpZGVudGlmaWVyIj4NCiAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRlbnRpdHlJZGVudGlmaWVyL2V4dDppZC9AZXh0ZW5zaW9uIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgkZW50aXR5SWRlbnRpZmllci9leHQ6aWQvQGV4dGVuc2lvbikgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZW50aXR5SWRlbnRpZmllci9leHQ6aWQvQGV4dGVuc2lvbiIvPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJzdWJzdHJpbmctYWZ0ZXItbGFzdC1vY2N1cmFuY2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJzdHJpbmciIHNlbGVjdD0iJGVudGl0eUlkZW50aWZpZXIvZXh0OmlkL0Byb290Ii8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImFyZ3VtZW50Ij4uPC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICAgICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iaWRlbnRpZmllclR5cGUiPg0KICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJnZXRITDdWMlRhYmxlMDIwM0lkZW50aWZpZXJDb2RlRGVzY3JpcHRpb24iPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iY29kZSIgc2VsZWN0PSIkZW50aXR5SWRlbnRpZmllci9leHQ6Y29kZS9AY29kZSIvPg0KICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICA8L3hzbDp2YXJpYWJsZT4NCiAgICAgICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iaWRlbnRpZmllckFzc2lnbmluZ0F1dGhvcml0eU5hbWUiPg0KICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iJGVudGl0eUlkZW50aWZpZXIvZXh0OmlkL0Bhc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFuZA0KICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRlbnRpdHlJZGVudGlmaWVyL2V4dDppZC9AYXNzaWduaW5nQXV0aG9yaXR5TmFtZSkgJmd0OyAwIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRlbnRpdHlJZGVudGlmaWVyL2V4dDppZC9AYXNzaWduaW5nQXV0aG9yaXR5TmFtZSIvPg0KICAgICAgICAgICAgICAgIDwveHNsOmlmPg0KICAgICAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJGlkZW50aWZpZXJBc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFuZCANCiAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgkaWRlbnRpZmllckFzc2lnbmluZ0F1dGhvcml0eU5hbWUpICZndDsgMCI+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkaXYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkcHJvdmlkZXJJZGVudGlmaWVyVHlwZSIvPjwveHNsOmF0dHJpYnV0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5bPC94c2w6dGV4dD48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGlkZW50aWZpZXJBc3NpZ25pbmdBdXRob3JpdHlOYW1lIi8+PHhzbDp0ZXh0PjogPC94c2w6dGV4dD4gICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGlkZW50aWZpZXIiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5dPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L2Rpdj4gLS0+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRpZGVudGlmaWVyVHlwZSBhbmQgDQogICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoJGlkZW50aWZpZXJUeXBlKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0iZGl2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImNsYXNzIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJHByb3ZpZGVySWRlbnRpZmllclR5cGUiLz48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+WzwveHNsOnRleHQ+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRpZGVudGlmaWVyVHlwZSIvPjx4c2w6dGV4dD46IDwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGlkZW50aWZpZXIiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5dPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4gPCEtLSA8L2Rpdj4gLS0+DQogICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDplbGVtZW50IG5hbWU9ImRpdiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmF0dHJpYnV0ZSBuYW1lPSJjbGFzcyI+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRwcm92aWRlcklkZW50aWZpZXJUeXBlIi8+PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PltMb2NhbCBJZGVudGlmaWVyOiA8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRpZGVudGlmaWVyIi8+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+XTwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOmVsZW1lbnQ+IDwhLS0gPC9kaXY+IC0tPg0KICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgPC94c2w6aWY+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJzdWJzdHJpbmctYWZ0ZXItbGFzdC1vY2N1cmFuY2UiPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9InN0cmluZyIvPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9ImFyZ3VtZW50Ii8+DQogICAgICAgIA0KICAgICAgICA8eHNsOmlmIHRlc3Q9IiRzdHJpbmcgYW5kDQogICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLWxlbmd0aCgkc3RyaW5nKSAmZ3Q7IDAgYW5kDQogICAgICAgICAgICAgICAgICAgICAgJGFyZ3VtZW50IGFuZA0KICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy1sZW5ndGgoJGFyZ3VtZW50KSAmZ3Q7IDAiPg0KICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9ImNvbnRhaW5zKCRzdHJpbmcsICRhcmd1bWVudCkiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0ic3Vic3RyaW5nLWFmdGVyLWxhc3Qtb2NjdXJhbmNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJzdHJpbmciIHNlbGVjdD0ic3Vic3RyaW5nLWFmdGVyKCRzdHJpbmcsICRhcmd1bWVudCkiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJhcmd1bWVudCIgc2VsZWN0PSIkYXJndW1lbnQiLz4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJHN0cmluZyIvPg0KICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgPC94c2w6aWY+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJnZXRITDdWMlRhYmxlMDIwM0lkZW50aWZpZXJDb2RlRGVzY3JpcHRpb24iPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9ImNvZGUiLz4NCiAgICAgICAgDQogICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRjb2RlPSdNUiciPg0KICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5NUk4vVVJOPC94c2w6dGV4dD4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJGNvZGU9J0ZJJyI+DQogICAgICAgICAgICAgICAgPHhzbDp0ZXh0PkZhY2lsaXR5IElkZW50aWZpZXI8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkY29kZT0nU1InIj4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+U3RhdGUgSWRlbnRpZmllcjwveHNsOnRleHQ+DQogICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRjb2RlPSdMUiciPg0KICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5Mb2NhbCBJZGVudGlmaWVyPC94c2w6dGV4dD4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJGNvZGU9J1BSTiciPg0KICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5Qcm92aWRlciBOdW1iZXI8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJ0b1VwcGVyQ2FzZSI+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0iZGF0YSIvPg0KICAgICAgICANCiAgICAgICAgPHhzbDppZiB0ZXN0PSIkZGF0YSI+DQogICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0idHJhbnNsYXRlKCRkYXRhLCdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eicsICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWicpIi8+DQogICAgICAgIDwveHNsOmlmPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KICAgIA0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0iZ2V0Q29kZWRBZ2UiPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9ImFnZVZhbHVlIj48L3hzbDpwYXJhbT4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJhZ2VVY3VtVW5pdENvZGUiLz4NCiAgICAgICAgDQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0idWN1bVVuaXROYW1lIj4NCiAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJ1Y3VtVW5pdENvZGVUb1VuaXROYW1lU2hvcnRGb3JtIj4NCiAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0idWN1bVVuaXQiIHNlbGVjdD0iJGFnZVVjdW1Vbml0Q29kZSIvPg0KICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgIA0KICAgICAgICA8eHNsOmlmIHRlc3Q9IigkYWdlVmFsdWUgPSAwIG9yICRhZ2VWYWx1ZSAmZ3Q7IDApIGFuZCANCiAgICAgICAgICAgICAgICAgICAgICAoc3RyaW5nLWxlbmd0aCgkdWN1bVVuaXROYW1lKSAmZ3Q7IDApIj4NCiAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjb25jYXQoJGFnZVZhbHVlLCAkdWN1bVVuaXROYW1lKSIvPg0KICAgICAgICA8L3hzbDppZj4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgICANCiAgICA8eHNsOnRlbXBsYXRlIG5hbWU9ImdldER1cmF0aW9uIj4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJ2YWx1ZSI+PC94c2w6cGFyYW0+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0idWN1bVVuaXRDb2RlIi8+DQogICAgICAgIA0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InVjdW1Vbml0TmFtZSI+DQogICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0idWN1bVVuaXRDb2RlVG9Vbml0TmFtZSI+DQogICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InVjdW1Vbml0IiBzZWxlY3Q9IiR1Y3VtVW5pdENvZGUiLz4NCiAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgIDwveHNsOnZhcmlhYmxlPg0KICAgICAgICANCiAgICAgICAgPHhzbDppZiB0ZXN0PSIoJHZhbHVlID0gMCBvciAkdmFsdWUgJmd0OyAwKSBhbmQgDQogICAgICAgICAgICAoc3RyaW5nLWxlbmd0aCgkdWN1bVVuaXROYW1lKSAmZ3Q7IDApIj4NCiAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjb25jYXQoJHZhbHVlLCAnICcsICR1Y3VtVW5pdE5hbWUpIi8+DQogICAgICAgIDwveHNsOmlmPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJjYWxjdWxhdGVBZ2UiPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9ImJpcnRoRGF0ZSIvPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9ImRvY0RhdGUiLz4NCiAgICAgICAgDQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iYmlydGhZZWFyIiBzZWxlY3Q9InN1YnN0cmluZygkYmlydGhEYXRlLDEsNCkiLz4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJiaXJ0aE1vbnRoIiBzZWxlY3Q9InN1YnN0cmluZygkYmlydGhEYXRlLDUsMikiLz4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJiaXJ0aERheSIgc2VsZWN0PSJzdWJzdHJpbmcoJGJpcnRoRGF0ZSw3LDIpIi8+DQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iY3VycmVudFllYXIiIHNlbGVjdD0ic3Vic3RyaW5nKCRkb2NEYXRlLDEsNCkiLz4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJjdXJyZW50TW9udGgiIHNlbGVjdD0ic3Vic3RyaW5nKCRkb2NEYXRlLDUsMikiLz4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJjdXJyZW50RGF5IiBzZWxlY3Q9InN1YnN0cmluZygkZG9jRGF0ZSw3LDIpIi8+DQogICAgICAgIA0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InN0YXJ0QWdlIiBzZWxlY3Q9IiRjdXJyZW50WWVhciAtICRiaXJ0aFllYXIiLz4NCiAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJGN1cnJlbnRNb250aCAmbHQ7ICRiaXJ0aE1vbnRoIj4NCiAgICAgICAgICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImFnZSIgc2VsZWN0PSIkc3RhcnRBZ2UgLSAxIi8+DQogICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkYWdlICZsdDsgMiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iY2FsY3VsYXRlRGF5c1dlZWtzTW9udGhzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iYmlydGhEYXRlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRiaXJ0aERhdGUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJkb2NEYXRlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRkb2NEYXRlIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRhZ2UiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD55PC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJGN1cnJlbnRNb250aCA9ICRiaXJ0aE1vbnRoIj4NCiAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRjdXJyZW50RGF5ICZsdDsgJGJpcnRoRGF5Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iYWdlIiBzZWxlY3Q9IiRzdGFydEFnZSAtIDEiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkYWdlICZsdDsgMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJjYWxjdWxhdGVEYXlzV2Vla3NNb250aHMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImJpcnRoRGF0ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRiaXJ0aERhdGUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0iZG9jRGF0ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRkb2NEYXRlIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkYWdlIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD55PC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJhZ2UiIHNlbGVjdD0iJHN0YXJ0QWdlIi8+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJGFnZSAmbHQ7IDIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iY2FsY3VsYXRlRGF5c1dlZWtzTW9udGhzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJiaXJ0aERhdGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkYmlydGhEYXRlIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImRvY0RhdGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZG9jRGF0ZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGFnZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+eTwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImFnZSIgc2VsZWN0PSIkc3RhcnRBZ2UiLz4NCiAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRhZ2UgJmx0OyAyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJjYWxjdWxhdGVEYXlzV2Vla3NNb250aHMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJiaXJ0aERhdGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGJpcnRoRGF0ZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOndpdGgtcGFyYW0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImRvY0RhdGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGRvY0RhdGUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGFnZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0Pnk8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJjYWxjdWxhdGVEYXlzV2Vla3NNb250aHMiPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9ImJpcnRoRGF0ZSIvPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9ImRvY0RhdGUiLz4NCiAgICAgICAgDQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iYmlydGhZZWFyIiBzZWxlY3Q9InN1YnN0cmluZygkYmlydGhEYXRlLDEsNCkiLz4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJiaXJ0aE1vbnRoIiBzZWxlY3Q9InN1YnN0cmluZygkYmlydGhEYXRlLDUsMikiLz4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJiaXJ0aERheSIgc2VsZWN0PSJzdWJzdHJpbmcoJGJpcnRoRGF0ZSw3LDIpIi8+DQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iY3VycmVudFllYXIiIHNlbGVjdD0ic3Vic3RyaW5nKCRkb2NEYXRlLDEsNCkiLz4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJjdXJyZW50TW9udGgiIHNlbGVjdD0ic3Vic3RyaW5nKCRkb2NEYXRlLDUsMikiLz4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJjdXJyZW50RGF5IiBzZWxlY3Q9InN1YnN0cmluZygkZG9jRGF0ZSw3LDIpIi8+DQogICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0iYmlydGhNb250aERheXMiPg0KICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImRheXNJbk1vbnRoIj4NCiAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ibW9udGgiPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGJpcnRoTW9udGgiLz4NCiAgICAgICAgICAgICAgICA8L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgIA0KICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InN0YXJ0QWdlIiBzZWxlY3Q9IiRjdXJyZW50WWVhciAtICRiaXJ0aFllYXIiLz4NCiAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICA8IS0tIFNBTUUgWUVBUiAtLT4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkY3VycmVudFllYXIgPSAkYmlydGhZZWFyIj4NCiAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSBTQU1FIE1PTlRIIC0tPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iKCRjdXJyZW50TW9udGggPSAkYmlydGhNb250aCkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IigkY3VycmVudERheSAtICRiaXJ0aERheSkgJmx0OyA3Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRjdXJyZW50RGF5IC0gJGJpcnRoRGF5Ii8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5kPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iZmxvb3IoKCRjdXJyZW50RGF5IC0gJGJpcnRoRGF5KSBkaXYgNykiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0Pnc8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSBESUZGIE1PTlRIIC0tPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFyaWFibGUgbmFtZT0ibnVtRGF5cyIgc2VsZWN0PSIoJGJpcnRoTW9udGhEYXlzIC0gJGJpcnRoRGF5KSArICRjdXJyZW50RGF5Ii8+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iKCgkY3VycmVudE1vbnRoIC0gJGJpcnRoTW9udGgpID0gMSkgYW5kIG51bURheXMgJmx0OyA3Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRudW1EYXlzIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5kPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIoJGN1cnJlbnRNb250aCAtICRiaXJ0aE1vbnRoKSA9IDEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iZmxvb3IoJG51bURheXMgZGl2IDcpIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD53PC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIoJGN1cnJlbnRNb250aCAtICRiaXJ0aE1vbnRoKSA9IDIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEdldCBkYXlzIG9mIG1pZGRsZSBtb250aCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJtaWRkbGVNb250aERheXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImRheXNJbk1vbnRoIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ibW9udGgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGJpcnRoTW9udGggKyAxIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOnZhcmlhYmxlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InRvdGFsTnVtRGF5cyIgc2VsZWN0PSIkbnVtRGF5cyArICRtaWRkbGVNb250aERheXMiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJHRvdGFsTnVtRGF5cyAmbHQ7IDU2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iZmxvb3IoJHRvdGFsTnVtRGF5cyBkaXYgNykiLz4gDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0Pnc8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4ybTwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGN1cnJlbnRNb250aCAtICRiaXJ0aE1vbnRoIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5tPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjaG9vc2U+CQkJCQkNCiAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICANCiAgICAgICAgICAgIDwhLS0gRElGRiBZRUFSIC0tPg0KICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJ0b3RhbE1vbnRoRGlmZiIgc2VsZWN0PSIoKCRjdXJyZW50WWVhciAtICRiaXJ0aFllYXIpICogMTIpICsgJGN1cnJlbnRNb250aCAtICRiaXJ0aE1vbnRoIi8+DQogICAgICAgICAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJudW1EYXlzIiBzZWxlY3Q9IigkYmlydGhNb250aERheXMgLSAkYmlydGhEYXkpICsgJGN1cnJlbnREYXkiLz4NCiAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9IigkdG90YWxNb250aERpZmYgPSAxKSBhbmQgKCRudW1EYXlzICZsdDsgNykiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRudW1EYXlzIi8+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+ZDwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIoJHRvdGFsTW9udGhEaWZmID0gMSkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImZsb29yKCRudW1EYXlzIGRpdiA3KSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0Pnc8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iKCR0b3RhbE1vbnRoRGlmZiA9IDIpIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gR2V0IGRheXMgb2YgbWlkZGxlIG1vbnRoLiBJZiBEZWMsIHRoaXMgaW5jcmVtZW50IHRvIDEzLCB3aWxsIGRlZmF1bHQgdG8gMzEgZGF5cyB3aGljaCBpcyBKYW4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9Im1pZGRsZU1vbnRoRGF5cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImRheXNJbk1vbnRoIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9Im1vbnRoIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkYmlydGhNb250aCArIDEiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9InRvdGFsTnVtRGF5cyIgc2VsZWN0PSIkbnVtRGF5cyArICRtaWRkbGVNb250aERheXMiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkdG90YWxOdW1EYXlzICZsdDsgNTYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iZmxvb3IoJHRvdGFsTnVtRGF5cyBkaXYgNykiLz4gDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD53PC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+Mm08L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJGN1cnJlbnREYXkgJmx0OyAkYmlydGhEYXkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJHRvdGFsTW9udGhEaWZmIC0gMSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+bTwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiR0b3RhbE1vbnRoRGlmZiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+bTwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgICAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgICAgICAgICAgPC94c2w6b3RoZXJ3aXNlPg0KICAgICAgICA8L3hzbDpjaG9vc2U+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJkYXlzSW5Nb250aCI+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0ibW9udGgiLz4NCiAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0iJG1vbnRoID0gJzAyJyBvciBtb250aCA9IDIiPg0KICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIyOCIvPg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkbW9udGggPSAnMDQnIG9yICRtb250aCA9ICcwNicgb3IgJG1vbnRoID0gJzA5JyBvciAkbW9udGggPSAnMTEnIG9yICRtb250aCA9IDQgb3IgJG1vbnRoID0gNiBvciAkbW9udGggPSA5IG9yICRtb250aCA9IDExIj4NCiAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iMzAiLz4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iMzEiLz4NCiAgICAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KICAgIA0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0iZm9ybWF0SEkiPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9ImhpVmFsdWUiLz4NCiAgICAgICAgPHhzbDppZiB0ZXN0PSIkaGlWYWx1ZSI+DQogICAgICAgICAgICA8eHNsOnZhcmlhYmxlIG5hbWU9ImlkZW50aWZpZXIiPg0KICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJ0cmltIj4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9InN0cmluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0ic3RyaW5nLWxlbmd0aCgkaGlWYWx1ZSkgJmd0OyAxNiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJzdWJzdHJpbmcoJGhpVmFsdWUsIHN0cmluZy1sZW5ndGgoJGhpVmFsdWUpLTE1LCBzdHJpbmctbGVuZ3RoKCRoaVZhbHVlKSkiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJzdHJpbmctbGVuZ3RoKCRoaVZhbHVlKSA9IDE2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRoaVZhbHVlIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNob29zZT4NCiAgICAgICAgICAgICAgICAgICAgPC94c2w6d2l0aC1wYXJhbT4NCiAgICAgICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgICAgICA8eHNsOmlmIHRlc3Q9InN0cmluZy1sZW5ndGgoJGlkZW50aWZpZXIpPTE2Ij4NCiAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0ic3Vic3RyaW5nKCRpZGVudGlmaWVyLDEsNCkiLz4NCiAgICAgICAgICAgICAgICA8eHNsOnRleHQ+IDwveHNsOnRleHQ+DQogICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9InN1YnN0cmluZygkaWRlbnRpZmllciw1LDQpIi8+DQogICAgICAgICAgICAgICAgPHhzbDp0ZXh0PiA8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJzdWJzdHJpbmcoJGlkZW50aWZpZXIsOSw0KSIvPg0KICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4gPC94c2w6dGV4dD4NCiAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0ic3Vic3RyaW5nKCRpZGVudGlmaWVyLDEzLDQpIi8+DQogICAgICAgICAgICA8L3hzbDppZj4NCiAgICAgICAgPC94c2w6aWY+DQogICAgPC94c2w6dGVtcGxhdGU+DQoNCiAgICA8eHNsOnRlbXBsYXRlIG5hbWU9InByaW50TkJTUHMiPg0KICAgICAgICA8eHNsOnBhcmFtIG5hbWU9Im51bWJlciIvPg0KICAgICAgICANCiAgICAgICAgPHhzbDppZiB0ZXN0PSIkbnVtYmVyICZndDsgMCI+DQogICAgICAgICAgICA8eHNsOmVsZW1lbnQgbmFtZT0ic3BhbiI+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0iY2xhc3MiPm5ic3BTcGFuPC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgPC94c2w6ZWxlbWVudD4NCiAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJwcmludE5CU1BzIj4NCiAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ibnVtYmVyIiBzZWxlY3Q9IiRudW1iZXIgLSAxIi8+DQogICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICA8L3hzbDppZj4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCg0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0ibFRyaW0iPg0KICAgICAgPHhzbDpwYXJhbSBuYW1lPSJzdHJpbmciLz4NCiAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9InN1YnN0cmluZygkc3RyaW5nLCAxLCAxKSA9ICcnIj4NCiAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkc3RyaW5nIi8+DQogICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Im5vcm1hbGl6ZS1zcGFjZShzdWJzdHJpbmcoJHN0cmluZywgMSwgMSkpID0gJyciPg0KICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9ImxUcmltIj4NCiAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJzdHJpbmciIHNlbGVjdD0ic3Vic3RyaW5nKCRzdHJpbmcsIDIpIi8+DQogICAgICAgICAgICA8L3hzbDpjYWxsLXRlbXBsYXRlPg0KICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgIDx4c2w6b3RoZXJ3aXNlPg0KICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRzdHJpbmciLz4NCiAgICAgICAgIDwveHNsOm90aGVyd2lzZT4NCiAgICAgIDwveHNsOmNob29zZT4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgIA0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0iclRyaW0iPg0KICAgICAgPHhzbDpwYXJhbSBuYW1lPSJzdHJpbmciLz4NCiAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9InN1YnN0cmluZygkc3RyaW5nLCAxLCAxKSA9ICcnIj4NCiAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkc3RyaW5nIi8+DQogICAgICAgICA8L3hzbDp3aGVuPg0KICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9Im5vcm1hbGl6ZS1zcGFjZShzdWJzdHJpbmcoJHN0cmluZywgc3RyaW5nLWxlbmd0aCgkc3RyaW5nKSkpID0gJyciPg0KICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InJUcmltIj4NCiAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJzdHJpbmciIHNlbGVjdD0ic3Vic3RyaW5nKCRzdHJpbmcsIDEsIHN0cmluZy1sZW5ndGgoJHN0cmluZykgLSAxKSIvPg0KICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICA8eHNsOm90aGVyd2lzZT4NCiAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkc3RyaW5nIi8+DQogICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICA8L3hzbDpjaG9vc2U+DQogICAgPC94c2w6dGVtcGxhdGU+DQogICAgICANCiAgICA8eHNsOnRlbXBsYXRlIG5hbWU9InRyaW0iPg0KICAgICAgPHhzbDpwYXJhbSBuYW1lPSJzdHJpbmciLz4NCiAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJyVHJpbSI+DQogICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ic3RyaW5nIj4NCiAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJsVHJpbSI+DQogICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ic3RyaW5nIiBzZWxlY3Q9IiRzdHJpbmciLz4NCiAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+DQogICAgICAgICA8L3hzbDp3aXRoLXBhcmFtPg0KICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCiAgICANCiAgICA8eHNsOnRlbXBsYXRlIG5hbWU9Imxhc3RJbmRleE9mIj4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJzdHJpbmciIC8+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0iY2hhciIgLz4NCiAgICAgICAgPHhzbDpjaG9vc2U+DQogICAgICAgICAgICA8IS0tIGlmIHRoZSBzdHJpbmcgY29udGFpbnMgdGhlIGNoYXJhY3Rlci4uLiAtLT4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJjb250YWlucygkc3RyaW5nLCAkY2hhcikiPg0KICAgICAgICAgICAgICAgIDwhLS0gY2FsbCB0aGUgdGVtcGxhdGUgcmVjdXJzaXZlbHkuLi4gLS0+DQogICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9Imxhc3RJbmRleE9mIj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSB3aXRoIHRoZSBzdHJpbmcgYmVpbmcgdGhlIHN0cmluZyBhZnRlciB0aGUgY2hhcmFjdGVyDQogICAgICAgICAgICAgICAgICAgIC0tPg0KICAgICAgICAgICAgICAgICAgICA8eHNsOndpdGgtcGFyYW0gbmFtZT0ic3RyaW5nIg0KICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0PSJzdWJzdHJpbmctYWZ0ZXIoJHN0cmluZywgJGNoYXIpIiAvPg0KICAgICAgICAgICAgICAgICAgICA8IS0tIGFuZCB0aGUgY2hhcmFjdGVyIGJlaW5nIHRoZSBzYW1lIGFzIGJlZm9yZSAtLT4NCiAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9ImNoYXIiIHNlbGVjdD0iJGNoYXIiIC8+DQogICAgICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8IS0tIG90aGVyd2lzZSwgcmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGUgc3RyaW5nIC0tPg0KICAgICAgICAgICAgPHhzbDpvdGhlcndpc2U+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRzdHJpbmciIC8+DQogICAgICAgICAgICA8L3hzbDpvdGhlcndpc2U+DQogICAgICAgIDwveHNsOmNob29zZT4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCg0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0iZ2V0RG9jdW1lbnRJZGVudGlmaWVyIj4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJpaVZhcmlhYmxlIi8+DQogICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9InN0cmluZy1sZW5ndGgoJGlpVmFyaWFibGUvQHJvb3QpICZndDsgMCBhbmQgc3RyaW5nLWxlbmd0aCgkaWlWYXJpYWJsZS9AZXh0ZW5zaW9uKSAmZ3Q7IDAgYW5kIHN0cmluZy1sZW5ndGgoJGlpVmFyaWFibGUvQGFzc2lnbmluZ0F1dGhvcml0eU5hbWUpICZndDsgMCI+DQogICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRpaVZhcmlhYmxlL0BleHRlbnNpb24iLz48eHNsOnRleHQ+ICg8L3hzbDp0ZXh0Pjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkaWlWYXJpYWJsZS9AYXNzaWduaW5nQXV0aG9yaXR5TmFtZSIvPjx4c2w6dGV4dD4pPC94c2w6dGV4dD4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0ic3RyaW5nLWxlbmd0aCgkaWlWYXJpYWJsZS9Acm9vdCkgJmd0OyAwIGFuZCBzdHJpbmctbGVuZ3RoKCRpaVZhcmlhYmxlL0BleHRlbnNpb24pICZndDsgMCI+DQogICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRpaVZhcmlhYmxlL0BleHRlbnNpb24iLz48eHNsOnRleHQ+ICg8L3hzbDp0ZXh0Pjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkaWlWYXJpYWJsZS9Acm9vdCIvPjx4c2w6dGV4dD4pPC94c2w6dGV4dD4NCiAgICAgICAgICAgIDwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOndoZW4gdGVzdD0ic3RyaW5nLWxlbmd0aCgkaWlWYXJpYWJsZS9Acm9vdCkgJmd0OyAwIGFuZCBzdHJpbmctbGVuZ3RoKCRpaVZhcmlhYmxlL0Bhc3NpZ25pbmdBdXRob3JpdHlOYW1lKSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkaWlWYXJpYWJsZS9Acm9vdCIvPjx4c2w6dGV4dD4gKDwveHNsOnRleHQ+PHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRpaVZhcmlhYmxlL0Bhc3NpZ25pbmdBdXRob3JpdHlOYW1lIi8+PHhzbDp0ZXh0Pik8L3hzbDp0ZXh0Pg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgICAgIDx4c2w6d2hlbiB0ZXN0PSJzdHJpbmctbGVuZ3RoKCRpaVZhcmlhYmxlL0Byb290KSAmZ3Q7IDAiPg0KICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkaWlWYXJpYWJsZS9Acm9vdCIvPg0KICAgICAgICAgICAgPC94c2w6d2hlbj4NCiAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KDQogICAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJhZGRJRCI+DQogICAgICAgIDx4c2w6cGFyYW0gbmFtZT0iZWxlbWVudCIvPg0KICAgICAgICA8eHNsOmlmIHRlc3Q9IiRlbGVtZW50L0BJRCBhbmQNCiAgICAgICAgICAgICAgICAgICAgICBzdHJpbmctbGVuZ3RoKCRlbGVtZW50L0BJRCkgJmd0OyAwIj4NCiAgICAgICAgICAgIDx4c2w6ZWxlbWVudCBuYW1lPSJkaXYiPg0KICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9ImlkIj48eHNsOnZhbHVlLW9mIHNlbGVjdD0iJGVsZW1lbnQvQElEIi8+PC94c2w6YXR0cmlidXRlPg0KICAgICAgICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9Im5hbWUiPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIkZWxlbWVudC9ASUQiLz48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICAgICAgPHhzbDphdHRyaWJ1dGUgbmFtZT0ic3R5bGUiPjx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjb25jYXQoJ3Bvc2l0aW9uOnJlbGF0aXZlOyB0b3A6LScsICRCQU5ORVJfSEVJR0hUX1BYLCAncHg7JykiLz48L3hzbDphdHRyaWJ1dGU+DQogICAgICAgICAgICA8L3hzbDplbGVtZW50Pg0KICAgICAgICA8L3hzbDppZj4NCiAgICA8L3hzbDp0ZW1wbGF0ZT4NCg0KICAgIDx4c2w6dGVtcGxhdGUgbmFtZT0iY29udGFpbnNKYXZhU2NyaXB0Ij4NCiAgICAgICAgPHhzbDpwYXJhbSBuYW1lPSJyZWZlcmVuY2UiLz4NCiAgICAgICAgPHhzbDp2YXJpYWJsZSBuYW1lPSJ1cHBlckNhc2VSZWZlcmVuY2UiPg0KICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9InRvVXBwZXJDYXNlIj48eHNsOndpdGgtcGFyYW0gbmFtZT0iZGF0YSIgc2VsZWN0PSIkcmVmZXJlbmNlIi8+PC94c2w6Y2FsbC10ZW1wbGF0ZT4NCiAgICAgICAgPC94c2w6dmFyaWFibGU+DQogICAgICAgIDx4c2w6Y2hvb3NlPg0KICAgICAgICAgICAgPHhzbDp3aGVuIHRlc3Q9ImNvbnRhaW5zKCR1cHBlckNhc2VSZWZlcmVuY2UsICdKQVZBU0NSSVBUJykgb3IgY29udGFpbnMoJHVwcGVyQ2FzZVJlZmVyZW5jZSwgJ0pTQ1JJUFQnKSI+dHJ1ZTwveHNsOndoZW4+DQogICAgICAgICAgICA8eHNsOm90aGVyd2lzZT5mYWxzZTwveHNsOm90aGVyd2lzZT4NCiAgICAgICAgPC94c2w6Y2hvb3NlPg0KICAgIDwveHNsOnRlbXBsYXRlPg0KDQogICAgPCEtLT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09LS0+DQogICAgPCEtLSBbRU5EXSBVVElMSVRZIFRFTVBMQVRFUyAtLT4NCjwveHNsOnN0eWxlc2hlZXQ+DQo='
    DbFiles.save()

    add_to_model_descriptor2('dbmconfigapp_myhrconnectivityentity', ['ClinicalViewer','CVA','VPO','ACDM','Via'])
    add_to_model_descriptor2('dbmconfigapp_myhrconnectivityentity_view', ['CVA'])
    add_to_model_descriptor2('dbmconfigapp_myhrorganizationsentity', ['ACDM'])

def load_OperationalManagerPage_data(apps, schema_editor):

    components = get_components_by_name(apps, ['Operational Manager'])
    page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'OperationalManagerPage')(),
                                            "",
                                            "",
                                            "usage_reports",
                                            [], components)

    model = apps.get_model('dbmconfigapp', 'UsageReports')()
    model.save()

def load_PatientViewPage_data(apps, schema_editor):

    components = get_components_by_name(apps, ['Patient View'])
    pv_general_page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'PatientViewPage')(),
                                            "",
                                            "",
                                            "patient_view_general",
                                            [], components)

    model = apps.get_model('dbmconfigapp', 'PatientViewGeneralDefinitions')()
    model.save()

    add_to_model_descriptor2('dbmconfigapp_patientviewgeneraldefinitions', ['CVA'])
    add_to_model_descriptor2('dbmconfigapp_patientview_generaldefinitions_view', ['CVA'])
    add_to_model_descriptor2('dbmconfigapp_get_images_view', ['CVA'])

    model = apps.get_model('dbmconfigapp', 'PatientViewDefaultLandingPage')()
    model.save()

    add_to_model_descriptor2('dbmconfigapp_patientviewdefaultlandingpage', ['CVA'])

    PatientsListViews = apps.get_model("dbmconfigapp", "PatientsListViews")
    db_alias = schema_editor.connection.alias

    PatientsListViews.objects.using(db_alias).bulk_create([
        PatientsListViews(patients_list_type='Recently Hospitalized', patients_list_label='Recently Hospitalized', patients_list_order=1, patients_relation_type=''),
        PatientsListViews(patients_list_type='Worklist', patients_list_label='Worklist 1', patients_list_order=2, patients_relation_type='2df4657b2dd7fac2739a7c0f6c73dbff'),
        PatientsListViews(patients_list_type='Worklist', patients_list_label='Worklist 2', patients_list_order=3, patients_relation_type='579498e434e652a356334c3bc7f17d53'),
    ])

    add_to_model_descriptor2('dbmconfigapp_patientslistviews', ['CVA'])
    add_to_model_descriptor2('dbmconfigapp_specializedviews', ['CVA'])
    add_to_model_descriptor2('dbmconfigapp_get_specializedviews_view', ['CVA'])

def load_PVMeasurementPage_data(apps, schema_editor):

    global pv_measurement_page

    components = get_components_by_name(apps, ['Patient View'])
    pv_measurement_page = modelsfactory.createPage(apps.get_model('dbmconfigapp', 'PVMeasurementPage')(),
                                            "",
                                            "",
                                            "pv_measurement",
                                            [], components)

    model = apps.get_model('dbmconfigapp', 'VitalsInpatientMeasurement')()
    model.save()

    add_to_model_descriptor2('dbmconfigapp_vitalsinpatientmeasurement', ['CVA','VPO'])

    SemanticGroup = apps.get_model("dbmconfigapp", "EHRAgentSemanticGroup")
    db_alias = schema_editor.connection.alias

    SemanticGroup.objects.using(db_alias).bulk_create([
        SemanticGroup(pk=1, display_name='Vital Signs', order=1),
        SemanticGroup(pk=2, display_name='Height, Weight & BMI', order=2),
    ])

    add_to_model_descriptor2('dbmconfigapp_ehragentsemanticgroup', ['CVA','VPO'])

    MeasurementProperties = apps.get_model("dbmconfigapp", "EHRAgentMeasurementProperties")
    group2 =SemanticGroup.objects.filter(pk=2)[0]
    MeasurementProperties.objects.using(db_alias).bulk_create([
        MeasurementProperties(domain_id='HeartRate', order=1, hide_uom=True),
        MeasurementProperties(domain_id='BloodPressure', order=2, hide_uom=True),
        MeasurementProperties(domain_id='OxygenSaturation', order=3),
        MeasurementProperties(semantic_group=group2, domain_id='BodyHeight', order=1),
        MeasurementProperties(semantic_group=group2, domain_id='BodyWeight', order=2),
        MeasurementProperties(semantic_group=group2, domain_id='BMI', order=3),
    ])

    add_to_model_descriptor2('dbmconfigapp_ehragentmeasurementproperties', ['CVA','VPO'])


def load_PatientSearch_data(apps, schema_editor):

    model = apps.get_model('dbmconfigapp', 'CollaboratePatientSearchProperties')()
    model.save()

    add_to_model_descriptor2('dbmconfigapp_collaboratepatientsearchproperties', ['ClinicalViewer','VPO','VIA','CVA'])

    model = apps.get_model('dbmconfigapp', 'PatientSearchDisplayOptions')()
    model.display_warning = True
    model.display_user_attestation = False
    model.attestation_text ='Please note that you are about to enter the patient record. Please confirm you requested to view the patient clinical information explicitly for treatment reasons only, and not for other reasons (such as research, etc).'
    model.save()

    add_to_model_descriptor2('dbmconfigapp_patientsearchdisplayoptions', ['ClinicalViewer','CVA'])

    model = apps.get_model('dbmconfigapp', 'EmergencyDeclarationText')()
    model.text = 'You may override organizational policies restrictions regarding the patient data you are allowed to see. To view the data in Emergency mode, select a Reason for Declaration and Click “Break Glass”. To continue without viewing the data, click Cancel. Note that any Break the Glass action is audited.'
    model.save()

    add_to_model_descriptor2('dbmconfigapp_emergencydeclarationtext', ['ClinicalViewer','CVA'])

    Reason = apps.get_model("dbmconfigapp", "EmergencyDeclarationReasons")
    db_alias = schema_editor.connection.alias

    Reason.objects.using(db_alias).bulk_create([
        Reason(message = 'Emergency situation', culture = 'en-US'),
        Reason(message = 'Patient gave his consent', culture = 'en-US'),
        Reason(message = 'Other', culture = 'en-US'),
    ])

    add_to_model_descriptor2('dbmconfigapp_emergencydeclarationreasons', ['ClinicalViewer','CVA'])

    Tooltip = apps.get_model("dbmconfigapp", "PatientSearchTooltip")

    Tooltip.objects.using(db_alias).bulk_create([
        Tooltip(message = 'First Name + Last Name + DOB', culture = 'en-US'),
        Tooltip(message = 'SSN + Last Name + Zip Code', culture = 'en-US'),
        Tooltip(message = 'Last Name + Phone + Zip Code', culture = 'en-US'),
    ])

    add_to_model_descriptor2('dbmconfigapp_patientsearchtooltip', ['ClinicalViewer','CVA'])

    model = apps.get_model('dbmconfigapp', 'PatientSearchDefaultSearch')()
    model.save()

    add_to_model_descriptor2('dbmconfigapp_patientsearchdefaultsearch', ['ClinicalViewer'])

    model = apps.get_model('dbmconfigapp', 'DemographySearchFields')()
    model.demo_search_field_label='SSN'
    model.max_chars=9
    model.save()

    add_to_model_descriptor2("dbmconfigapp_demographysearchfields", services_codes=['CVA'])

    SearchResultGrid = apps.get_model('dbmconfigapp', 'SearchResultGrid')

    model = SearchResultGrid()
    model.pk=1
    model.label='Patient Name'
    model.default_fields='PatientName'
    model.column_order=2
    model.save()
    model = SearchResultGrid()
    model.pk=2
    model.label='DOB (Age)'
    model.default_fields='DOB'
    model.column_order=3
    model.save()
    model = SearchResultGrid()
    model.pk=3
    model.label='Address'
    model.default_fields='Address'
    model.column_order=6
    model.save()
    model = SearchResultGrid()
    model.pk=4
    model.label='System'
    model.default_fields='System'
    model.column_order=1
    model.save()
    model = SearchResultGrid()
    model.pk=5
    model.label='Gender'
    model.column_order=4
    model.save()
    model = SearchResultGrid()
    model.pk=6
    model.label='SSN'
    model.column_order=5
    model.save()

    add_to_model_descriptor2("dbmconfigapp_searchresultgrid", services_codes=['CVA'])


def load_Vpo_data(apps, schema_editor):

    db_alias = schema_editor.connection.alias
    Vpo = apps.get_model("dbmconfigapp", "Vpo")

    Vpo.objects.using(db_alias).bulk_create([
Vpo(pk=1,clinical_domain=cv_allergies),
Vpo(pk=2,clinical_domain=cv_problems,filter_status_code='2.16.840.1.113883.5.14|cancelled^2.16.840.1.113883.6.96|185981001^2.16.840.1.113883.5.1068|pending'),
Vpo(pk=3,clinical_domain=cv_diagnoses,filter_status_code='2.16.840.1.113883.5.14|cancelled^2.16.840.1.113883.6.96|185981001'),
Vpo(pk=4,clinical_domain=cv_immunizations,filter_mood_codes='2.16.840.1.113883.5.1001|EVN',filter_status_code='2.16.840.1.113883.5.14|cancelled^2.16.840.1.113883.6.96|185981001'),
Vpo(pk=5,clinical_domain=cv_medications,filter_mood_codes='2.16.840.1.113883.3.57.1.2.17.82|ADMSTRD^'),
Vpo(pk=6,clinical_domain=cv_encounters,encounters_emergency_threshold=24),
Vpo(pk=7,clinical_domain=cv_encounters_details,pv_grouping_mode=pv_clinical_domain_page),
Vpo(pk=8,clinical_domain=cv_summary,encounter_types_to_display='ALL',summary_top_encounters=4,
    summary_top_allergy_intolerance=4,summary_top_conditions=5,summary_med_filter_undefined_status=True,
    summary_time_filter_amount_labs=1,summary_time_filter_unit_labs=1,summary_time_filter_amount_encounter=0,
    summary_time_filter_unit_encounter=4,summary_time_filter_amount_meds=0,summary_time_filter_unit_meds=4,
    filter_status_code='2.16.840.1.113883.5.14|cancelled^2.16.840.1.113883.6.96|inactive^2.16.840.1.113883.6.96|resolved^2.16.840.1.113883.6.96|73425007^2.16.840.1.113883.6.96|185981001^2.16.840.1.113883.5.1068|pending^2.16.840.1.113883.5.14|held'),
Vpo(pk=9,clinical_domain=cv_procedures),
Vpo(pk=10,clinical_domain=cv_demographics,patient_name_type_priority='FAM|GIV|PFX'),
Vpo(pk=11,clinical_domain=cv_vitals,pv_parent=pv_measurement_page,domains_to_hide_uom='BloodPressure,HeartRate',domains_to_concatenate_values='BodyWeight,BodyHeight',
    unit_priority_list_body_weight='2.16.840.1.113883.6.8,kg;2.16.840.1.113883.6.8,g|2.16.840.1.113883.6.8,[lb_av];2.16.840.1.113883.6.8,[oz_av]',
    unit_priority_list_body_height='2.16.840.1.113883.6.8,[ft_us];2.16.840.1.113883.6.8,[in_us]|2.16.840.1.113883.6.8,m;2.16.840.1.113883.6.8,cm'),
Vpo(pk=12,clinical_domain=cv_patient_search),
Vpo(pk=13,clinical_domain=cv_lab_results,lab_susceptibility_methods_code_type='MIC'),
Vpo(pk=14,clinical_domain=cv_documents,pv_grouping_mode=pv_clinical_domain_page,medical_staff_types_priority='2.16.840.1.113883.5.90|AUT^2.16.840.1.113883.5.90|AUTHEN'),
Vpo(pk=15,cv_patient_display=cv_patient_display_page,pl_patient_display=pl_patient_display_page,pv_parent_patient_display=pv_patient_display_page,
    patient_id_type_display_priority='MRN|SSN', pv_patient_id_type_display_priority='MRN|SSN',patient_privacy_indicate_minority=False,
    patient_privacy_minor_min=11,patient_privacy_minor_max=18),
Vpo(pk=16,cv_general=cv_general_page,),
Vpo(pk=17,reporting_cv=cv_reporting_page,reporting_pl=pl_reporting_page,reporting_pv=pv_reporting_page,lab_susceptibility_methods_code_type='MIC',filter_cancelled_items=True),
Vpo(pk=18,clinical_domain=cv_imaging,pv_grouping_mode=pv_clinical_domain_page),
])

    add_to_model_descriptor2('dbmconfigapp_vpo', ['VPO','CVA'])

    VpoCommon = apps.get_model("dbmconfigapp", "VpoCommon")

    VpoCommon.objects.using(db_alias).bulk_create([
VpoCommon(cv_general=cv_general_page),
VpoCommon(clinical_domain=cv_problems),
VpoCommon(clinical_domain=cv_diagnoses),
VpoCommon(clinical_domain=cv_procedures),
])

    add_to_model_descriptor2('dbmconfigapp_vpocommon', ['ClinicalViewer','VPO'])

    VpoPPOL = apps.get_model("dbmconfigapp", "VpoPPOL")

    VpoPPOL.objects.using(db_alias).bulk_create([
VpoPPOL(cv_patient_display=cv_patient_display_page,pl_patient_display=pl_patient_display_page,
        pv_parent_patient_display=pv_patient_display_page,patient_privacy_mask_ssn=4),
VpoPPOL(clinical_domain=cv_patient_search,pv_patient_display=pv_patient_search_page,pv_parent_patient_display=None),
])

    add_to_model_descriptor2('dbmconfigapp_vpoppol', ['PPOL','VPO','CVA'])

    VpoFacilityDisplay = apps.get_model("dbmconfigapp", "VpoFacilityDisplay")

    VpoFacilityDisplay.objects.using(db_alias).bulk_create([
VpoFacilityDisplay(clinical_domain=cv_allergies,display_name="AllergyIntolerances"),
VpoFacilityDisplay(clinical_domain=cv_problems,display_name="Problems"),
VpoFacilityDisplay(clinical_domain=cv_diagnoses,display_name="Diagnoses"),
VpoFacilityDisplay(clinical_domain=cv_immunizations,display_name="Immunizations"),
VpoFacilityDisplay(clinical_domain=cv_pathologies,display_name="Pathology"),
VpoFacilityDisplay(clinical_domain=cv_medications,display_name="Medications"),
VpoFacilityDisplay(clinical_domain=cv_encounters,display_name="Encounters"),
VpoFacilityDisplay(clinical_domain=cv_procedures,display_name="Procedures"),
VpoFacilityDisplay(clinical_domain=cv_vitals,display_name="Measurements"),
VpoFacilityDisplay(clinical_domain=cv_laboratory,display_name="LabEvents"),
VpoFacilityDisplay(clinical_domain=cv_imaging,display_name="Imaging"),
VpoFacilityDisplay(clinical_domain=cv_documents,display_name="Documents"),
])

    add_to_model_descriptor2('dbmconfigapp_vpofacilitydisplay', ['CVA','VPO','Communication','PatientList'])

    VpoEHRAgentDomains = apps.get_model("dbmconfigapp", "VpoEHRAgentDomains")

    VpoEHRAgentDomains.objects.using(db_alias).bulk_create([
VpoEHRAgentDomains(clinical_domain=cv_documents),
VpoEHRAgentDomains(clinical_domain=cv_diagnoses,filter_codes='2.16.840.1.113883.3.57.1.2.17.87|DRG'),
VpoEHRAgentDomains(clinical_domain=cv_medications,filter_codes='2.16.840.1.113883.3.57.1.2.17.82|ADMSTRD^'),
VpoEHRAgentDomains(clinical_domain=cv_procedures,filter_type=1),
])

    add_to_model_descriptor2('dbmconfigapp_vpoehragentdomains', ['ClinicalViewer','CVA','VPO'])

    model = apps.get_model('dbmconfigapp', 'VpoCommunication')()
    model.save()

    add_to_model_descriptor2('dbmconfigapp_vpocommunication', ['CVA','VPO','Communication'])

def load_SystemParameters_data(apps, schema_editor):

    SystemParameters = apps.get_model("dbmconfigapp", "SystemParameters")
    db_alias = schema_editor.connection.alias

    SystemParameters.objects.using(db_alias).bulk_create([
        SystemParameters(param_name = '$_NODE_APP_SERVER$', param_value = get_param('application_server')),
        SystemParameters(param_name = '$_NODE_USER_ABSOLUTE_DOMAIN$', param_value = get_param('user_absolute_domain')),
        SystemParameters(param_name = '$_NODE_ALIAS_NAME$', param_value = get_param('application_server_alias')),
        SystemParameters(param_name = '$_NODE_ACCESS_ABSOLUTE_DOMAIN$', param_value = get_param('default_domain_name')),
    ])

def load_obsolete_models_data(apps, schema_editor):

    model = apps.get_model('dbmconfigapp', 'EHRAgentMedication')()
    model.save()

    model = apps.get_model('dbmconfigapp', 'EHRAgentPastMedicalHistory')()
    model.save()

    model = apps.get_model('dbmconfigapp', 'EHRAgentLabratory')()
    model.save()

    model = apps.get_model('dbmconfigapp', 'VpoEHRAgent')()
    model.return_act_organization_as_unit = True
    model.use_org_type_mode = True
    model.facility_source = 2
    model.save()

    add_to_model_descriptor2("dbmconfigapp_ehragentcategoriesproperties", services_codes=['CVA'])
    add_to_model_descriptor2("dbmconfigapp_ehragentcategoriestopic", services_codes=['CVA'])
    add_to_model_descriptor2("dbmconfigapp_ehragentlabratory", services_codes=['CVA'])
    add_to_model_descriptor2("dbmconfigapp_ehragentmedication", services_codes=['CVA','VPO'])
    add_to_model_descriptor2("dbmconfigapp_ehragentpastmedicalhistory", services_codes=['CVA','VPO'])
    add_to_model_descriptor2("dbmconfigapp_ehragenttooltips", services_codes=['CVA'])
    add_to_model_descriptor2("dbmconfigapp_vpoehragent", services_codes=['CVA','VPO'])

class Migration(migrations.Migration):

    dependencies = [
        ('dbmconfigapp', '2120002_initial2'),
    ]

    operations = [
        migrations.RunPython(forward, backward),
    ]
